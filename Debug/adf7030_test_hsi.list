
adf7030_test_hsi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         0000000c  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000c430  00008010  00008010  00008010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         0000000c  00014440  00014440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d4e  00014450  00014450  00014450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000151a0  000151a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .eh_frame     00000004  000151a8  000151a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  000251ac  000251ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  000251b0  000251b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000770  000251b4  000251b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  00025924  00025924  00015924  2**2
                  ALLOC
 10 .comment      0000007b  00000000  00000000  00015924  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001508  00000000  00000000  0001599f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001d4ef  00000000  00000000  00016ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048bb  00000000  00000000  00034396  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00016bf3  00000000  00000000  00038c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006824  00000000  00000000  0004f844  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0007ab97  00000000  00000000  00056068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000012d8  00000000  00000000  000d0bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001a928  00000000  00000000  000d1ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .ARM.attributes 00000029  00000000  00000000  000ec7ff  2**0
                  CONTENTS, READONLY

Disassembly of section .init:

00008000 <_init>:
    8000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8002:	bf00      	nop
    8004:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8006:	bc08      	pop	{r3}
    8008:	469e      	mov	lr, r3
    800a:	4770      	bx	lr

Disassembly of section .text:

00008010 <sulp>:
    8010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8014:	460f      	mov	r7, r1
    8016:	4690      	mov	r8, r2
    8018:	f00a fb0e 	bl	12638 <__ulp>
    801c:	4604      	mov	r4, r0
    801e:	460d      	mov	r5, r1
    8020:	f1b8 0f00 	cmp.w	r8, #0
    8024:	d011      	beq.n	804a <sulp+0x3a>
    8026:	f3c7 530a 	ubfx	r3, r7, #20, #11
    802a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    802e:	2b00      	cmp	r3, #0
    8030:	dd0b      	ble.n	804a <sulp+0x3a>
    8032:	2400      	movs	r4, #0
    8034:	051b      	lsls	r3, r3, #20
    8036:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
    803a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
    803e:	4622      	mov	r2, r4
    8040:	462b      	mov	r3, r5
    8042:	f00b fc57 	bl	138f4 <__aeabi_dmul>
    8046:	4604      	mov	r4, r0
    8048:	460d      	mov	r5, r1
    804a:	4620      	mov	r0, r4
    804c:	4629      	mov	r1, r5
    804e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00008054 <exit>:
    8054:	b508      	push	{r3, lr}
    8056:	4b07      	ldr	r3, [pc, #28]	; (8074 <exit+0x20>)
    8058:	4604      	mov	r4, r0
    805a:	b113      	cbz	r3, 8062 <exit+0xe>
    805c:	2100      	movs	r1, #0
    805e:	f3af 8000 	nop.w
    8062:	4b05      	ldr	r3, [pc, #20]	; (8078 <exit+0x24>)
    8064:	6818      	ldr	r0, [r3, #0]
    8066:	6a83      	ldr	r3, [r0, #40]	; 0x28
    8068:	b103      	cbz	r3, 806c <exit+0x18>
    806a:	4798      	blx	r3
    806c:	4620      	mov	r0, r4
    806e:	f006 fc0f 	bl	e890 <_exit>
    8072:	bf00      	nop
    8074:	00000000 	.word	0x00000000
    8078:	00014e7c 	.word	0x00014e7c

0000807c <__do_global_dtors_aux>:
    807c:	b510      	push	{r4, lr}
    807e:	4c05      	ldr	r4, [pc, #20]	; (8094 <__do_global_dtors_aux+0x18>)
    8080:	7823      	ldrb	r3, [r4, #0]
    8082:	b933      	cbnz	r3, 8092 <__do_global_dtors_aux+0x16>
    8084:	4b04      	ldr	r3, [pc, #16]	; (8098 <__do_global_dtors_aux+0x1c>)
    8086:	b113      	cbz	r3, 808e <__do_global_dtors_aux+0x12>
    8088:	4804      	ldr	r0, [pc, #16]	; (809c <__do_global_dtors_aux+0x20>)
    808a:	f3af 8000 	nop.w
    808e:	2301      	movs	r3, #1
    8090:	7023      	strb	r3, [r4, #0]
    8092:	bd10      	pop	{r4, pc}
    8094:	00025924 	.word	0x00025924
    8098:	00000000 	.word	0x00000000
    809c:	000151a8 	.word	0x000151a8

000080a0 <frame_dummy>:
    80a0:	b508      	push	{r3, lr}
    80a2:	4b03      	ldr	r3, [pc, #12]	; (80b0 <frame_dummy+0x10>)
    80a4:	b11b      	cbz	r3, 80ae <frame_dummy+0xe>
    80a6:	4903      	ldr	r1, [pc, #12]	; (80b4 <frame_dummy+0x14>)
    80a8:	4803      	ldr	r0, [pc, #12]	; (80b8 <frame_dummy+0x18>)
    80aa:	f3af 8000 	nop.w
    80ae:	bd08      	pop	{r3, pc}
    80b0:	00000000 	.word	0x00000000
    80b4:	00025928 	.word	0x00025928
    80b8:	000151a8 	.word	0x000151a8

000080bc <_mainCRTStartup>:
    80bc:	4b15      	ldr	r3, [pc, #84]	; (8114 <_mainCRTStartup+0x58>)
    80be:	2b00      	cmp	r3, #0
    80c0:	bf08      	it	eq
    80c2:	4b13      	ldreq	r3, [pc, #76]	; (8110 <_mainCRTStartup+0x54>)
    80c4:	469d      	mov	sp, r3
    80c6:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
    80ca:	2100      	movs	r1, #0
    80cc:	468b      	mov	fp, r1
    80ce:	460f      	mov	r7, r1
    80d0:	4813      	ldr	r0, [pc, #76]	; (8120 <_mainCRTStartup+0x64>)
    80d2:	4a14      	ldr	r2, [pc, #80]	; (8124 <_mainCRTStartup+0x68>)
    80d4:	1a12      	subs	r2, r2, r0
    80d6:	f007 f83b 	bl	f150 <memset>
    80da:	4b0f      	ldr	r3, [pc, #60]	; (8118 <_mainCRTStartup+0x5c>)
    80dc:	2b00      	cmp	r3, #0
    80de:	d000      	beq.n	80e2 <_mainCRTStartup+0x26>
    80e0:	4798      	blx	r3
    80e2:	4b0e      	ldr	r3, [pc, #56]	; (811c <_mainCRTStartup+0x60>)
    80e4:	2b00      	cmp	r3, #0
    80e6:	d000      	beq.n	80ea <_mainCRTStartup+0x2e>
    80e8:	4798      	blx	r3
    80ea:	2000      	movs	r0, #0
    80ec:	2100      	movs	r1, #0
    80ee:	0004      	movs	r4, r0
    80f0:	000d      	movs	r5, r1
    80f2:	480d      	ldr	r0, [pc, #52]	; (8128 <_mainCRTStartup+0x6c>)
    80f4:	2800      	cmp	r0, #0
    80f6:	d002      	beq.n	80fe <_mainCRTStartup+0x42>
    80f8:	480c      	ldr	r0, [pc, #48]	; (812c <_mainCRTStartup+0x70>)
    80fa:	f3af 8000 	nop.w
    80fe:	f007 f803 	bl	f108 <__libc_init_array>
    8102:	0020      	movs	r0, r4
    8104:	0029      	movs	r1, r5
    8106:	f005 fccb 	bl	daa0 <main>
    810a:	f7ff ffa3 	bl	8054 <exit>
    810e:	bf00      	nop
    8110:	00080000 	.word	0x00080000
	...
    8120:	00025924 	.word	0x00025924
    8124:	000263d8 	.word	0x000263d8
	...

00008130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
    8130:	b580      	push	{r7, lr}
    8132:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
    8134:	4b08      	ldr	r3, [pc, #32]	; (8158 <HAL_Init+0x28>)
    8136:	681b      	ldr	r3, [r3, #0]
    8138:	4a07      	ldr	r2, [pc, #28]	; (8158 <HAL_Init+0x28>)
    813a:	f043 0310 	orr.w	r3, r3, #16
    813e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    8140:	2003      	movs	r0, #3
    8142:	f000 fd43 	bl	8bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
    8146:	2000      	movs	r0, #0
    8148:	f000 f808 	bl	815c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
    814c:	f006 fb5e 	bl	e80c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
    8150:	2300      	movs	r3, #0
}
    8152:	4618      	mov	r0, r3
    8154:	bd80      	pop	{r7, pc}
    8156:	bf00      	nop
    8158:	40022000 	.word	0x40022000

0000815c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
    815c:	b580      	push	{r7, lr}
    815e:	b082      	sub	sp, #8
    8160:	af00      	add	r7, sp, #0
    8162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
    8164:	4b12      	ldr	r3, [pc, #72]	; (81b0 <HAL_InitTick+0x54>)
    8166:	681a      	ldr	r2, [r3, #0]
    8168:	4b12      	ldr	r3, [pc, #72]	; (81b4 <HAL_InitTick+0x58>)
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	4619      	mov	r1, r3
    816e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8172:	fbb3 f3f1 	udiv	r3, r3, r1
    8176:	fbb2 f3f3 	udiv	r3, r2, r3
    817a:	4618      	mov	r0, r3
    817c:	f000 fd5b 	bl	8c36 <HAL_SYSTICK_Config>
    8180:	4603      	mov	r3, r0
    8182:	2b00      	cmp	r3, #0
    8184:	d001      	beq.n	818a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
    8186:	2301      	movs	r3, #1
    8188:	e00e      	b.n	81a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
    818a:	687b      	ldr	r3, [r7, #4]
    818c:	2b0f      	cmp	r3, #15
    818e:	d80a      	bhi.n	81a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    8190:	2200      	movs	r2, #0
    8192:	6879      	ldr	r1, [r7, #4]
    8194:	f04f 30ff 	mov.w	r0, #4294967295
    8198:	f000 fd23 	bl	8be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
    819c:	4a06      	ldr	r2, [pc, #24]	; (81b8 <HAL_InitTick+0x5c>)
    819e:	687b      	ldr	r3, [r7, #4]
    81a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
    81a2:	2300      	movs	r3, #0
    81a4:	e000      	b.n	81a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
    81a6:	2301      	movs	r3, #1
}
    81a8:	4618      	mov	r0, r3
    81aa:	3708      	adds	r7, #8
    81ac:	46bd      	mov	sp, r7
    81ae:	bd80      	pop	{r7, pc}
    81b0:	000256f0 	.word	0x000256f0
    81b4:	000251b8 	.word	0x000251b8
    81b8:	000251b4 	.word	0x000251b4

000081bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
    81bc:	b480      	push	{r7}
    81be:	af00      	add	r7, sp, #0
  return uwTick;
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <HAL_GetTick+0x10>)
    81c2:	681b      	ldr	r3, [r3, #0]
}
    81c4:	4618      	mov	r0, r3
    81c6:	46bd      	mov	sp, r7
    81c8:	bc80      	pop	{r7}
    81ca:	4770      	bx	lr
    81cc:	00025b70 	.word	0x00025b70

000081d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
    81d0:	b580      	push	{r7, lr}
    81d2:	b084      	sub	sp, #16
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
    81d8:	f7ff fff0 	bl	81bc <HAL_GetTick>
    81dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
    81de:	687b      	ldr	r3, [r7, #4]
    81e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
    81e2:	68fb      	ldr	r3, [r7, #12]
    81e4:	f1b3 3fff 	cmp.w	r3, #4294967295
    81e8:	d005      	beq.n	81f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
    81ea:	4b09      	ldr	r3, [pc, #36]	; (8210 <HAL_Delay+0x40>)
    81ec:	781b      	ldrb	r3, [r3, #0]
    81ee:	461a      	mov	r2, r3
    81f0:	68fb      	ldr	r3, [r7, #12]
    81f2:	4413      	add	r3, r2
    81f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
    81f6:	bf00      	nop
    81f8:	f7ff ffe0 	bl	81bc <HAL_GetTick>
    81fc:	4602      	mov	r2, r0
    81fe:	68bb      	ldr	r3, [r7, #8]
    8200:	1ad3      	subs	r3, r2, r3
    8202:	68fa      	ldr	r2, [r7, #12]
    8204:	429a      	cmp	r2, r3
    8206:	d8f7      	bhi.n	81f8 <HAL_Delay+0x28>
  {
  }
}
    8208:	bf00      	nop
    820a:	3710      	adds	r7, #16
    820c:	46bd      	mov	sp, r7
    820e:	bd80      	pop	{r7, pc}
    8210:	000251b8 	.word	0x000251b8

00008214 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
    8214:	b580      	push	{r7, lr}
    8216:	b086      	sub	sp, #24
    8218:	af00      	add	r7, sp, #0
    821a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
    821c:	2300      	movs	r3, #0
    821e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
    8220:	2300      	movs	r3, #0
    8222:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
    8224:	2300      	movs	r3, #0
    8226:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
    8228:	2300      	movs	r3, #0
    822a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
    822c:	687b      	ldr	r3, [r7, #4]
    822e:	2b00      	cmp	r3, #0
    8230:	d101      	bne.n	8236 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
    8232:	2301      	movs	r3, #1
    8234:	e0be      	b.n	83b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
    8236:	687b      	ldr	r3, [r7, #4]
    8238:	689b      	ldr	r3, [r3, #8]
    823a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
    823c:	687b      	ldr	r3, [r7, #4]
    823e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8240:	2b00      	cmp	r3, #0
    8242:	d109      	bne.n	8258 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    8244:	687b      	ldr	r3, [r7, #4]
    8246:	2200      	movs	r2, #0
    8248:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
    824a:	687b      	ldr	r3, [r7, #4]
    824c:	2200      	movs	r2, #0
    824e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
    8252:	6878      	ldr	r0, [r7, #4]
    8254:	f005 fab0 	bl	d7b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
    8258:	6878      	ldr	r0, [r7, #4]
    825a:	f000 fbb1 	bl	89c0 <ADC_ConversionStop_Disable>
    825e:	4603      	mov	r3, r0
    8260:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
    8262:	687b      	ldr	r3, [r7, #4]
    8264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8266:	f003 0310 	and.w	r3, r3, #16
    826a:	2b00      	cmp	r3, #0
    826c:	f040 8099 	bne.w	83a2 <HAL_ADC_Init+0x18e>
    8270:	7dfb      	ldrb	r3, [r7, #23]
    8272:	2b00      	cmp	r3, #0
    8274:	f040 8095 	bne.w	83a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
    8278:	687b      	ldr	r3, [r7, #4]
    827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    827c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    8280:	f023 0302 	bic.w	r3, r3, #2
    8284:	f043 0202 	orr.w	r2, r3, #2
    8288:	687b      	ldr	r3, [r7, #4]
    828a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
    828c:	687b      	ldr	r3, [r7, #4]
    828e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
    8290:	687b      	ldr	r3, [r7, #4]
    8292:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
    8294:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
    8296:	687b      	ldr	r3, [r7, #4]
    8298:	7b1b      	ldrb	r3, [r3, #12]
    829a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
    829c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
    829e:	68ba      	ldr	r2, [r7, #8]
    82a0:	4313      	orrs	r3, r2
    82a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
    82a4:	687b      	ldr	r3, [r7, #4]
    82a6:	689b      	ldr	r3, [r3, #8]
    82a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    82ac:	d003      	beq.n	82b6 <HAL_ADC_Init+0xa2>
    82ae:	687b      	ldr	r3, [r7, #4]
    82b0:	689b      	ldr	r3, [r3, #8]
    82b2:	2b01      	cmp	r3, #1
    82b4:	d102      	bne.n	82bc <HAL_ADC_Init+0xa8>
    82b6:	f44f 7380 	mov.w	r3, #256	; 0x100
    82ba:	e000      	b.n	82be <HAL_ADC_Init+0xaa>
    82bc:	2300      	movs	r3, #0
    82be:	693a      	ldr	r2, [r7, #16]
    82c0:	4313      	orrs	r3, r2
    82c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
    82c4:	687b      	ldr	r3, [r7, #4]
    82c6:	7d1b      	ldrb	r3, [r3, #20]
    82c8:	2b01      	cmp	r3, #1
    82ca:	d119      	bne.n	8300 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
    82cc:	687b      	ldr	r3, [r7, #4]
    82ce:	7b1b      	ldrb	r3, [r3, #12]
    82d0:	2b00      	cmp	r3, #0
    82d2:	d109      	bne.n	82e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
    82d4:	687b      	ldr	r3, [r7, #4]
    82d6:	699b      	ldr	r3, [r3, #24]
    82d8:	3b01      	subs	r3, #1
    82da:	035a      	lsls	r2, r3, #13
    82dc:	693b      	ldr	r3, [r7, #16]
    82de:	4313      	orrs	r3, r2
    82e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    82e4:	613b      	str	r3, [r7, #16]
    82e6:	e00b      	b.n	8300 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    82e8:	687b      	ldr	r3, [r7, #4]
    82ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    82ec:	f043 0220 	orr.w	r2, r3, #32
    82f0:	687b      	ldr	r3, [r7, #4]
    82f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
    82f4:	687b      	ldr	r3, [r7, #4]
    82f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    82f8:	f043 0201 	orr.w	r2, r3, #1
    82fc:	687b      	ldr	r3, [r7, #4]
    82fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
    8300:	687b      	ldr	r3, [r7, #4]
    8302:	681b      	ldr	r3, [r3, #0]
    8304:	685b      	ldr	r3, [r3, #4]
    8306:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
    830a:	687b      	ldr	r3, [r7, #4]
    830c:	681b      	ldr	r3, [r3, #0]
    830e:	693a      	ldr	r2, [r7, #16]
    8310:	430a      	orrs	r2, r1
    8312:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
    8314:	687b      	ldr	r3, [r7, #4]
    8316:	681b      	ldr	r3, [r3, #0]
    8318:	689a      	ldr	r2, [r3, #8]
    831a:	4b28      	ldr	r3, [pc, #160]	; (83bc <HAL_ADC_Init+0x1a8>)
    831c:	4013      	ands	r3, r2
    831e:	687a      	ldr	r2, [r7, #4]
    8320:	6812      	ldr	r2, [r2, #0]
    8322:	68b9      	ldr	r1, [r7, #8]
    8324:	430b      	orrs	r3, r1
    8326:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    8328:	687b      	ldr	r3, [r7, #4]
    832a:	689b      	ldr	r3, [r3, #8]
    832c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8330:	d003      	beq.n	833a <HAL_ADC_Init+0x126>
    8332:	687b      	ldr	r3, [r7, #4]
    8334:	689b      	ldr	r3, [r3, #8]
    8336:	2b01      	cmp	r3, #1
    8338:	d104      	bne.n	8344 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    833a:	687b      	ldr	r3, [r7, #4]
    833c:	691b      	ldr	r3, [r3, #16]
    833e:	3b01      	subs	r3, #1
    8340:	051b      	lsls	r3, r3, #20
    8342:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
    8344:	687b      	ldr	r3, [r7, #4]
    8346:	681b      	ldr	r3, [r3, #0]
    8348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    834a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
    834e:	687b      	ldr	r3, [r7, #4]
    8350:	681b      	ldr	r3, [r3, #0]
    8352:	68fa      	ldr	r2, [r7, #12]
    8354:	430a      	orrs	r2, r1
    8356:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
    8358:	687b      	ldr	r3, [r7, #4]
    835a:	681b      	ldr	r3, [r3, #0]
    835c:	689a      	ldr	r2, [r3, #8]
    835e:	4b18      	ldr	r3, [pc, #96]	; (83c0 <HAL_ADC_Init+0x1ac>)
    8360:	4013      	ands	r3, r2
    8362:	68ba      	ldr	r2, [r7, #8]
    8364:	429a      	cmp	r2, r3
    8366:	d10b      	bne.n	8380 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
    8368:	687b      	ldr	r3, [r7, #4]
    836a:	2200      	movs	r2, #0
    836c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
    836e:	687b      	ldr	r3, [r7, #4]
    8370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8372:	f023 0303 	bic.w	r3, r3, #3
    8376:	f043 0201 	orr.w	r2, r3, #1
    837a:	687b      	ldr	r3, [r7, #4]
    837c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
    837e:	e018      	b.n	83b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
    8380:	687b      	ldr	r3, [r7, #4]
    8382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8384:	f023 0312 	bic.w	r3, r3, #18
    8388:	f043 0210 	orr.w	r2, r3, #16
    838c:	687b      	ldr	r3, [r7, #4]
    838e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
    8390:	687b      	ldr	r3, [r7, #4]
    8392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8394:	f043 0201 	orr.w	r2, r3, #1
    8398:	687b      	ldr	r3, [r7, #4]
    839a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
    839c:	2301      	movs	r3, #1
    839e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
    83a0:	e007      	b.n	83b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
    83a2:	687b      	ldr	r3, [r7, #4]
    83a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    83a6:	f043 0210 	orr.w	r2, r3, #16
    83aa:	687b      	ldr	r3, [r7, #4]
    83ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
    83ae:	2301      	movs	r3, #1
    83b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
    83b2:	7dfb      	ldrb	r3, [r7, #23]
}
    83b4:	4618      	mov	r0, r3
    83b6:	3718      	adds	r7, #24
    83b8:	46bd      	mov	sp, r7
    83ba:	bd80      	pop	{r7, pc}
    83bc:	ffe1f7fd 	.word	0xffe1f7fd
    83c0:	ff1f0efe 	.word	0xff1f0efe

000083c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
    83c4:	b580      	push	{r7, lr}
    83c6:	b084      	sub	sp, #16
    83c8:	af00      	add	r7, sp, #0
    83ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
    83cc:	2300      	movs	r3, #0
    83ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
    83d0:	687b      	ldr	r3, [r7, #4]
    83d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    83d6:	2b01      	cmp	r3, #1
    83d8:	d101      	bne.n	83de <HAL_ADC_Start+0x1a>
    83da:	2302      	movs	r3, #2
    83dc:	e098      	b.n	8510 <HAL_ADC_Start+0x14c>
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	2201      	movs	r2, #1
    83e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
    83e6:	6878      	ldr	r0, [r7, #4]
    83e8:	f000 fa98 	bl	891c <ADC_Enable>
    83ec:	4603      	mov	r3, r0
    83ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
    83f0:	7bfb      	ldrb	r3, [r7, #15]
    83f2:	2b00      	cmp	r3, #0
    83f4:	f040 8087 	bne.w	8506 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
    83f8:	687b      	ldr	r3, [r7, #4]
    83fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    83fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    8400:	f023 0301 	bic.w	r3, r3, #1
    8404:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    8408:	687b      	ldr	r3, [r7, #4]
    840a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    840c:	687b      	ldr	r3, [r7, #4]
    840e:	681b      	ldr	r3, [r3, #0]
    8410:	4a41      	ldr	r2, [pc, #260]	; (8518 <HAL_ADC_Start+0x154>)
    8412:	4293      	cmp	r3, r2
    8414:	d105      	bne.n	8422 <HAL_ADC_Start+0x5e>
    8416:	4b41      	ldr	r3, [pc, #260]	; (851c <HAL_ADC_Start+0x158>)
    8418:	685b      	ldr	r3, [r3, #4]
    841a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    841e:	2b00      	cmp	r3, #0
    8420:	d115      	bne.n	844e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
    8422:	687b      	ldr	r3, [r7, #4]
    8424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8426:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
    842a:	687b      	ldr	r3, [r7, #4]
    842c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
    842e:	687b      	ldr	r3, [r7, #4]
    8430:	681b      	ldr	r3, [r3, #0]
    8432:	685b      	ldr	r3, [r3, #4]
    8434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8438:	2b00      	cmp	r3, #0
    843a:	d026      	beq.n	848a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
    843c:	687b      	ldr	r3, [r7, #4]
    843e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    8444:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    8448:	687b      	ldr	r3, [r7, #4]
    844a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
    844c:	e01d      	b.n	848a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
    844e:	687b      	ldr	r3, [r7, #4]
    8450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8452:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    8456:	687b      	ldr	r3, [r7, #4]
    8458:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
    845a:	687b      	ldr	r3, [r7, #4]
    845c:	681b      	ldr	r3, [r3, #0]
    845e:	4a2f      	ldr	r2, [pc, #188]	; (851c <HAL_ADC_Start+0x158>)
    8460:	4293      	cmp	r3, r2
    8462:	d004      	beq.n	846e <HAL_ADC_Start+0xaa>
    8464:	687b      	ldr	r3, [r7, #4]
    8466:	681b      	ldr	r3, [r3, #0]
    8468:	4a2b      	ldr	r2, [pc, #172]	; (8518 <HAL_ADC_Start+0x154>)
    846a:	4293      	cmp	r3, r2
    846c:	d10d      	bne.n	848a <HAL_ADC_Start+0xc6>
    846e:	4b2b      	ldr	r3, [pc, #172]	; (851c <HAL_ADC_Start+0x158>)
    8470:	685b      	ldr	r3, [r3, #4]
    8472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8476:	2b00      	cmp	r3, #0
    8478:	d007      	beq.n	848a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
    847a:	687b      	ldr	r3, [r7, #4]
    847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    847e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    8482:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    8486:	687b      	ldr	r3, [r7, #4]
    8488:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
    848a:	687b      	ldr	r3, [r7, #4]
    848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    848e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    8492:	2b00      	cmp	r3, #0
    8494:	d006      	beq.n	84a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
    8496:	687b      	ldr	r3, [r7, #4]
    8498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    849a:	f023 0206 	bic.w	r2, r3, #6
    849e:	687b      	ldr	r3, [r7, #4]
    84a0:	62da      	str	r2, [r3, #44]	; 0x2c
    84a2:	e002      	b.n	84aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
    84a4:	687b      	ldr	r3, [r7, #4]
    84a6:	2200      	movs	r2, #0
    84a8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
    84aa:	687b      	ldr	r3, [r7, #4]
    84ac:	2200      	movs	r2, #0
    84ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
    84b2:	687b      	ldr	r3, [r7, #4]
    84b4:	681b      	ldr	r3, [r3, #0]
    84b6:	f06f 0202 	mvn.w	r2, #2
    84ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
    84bc:	687b      	ldr	r3, [r7, #4]
    84be:	681b      	ldr	r3, [r3, #0]
    84c0:	689b      	ldr	r3, [r3, #8]
    84c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
    84c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
    84ca:	d113      	bne.n	84f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
    84d0:	4a11      	ldr	r2, [pc, #68]	; (8518 <HAL_ADC_Start+0x154>)
    84d2:	4293      	cmp	r3, r2
    84d4:	d105      	bne.n	84e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    84d6:	4b11      	ldr	r3, [pc, #68]	; (851c <HAL_ADC_Start+0x158>)
    84d8:	685b      	ldr	r3, [r3, #4]
    84da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
    84de:	2b00      	cmp	r3, #0
    84e0:	d108      	bne.n	84f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
    84e2:	687b      	ldr	r3, [r7, #4]
    84e4:	681b      	ldr	r3, [r3, #0]
    84e6:	689a      	ldr	r2, [r3, #8]
    84e8:	687b      	ldr	r3, [r7, #4]
    84ea:	681b      	ldr	r3, [r3, #0]
    84ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    84f0:	609a      	str	r2, [r3, #8]
    84f2:	e00c      	b.n	850e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
    84f4:	687b      	ldr	r3, [r7, #4]
    84f6:	681b      	ldr	r3, [r3, #0]
    84f8:	689a      	ldr	r2, [r3, #8]
    84fa:	687b      	ldr	r3, [r7, #4]
    84fc:	681b      	ldr	r3, [r3, #0]
    84fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    8502:	609a      	str	r2, [r3, #8]
    8504:	e003      	b.n	850e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    8506:	687b      	ldr	r3, [r7, #4]
    8508:	2200      	movs	r2, #0
    850a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
    850e:	7bfb      	ldrb	r3, [r7, #15]
}
    8510:	4618      	mov	r0, r3
    8512:	3710      	adds	r7, #16
    8514:	46bd      	mov	sp, r7
    8516:	bd80      	pop	{r7, pc}
    8518:	40012800 	.word	0x40012800
    851c:	40012400 	.word	0x40012400

00008520 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
    8520:	b590      	push	{r4, r7, lr}
    8522:	b087      	sub	sp, #28
    8524:	af00      	add	r7, sp, #0
    8526:	6078      	str	r0, [r7, #4]
    8528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
    852a:	2300      	movs	r3, #0
    852c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
    852e:	2300      	movs	r3, #0
    8530:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
    8532:	2300      	movs	r3, #0
    8534:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
    8536:	f7ff fe41 	bl	81bc <HAL_GetTick>
    853a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
    853c:	687b      	ldr	r3, [r7, #4]
    853e:	681b      	ldr	r3, [r3, #0]
    8540:	689b      	ldr	r3, [r3, #8]
    8542:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8546:	2b00      	cmp	r3, #0
    8548:	d00b      	beq.n	8562 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    854a:	687b      	ldr	r3, [r7, #4]
    854c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    854e:	f043 0220 	orr.w	r2, r3, #32
    8552:	687b      	ldr	r3, [r7, #4]
    8554:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    8556:	687b      	ldr	r3, [r7, #4]
    8558:	2200      	movs	r2, #0
    855a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
    855e:	2301      	movs	r3, #1
    8560:	e0c8      	b.n	86f4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	681b      	ldr	r3, [r3, #0]
    8566:	685b      	ldr	r3, [r3, #4]
    8568:	f403 7380 	and.w	r3, r3, #256	; 0x100
    856c:	2b00      	cmp	r3, #0
    856e:	d12a      	bne.n	85c6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
    8570:	687b      	ldr	r3, [r7, #4]
    8572:	681b      	ldr	r3, [r3, #0]
    8574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8576:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
    857a:	2b00      	cmp	r3, #0
    857c:	d123      	bne.n	85c6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
    857e:	e01a      	b.n	85b6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
    8580:	683b      	ldr	r3, [r7, #0]
    8582:	f1b3 3fff 	cmp.w	r3, #4294967295
    8586:	d016      	beq.n	85b6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
    8588:	683b      	ldr	r3, [r7, #0]
    858a:	2b00      	cmp	r3, #0
    858c:	d007      	beq.n	859e <HAL_ADC_PollForConversion+0x7e>
    858e:	f7ff fe15 	bl	81bc <HAL_GetTick>
    8592:	4602      	mov	r2, r0
    8594:	697b      	ldr	r3, [r7, #20]
    8596:	1ad3      	subs	r3, r2, r3
    8598:	683a      	ldr	r2, [r7, #0]
    859a:	429a      	cmp	r2, r3
    859c:	d20b      	bcs.n	85b6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
    859e:	687b      	ldr	r3, [r7, #4]
    85a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85a2:	f043 0204 	orr.w	r2, r3, #4
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
    85aa:	687b      	ldr	r3, [r7, #4]
    85ac:	2200      	movs	r2, #0
    85ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
    85b2:	2303      	movs	r3, #3
    85b4:	e09e      	b.n	86f4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
    85b6:	687b      	ldr	r3, [r7, #4]
    85b8:	681b      	ldr	r3, [r3, #0]
    85ba:	681b      	ldr	r3, [r3, #0]
    85bc:	f003 0302 	and.w	r3, r3, #2
    85c0:	2b00      	cmp	r3, #0
    85c2:	d0dd      	beq.n	8580 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
    85c4:	e06c      	b.n	86a0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
    85c6:	4b4d      	ldr	r3, [pc, #308]	; (86fc <HAL_ADC_PollForConversion+0x1dc>)
    85c8:	681c      	ldr	r4, [r3, #0]
    85ca:	2002      	movs	r0, #2
    85cc:	f002 f90e 	bl	a7ec <HAL_RCCEx_GetPeriphCLKFreq>
    85d0:	4603      	mov	r3, r0
    85d2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
    85d6:	687b      	ldr	r3, [r7, #4]
    85d8:	681b      	ldr	r3, [r3, #0]
    85da:	6919      	ldr	r1, [r3, #16]
    85dc:	4b48      	ldr	r3, [pc, #288]	; (8700 <HAL_ADC_PollForConversion+0x1e0>)
    85de:	400b      	ands	r3, r1
    85e0:	2b00      	cmp	r3, #0
    85e2:	d118      	bne.n	8616 <HAL_ADC_PollForConversion+0xf6>
    85e4:	687b      	ldr	r3, [r7, #4]
    85e6:	681b      	ldr	r3, [r3, #0]
    85e8:	68d9      	ldr	r1, [r3, #12]
    85ea:	4b46      	ldr	r3, [pc, #280]	; (8704 <HAL_ADC_PollForConversion+0x1e4>)
    85ec:	400b      	ands	r3, r1
    85ee:	2b00      	cmp	r3, #0
    85f0:	d111      	bne.n	8616 <HAL_ADC_PollForConversion+0xf6>
    85f2:	687b      	ldr	r3, [r7, #4]
    85f4:	681b      	ldr	r3, [r3, #0]
    85f6:	6919      	ldr	r1, [r3, #16]
    85f8:	4b43      	ldr	r3, [pc, #268]	; (8708 <HAL_ADC_PollForConversion+0x1e8>)
    85fa:	400b      	ands	r3, r1
    85fc:	2b00      	cmp	r3, #0
    85fe:	d108      	bne.n	8612 <HAL_ADC_PollForConversion+0xf2>
    8600:	687b      	ldr	r3, [r7, #4]
    8602:	681b      	ldr	r3, [r3, #0]
    8604:	68d9      	ldr	r1, [r3, #12]
    8606:	4b41      	ldr	r3, [pc, #260]	; (870c <HAL_ADC_PollForConversion+0x1ec>)
    8608:	400b      	ands	r3, r1
    860a:	2b00      	cmp	r3, #0
    860c:	d101      	bne.n	8612 <HAL_ADC_PollForConversion+0xf2>
    860e:	2314      	movs	r3, #20
    8610:	e020      	b.n	8654 <HAL_ADC_PollForConversion+0x134>
    8612:	2329      	movs	r3, #41	; 0x29
    8614:	e01e      	b.n	8654 <HAL_ADC_PollForConversion+0x134>
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	681b      	ldr	r3, [r3, #0]
    861a:	6919      	ldr	r1, [r3, #16]
    861c:	4b3a      	ldr	r3, [pc, #232]	; (8708 <HAL_ADC_PollForConversion+0x1e8>)
    861e:	400b      	ands	r3, r1
    8620:	2b00      	cmp	r3, #0
    8622:	d106      	bne.n	8632 <HAL_ADC_PollForConversion+0x112>
    8624:	687b      	ldr	r3, [r7, #4]
    8626:	681b      	ldr	r3, [r3, #0]
    8628:	68d9      	ldr	r1, [r3, #12]
    862a:	4b38      	ldr	r3, [pc, #224]	; (870c <HAL_ADC_PollForConversion+0x1ec>)
    862c:	400b      	ands	r3, r1
    862e:	2b00      	cmp	r3, #0
    8630:	d00d      	beq.n	864e <HAL_ADC_PollForConversion+0x12e>
    8632:	687b      	ldr	r3, [r7, #4]
    8634:	681b      	ldr	r3, [r3, #0]
    8636:	6919      	ldr	r1, [r3, #16]
    8638:	4b35      	ldr	r3, [pc, #212]	; (8710 <HAL_ADC_PollForConversion+0x1f0>)
    863a:	400b      	ands	r3, r1
    863c:	2b00      	cmp	r3, #0
    863e:	d108      	bne.n	8652 <HAL_ADC_PollForConversion+0x132>
    8640:	687b      	ldr	r3, [r7, #4]
    8642:	681b      	ldr	r3, [r3, #0]
    8644:	68d9      	ldr	r1, [r3, #12]
    8646:	4b32      	ldr	r3, [pc, #200]	; (8710 <HAL_ADC_PollForConversion+0x1f0>)
    8648:	400b      	ands	r3, r1
    864a:	2b00      	cmp	r3, #0
    864c:	d101      	bne.n	8652 <HAL_ADC_PollForConversion+0x132>
    864e:	2354      	movs	r3, #84	; 0x54
    8650:	e000      	b.n	8654 <HAL_ADC_PollForConversion+0x134>
    8652:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
    8654:	fb02 f303 	mul.w	r3, r2, r3
    8658:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
    865a:	e01d      	b.n	8698 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
    865c:	683b      	ldr	r3, [r7, #0]
    865e:	f1b3 3fff 	cmp.w	r3, #4294967295
    8662:	d016      	beq.n	8692 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
    8664:	683b      	ldr	r3, [r7, #0]
    8666:	2b00      	cmp	r3, #0
    8668:	d007      	beq.n	867a <HAL_ADC_PollForConversion+0x15a>
    866a:	f7ff fda7 	bl	81bc <HAL_GetTick>
    866e:	4602      	mov	r2, r0
    8670:	697b      	ldr	r3, [r7, #20]
    8672:	1ad3      	subs	r3, r2, r3
    8674:	683a      	ldr	r2, [r7, #0]
    8676:	429a      	cmp	r2, r3
    8678:	d20b      	bcs.n	8692 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
    867a:	687b      	ldr	r3, [r7, #4]
    867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    867e:	f043 0204 	orr.w	r2, r3, #4
    8682:	687b      	ldr	r3, [r7, #4]
    8684:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
    8686:	687b      	ldr	r3, [r7, #4]
    8688:	2200      	movs	r2, #0
    868a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
    868e:	2303      	movs	r3, #3
    8690:	e030      	b.n	86f4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
    8692:	68fb      	ldr	r3, [r7, #12]
    8694:	3301      	adds	r3, #1
    8696:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
    8698:	68fb      	ldr	r3, [r7, #12]
    869a:	693a      	ldr	r2, [r7, #16]
    869c:	429a      	cmp	r2, r3
    869e:	d8dd      	bhi.n	865c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
    86a0:	687b      	ldr	r3, [r7, #4]
    86a2:	681b      	ldr	r3, [r3, #0]
    86a4:	f06f 0212 	mvn.w	r2, #18
    86a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    86b2:	687b      	ldr	r3, [r7, #4]
    86b4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
    86b6:	687b      	ldr	r3, [r7, #4]
    86b8:	681b      	ldr	r3, [r3, #0]
    86ba:	689b      	ldr	r3, [r3, #8]
    86bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
    86c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
    86c4:	d115      	bne.n	86f2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
    86c6:	687b      	ldr	r3, [r7, #4]
    86c8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
    86ca:	2b00      	cmp	r3, #0
    86cc:	d111      	bne.n	86f2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
    86ce:	687b      	ldr	r3, [r7, #4]
    86d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    86d6:	687b      	ldr	r3, [r7, #4]
    86d8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
    86da:	687b      	ldr	r3, [r7, #4]
    86dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    86e2:	2b00      	cmp	r3, #0
    86e4:	d105      	bne.n	86f2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    86e6:	687b      	ldr	r3, [r7, #4]
    86e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86ea:	f043 0201 	orr.w	r2, r3, #1
    86ee:	687b      	ldr	r3, [r7, #4]
    86f0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
    86f2:	2300      	movs	r3, #0
}
    86f4:	4618      	mov	r0, r3
    86f6:	371c      	adds	r7, #28
    86f8:	46bd      	mov	sp, r7
    86fa:	bd90      	pop	{r4, r7, pc}
    86fc:	000256f0 	.word	0x000256f0
    8700:	24924924 	.word	0x24924924
    8704:	00924924 	.word	0x00924924
    8708:	12492492 	.word	0x12492492
    870c:	00492492 	.word	0x00492492
    8710:	00249249 	.word	0x00249249

00008714 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
    8714:	b480      	push	{r7}
    8716:	b083      	sub	sp, #12
    8718:	af00      	add	r7, sp, #0
    871a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
    871c:	687b      	ldr	r3, [r7, #4]
    871e:	681b      	ldr	r3, [r3, #0]
    8720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
    8722:	4618      	mov	r0, r3
    8724:	370c      	adds	r7, #12
    8726:	46bd      	mov	sp, r7
    8728:	bc80      	pop	{r7}
    872a:	4770      	bx	lr

0000872c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
    872c:	b480      	push	{r7}
    872e:	b085      	sub	sp, #20
    8730:	af00      	add	r7, sp, #0
    8732:	6078      	str	r0, [r7, #4]
    8734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
    8736:	2300      	movs	r3, #0
    8738:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
    873a:	2300      	movs	r3, #0
    873c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
    873e:	687b      	ldr	r3, [r7, #4]
    8740:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    8744:	2b01      	cmp	r3, #1
    8746:	d101      	bne.n	874c <HAL_ADC_ConfigChannel+0x20>
    8748:	2302      	movs	r3, #2
    874a:	e0dc      	b.n	8906 <HAL_ADC_ConfigChannel+0x1da>
    874c:	687b      	ldr	r3, [r7, #4]
    874e:	2201      	movs	r2, #1
    8750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
    8754:	683b      	ldr	r3, [r7, #0]
    8756:	685b      	ldr	r3, [r3, #4]
    8758:	2b06      	cmp	r3, #6
    875a:	d81c      	bhi.n	8796 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
    875c:	687b      	ldr	r3, [r7, #4]
    875e:	681b      	ldr	r3, [r3, #0]
    8760:	6b59      	ldr	r1, [r3, #52]	; 0x34
    8762:	683b      	ldr	r3, [r7, #0]
    8764:	685a      	ldr	r2, [r3, #4]
    8766:	4613      	mov	r3, r2
    8768:	009b      	lsls	r3, r3, #2
    876a:	4413      	add	r3, r2
    876c:	3b05      	subs	r3, #5
    876e:	221f      	movs	r2, #31
    8770:	fa02 f303 	lsl.w	r3, r2, r3
    8774:	43db      	mvns	r3, r3
    8776:	4019      	ands	r1, r3
    8778:	683b      	ldr	r3, [r7, #0]
    877a:	6818      	ldr	r0, [r3, #0]
    877c:	683b      	ldr	r3, [r7, #0]
    877e:	685a      	ldr	r2, [r3, #4]
    8780:	4613      	mov	r3, r2
    8782:	009b      	lsls	r3, r3, #2
    8784:	4413      	add	r3, r2
    8786:	3b05      	subs	r3, #5
    8788:	fa00 f203 	lsl.w	r2, r0, r3
    878c:	687b      	ldr	r3, [r7, #4]
    878e:	681b      	ldr	r3, [r3, #0]
    8790:	430a      	orrs	r2, r1
    8792:	635a      	str	r2, [r3, #52]	; 0x34
    8794:	e03c      	b.n	8810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
    8796:	683b      	ldr	r3, [r7, #0]
    8798:	685b      	ldr	r3, [r3, #4]
    879a:	2b0c      	cmp	r3, #12
    879c:	d81c      	bhi.n	87d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
    879e:	687b      	ldr	r3, [r7, #4]
    87a0:	681b      	ldr	r3, [r3, #0]
    87a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
    87a4:	683b      	ldr	r3, [r7, #0]
    87a6:	685a      	ldr	r2, [r3, #4]
    87a8:	4613      	mov	r3, r2
    87aa:	009b      	lsls	r3, r3, #2
    87ac:	4413      	add	r3, r2
    87ae:	3b23      	subs	r3, #35	; 0x23
    87b0:	221f      	movs	r2, #31
    87b2:	fa02 f303 	lsl.w	r3, r2, r3
    87b6:	43db      	mvns	r3, r3
    87b8:	4019      	ands	r1, r3
    87ba:	683b      	ldr	r3, [r7, #0]
    87bc:	6818      	ldr	r0, [r3, #0]
    87be:	683b      	ldr	r3, [r7, #0]
    87c0:	685a      	ldr	r2, [r3, #4]
    87c2:	4613      	mov	r3, r2
    87c4:	009b      	lsls	r3, r3, #2
    87c6:	4413      	add	r3, r2
    87c8:	3b23      	subs	r3, #35	; 0x23
    87ca:	fa00 f203 	lsl.w	r2, r0, r3
    87ce:	687b      	ldr	r3, [r7, #4]
    87d0:	681b      	ldr	r3, [r3, #0]
    87d2:	430a      	orrs	r2, r1
    87d4:	631a      	str	r2, [r3, #48]	; 0x30
    87d6:	e01b      	b.n	8810 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	681b      	ldr	r3, [r3, #0]
    87dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    87de:	683b      	ldr	r3, [r7, #0]
    87e0:	685a      	ldr	r2, [r3, #4]
    87e2:	4613      	mov	r3, r2
    87e4:	009b      	lsls	r3, r3, #2
    87e6:	4413      	add	r3, r2
    87e8:	3b41      	subs	r3, #65	; 0x41
    87ea:	221f      	movs	r2, #31
    87ec:	fa02 f303 	lsl.w	r3, r2, r3
    87f0:	43db      	mvns	r3, r3
    87f2:	4019      	ands	r1, r3
    87f4:	683b      	ldr	r3, [r7, #0]
    87f6:	6818      	ldr	r0, [r3, #0]
    87f8:	683b      	ldr	r3, [r7, #0]
    87fa:	685a      	ldr	r2, [r3, #4]
    87fc:	4613      	mov	r3, r2
    87fe:	009b      	lsls	r3, r3, #2
    8800:	4413      	add	r3, r2
    8802:	3b41      	subs	r3, #65	; 0x41
    8804:	fa00 f203 	lsl.w	r2, r0, r3
    8808:	687b      	ldr	r3, [r7, #4]
    880a:	681b      	ldr	r3, [r3, #0]
    880c:	430a      	orrs	r2, r1
    880e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
    8810:	683b      	ldr	r3, [r7, #0]
    8812:	681b      	ldr	r3, [r3, #0]
    8814:	2b09      	cmp	r3, #9
    8816:	d91c      	bls.n	8852 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
    8818:	687b      	ldr	r3, [r7, #4]
    881a:	681b      	ldr	r3, [r3, #0]
    881c:	68d9      	ldr	r1, [r3, #12]
    881e:	683b      	ldr	r3, [r7, #0]
    8820:	681a      	ldr	r2, [r3, #0]
    8822:	4613      	mov	r3, r2
    8824:	005b      	lsls	r3, r3, #1
    8826:	4413      	add	r3, r2
    8828:	3b1e      	subs	r3, #30
    882a:	2207      	movs	r2, #7
    882c:	fa02 f303 	lsl.w	r3, r2, r3
    8830:	43db      	mvns	r3, r3
    8832:	4019      	ands	r1, r3
    8834:	683b      	ldr	r3, [r7, #0]
    8836:	6898      	ldr	r0, [r3, #8]
    8838:	683b      	ldr	r3, [r7, #0]
    883a:	681a      	ldr	r2, [r3, #0]
    883c:	4613      	mov	r3, r2
    883e:	005b      	lsls	r3, r3, #1
    8840:	4413      	add	r3, r2
    8842:	3b1e      	subs	r3, #30
    8844:	fa00 f203 	lsl.w	r2, r0, r3
    8848:	687b      	ldr	r3, [r7, #4]
    884a:	681b      	ldr	r3, [r3, #0]
    884c:	430a      	orrs	r2, r1
    884e:	60da      	str	r2, [r3, #12]
    8850:	e019      	b.n	8886 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
    8852:	687b      	ldr	r3, [r7, #4]
    8854:	681b      	ldr	r3, [r3, #0]
    8856:	6919      	ldr	r1, [r3, #16]
    8858:	683b      	ldr	r3, [r7, #0]
    885a:	681a      	ldr	r2, [r3, #0]
    885c:	4613      	mov	r3, r2
    885e:	005b      	lsls	r3, r3, #1
    8860:	4413      	add	r3, r2
    8862:	2207      	movs	r2, #7
    8864:	fa02 f303 	lsl.w	r3, r2, r3
    8868:	43db      	mvns	r3, r3
    886a:	4019      	ands	r1, r3
    886c:	683b      	ldr	r3, [r7, #0]
    886e:	6898      	ldr	r0, [r3, #8]
    8870:	683b      	ldr	r3, [r7, #0]
    8872:	681a      	ldr	r2, [r3, #0]
    8874:	4613      	mov	r3, r2
    8876:	005b      	lsls	r3, r3, #1
    8878:	4413      	add	r3, r2
    887a:	fa00 f203 	lsl.w	r2, r0, r3
    887e:	687b      	ldr	r3, [r7, #4]
    8880:	681b      	ldr	r3, [r3, #0]
    8882:	430a      	orrs	r2, r1
    8884:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
    8886:	683b      	ldr	r3, [r7, #0]
    8888:	681b      	ldr	r3, [r3, #0]
    888a:	2b10      	cmp	r3, #16
    888c:	d003      	beq.n	8896 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
    888e:	683b      	ldr	r3, [r7, #0]
    8890:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
    8892:	2b11      	cmp	r3, #17
    8894:	d132      	bne.n	88fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    8896:	687b      	ldr	r3, [r7, #4]
    8898:	681b      	ldr	r3, [r3, #0]
    889a:	4a1d      	ldr	r2, [pc, #116]	; (8910 <HAL_ADC_ConfigChannel+0x1e4>)
    889c:	4293      	cmp	r3, r2
    889e:	d125      	bne.n	88ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
    88a0:	687b      	ldr	r3, [r7, #4]
    88a2:	681b      	ldr	r3, [r3, #0]
    88a4:	689b      	ldr	r3, [r3, #8]
    88a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    88aa:	2b00      	cmp	r3, #0
    88ac:	d126      	bne.n	88fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
    88ae:	687b      	ldr	r3, [r7, #4]
    88b0:	681b      	ldr	r3, [r3, #0]
    88b2:	689a      	ldr	r2, [r3, #8]
    88b4:	687b      	ldr	r3, [r7, #4]
    88b6:	681b      	ldr	r3, [r3, #0]
    88b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
    88bc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
    88be:	683b      	ldr	r3, [r7, #0]
    88c0:	681b      	ldr	r3, [r3, #0]
    88c2:	2b10      	cmp	r3, #16
    88c4:	d11a      	bne.n	88fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
    88c6:	4b13      	ldr	r3, [pc, #76]	; (8914 <HAL_ADC_ConfigChannel+0x1e8>)
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	4a13      	ldr	r2, [pc, #76]	; (8918 <HAL_ADC_ConfigChannel+0x1ec>)
    88cc:	fba2 2303 	umull	r2, r3, r2, r3
    88d0:	0c9a      	lsrs	r2, r3, #18
    88d2:	4613      	mov	r3, r2
    88d4:	009b      	lsls	r3, r3, #2
    88d6:	4413      	add	r3, r2
    88d8:	005b      	lsls	r3, r3, #1
    88da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
    88dc:	e002      	b.n	88e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
    88de:	68bb      	ldr	r3, [r7, #8]
    88e0:	3b01      	subs	r3, #1
    88e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
    88e4:	68bb      	ldr	r3, [r7, #8]
    88e6:	2b00      	cmp	r3, #0
    88e8:	d1f9      	bne.n	88de <HAL_ADC_ConfigChannel+0x1b2>
    88ea:	e007      	b.n	88fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    88ec:	687b      	ldr	r3, [r7, #4]
    88ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88f0:	f043 0220 	orr.w	r2, r3, #32
    88f4:	687b      	ldr	r3, [r7, #4]
    88f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
    88f8:	2301      	movs	r3, #1
    88fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
    88fc:	687b      	ldr	r3, [r7, #4]
    88fe:	2200      	movs	r2, #0
    8900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
    8904:	7bfb      	ldrb	r3, [r7, #15]
}
    8906:	4618      	mov	r0, r3
    8908:	3714      	adds	r7, #20
    890a:	46bd      	mov	sp, r7
    890c:	bc80      	pop	{r7}
    890e:	4770      	bx	lr
    8910:	40012400 	.word	0x40012400
    8914:	000256f0 	.word	0x000256f0
    8918:	431bde83 	.word	0x431bde83

0000891c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
    891c:	b580      	push	{r7, lr}
    891e:	b084      	sub	sp, #16
    8920:	af00      	add	r7, sp, #0
    8922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
    8924:	2300      	movs	r3, #0
    8926:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
    8928:	2300      	movs	r3, #0
    892a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
    892c:	687b      	ldr	r3, [r7, #4]
    892e:	681b      	ldr	r3, [r3, #0]
    8930:	689b      	ldr	r3, [r3, #8]
    8932:	f003 0301 	and.w	r3, r3, #1
    8936:	2b01      	cmp	r3, #1
    8938:	d039      	beq.n	89ae <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    893a:	687b      	ldr	r3, [r7, #4]
    893c:	681b      	ldr	r3, [r3, #0]
    893e:	689a      	ldr	r2, [r3, #8]
    8940:	687b      	ldr	r3, [r7, #4]
    8942:	681b      	ldr	r3, [r3, #0]
    8944:	f042 0201 	orr.w	r2, r2, #1
    8948:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
    894a:	4b1b      	ldr	r3, [pc, #108]	; (89b8 <ADC_Enable+0x9c>)
    894c:	681b      	ldr	r3, [r3, #0]
    894e:	4a1b      	ldr	r2, [pc, #108]	; (89bc <ADC_Enable+0xa0>)
    8950:	fba2 2303 	umull	r2, r3, r2, r3
    8954:	0c9b      	lsrs	r3, r3, #18
    8956:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
    8958:	e002      	b.n	8960 <ADC_Enable+0x44>
    {
      wait_loop_index--;
    895a:	68bb      	ldr	r3, [r7, #8]
    895c:	3b01      	subs	r3, #1
    895e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
    8960:	68bb      	ldr	r3, [r7, #8]
    8962:	2b00      	cmp	r3, #0
    8964:	d1f9      	bne.n	895a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
    8966:	f7ff fc29 	bl	81bc <HAL_GetTick>
    896a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
    896c:	e018      	b.n	89a0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
    896e:	f7ff fc25 	bl	81bc <HAL_GetTick>
    8972:	4602      	mov	r2, r0
    8974:	68fb      	ldr	r3, [r7, #12]
    8976:	1ad3      	subs	r3, r2, r3
    8978:	2b02      	cmp	r3, #2
    897a:	d911      	bls.n	89a0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
    897c:	687b      	ldr	r3, [r7, #4]
    897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8980:	f043 0210 	orr.w	r2, r3, #16
    8984:	687b      	ldr	r3, [r7, #4]
    8986:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
    8988:	687b      	ldr	r3, [r7, #4]
    898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    898c:	f043 0201 	orr.w	r2, r3, #1
    8990:	687b      	ldr	r3, [r7, #4]
    8992:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
    8994:	687b      	ldr	r3, [r7, #4]
    8996:	2200      	movs	r2, #0
    8998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
    899c:	2301      	movs	r3, #1
    899e:	e007      	b.n	89b0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
    89a0:	687b      	ldr	r3, [r7, #4]
    89a2:	681b      	ldr	r3, [r3, #0]
    89a4:	689b      	ldr	r3, [r3, #8]
    89a6:	f003 0301 	and.w	r3, r3, #1
    89aa:	2b01      	cmp	r3, #1
    89ac:	d1df      	bne.n	896e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
    89ae:	2300      	movs	r3, #0
}
    89b0:	4618      	mov	r0, r3
    89b2:	3710      	adds	r7, #16
    89b4:	46bd      	mov	sp, r7
    89b6:	bd80      	pop	{r7, pc}
    89b8:	000256f0 	.word	0x000256f0
    89bc:	431bde83 	.word	0x431bde83

000089c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
    89c0:	b580      	push	{r7, lr}
    89c2:	b084      	sub	sp, #16
    89c4:	af00      	add	r7, sp, #0
    89c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
    89c8:	2300      	movs	r3, #0
    89ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
    89cc:	687b      	ldr	r3, [r7, #4]
    89ce:	681b      	ldr	r3, [r3, #0]
    89d0:	689b      	ldr	r3, [r3, #8]
    89d2:	f003 0301 	and.w	r3, r3, #1
    89d6:	2b01      	cmp	r3, #1
    89d8:	d127      	bne.n	8a2a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
    89da:	687b      	ldr	r3, [r7, #4]
    89dc:	681b      	ldr	r3, [r3, #0]
    89de:	689a      	ldr	r2, [r3, #8]
    89e0:	687b      	ldr	r3, [r7, #4]
    89e2:	681b      	ldr	r3, [r3, #0]
    89e4:	f022 0201 	bic.w	r2, r2, #1
    89e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
    89ea:	f7ff fbe7 	bl	81bc <HAL_GetTick>
    89ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
    89f0:	e014      	b.n	8a1c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
    89f2:	f7ff fbe3 	bl	81bc <HAL_GetTick>
    89f6:	4602      	mov	r2, r0
    89f8:	68fb      	ldr	r3, [r7, #12]
    89fa:	1ad3      	subs	r3, r2, r3
    89fc:	2b02      	cmp	r3, #2
    89fe:	d90d      	bls.n	8a1c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
    8a00:	687b      	ldr	r3, [r7, #4]
    8a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a04:	f043 0210 	orr.w	r2, r3, #16
    8a08:	687b      	ldr	r3, [r7, #4]
    8a0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
    8a0c:	687b      	ldr	r3, [r7, #4]
    8a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8a10:	f043 0201 	orr.w	r2, r3, #1
    8a14:	687b      	ldr	r3, [r7, #4]
    8a16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
    8a18:	2301      	movs	r3, #1
    8a1a:	e007      	b.n	8a2c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
    8a1c:	687b      	ldr	r3, [r7, #4]
    8a1e:	681b      	ldr	r3, [r3, #0]
    8a20:	689b      	ldr	r3, [r3, #8]
    8a22:	f003 0301 	and.w	r3, r3, #1
    8a26:	2b01      	cmp	r3, #1
    8a28:	d0e3      	beq.n	89f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
    8a2a:	2300      	movs	r3, #0
}
    8a2c:	4618      	mov	r0, r3
    8a2e:	3710      	adds	r7, #16
    8a30:	46bd      	mov	sp, r7
    8a32:	bd80      	pop	{r7, pc}

00008a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    8a34:	b480      	push	{r7}
    8a36:	b085      	sub	sp, #20
    8a38:	af00      	add	r7, sp, #0
    8a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
    8a3c:	687b      	ldr	r3, [r7, #4]
    8a3e:	f003 0307 	and.w	r3, r3, #7
    8a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
    8a44:	4b0c      	ldr	r3, [pc, #48]	; (8a78 <__NVIC_SetPriorityGrouping+0x44>)
    8a46:	68db      	ldr	r3, [r3, #12]
    8a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
    8a4a:	68ba      	ldr	r2, [r7, #8]
    8a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
    8a50:	4013      	ands	r3, r2
    8a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
    8a54:	68fb      	ldr	r3, [r7, #12]
    8a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    8a58:	68bb      	ldr	r3, [r7, #8]
    8a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
    8a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    8a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
    8a66:	4a04      	ldr	r2, [pc, #16]	; (8a78 <__NVIC_SetPriorityGrouping+0x44>)
    8a68:	68bb      	ldr	r3, [r7, #8]
    8a6a:	60d3      	str	r3, [r2, #12]
}
    8a6c:	bf00      	nop
    8a6e:	3714      	adds	r7, #20
    8a70:	46bd      	mov	sp, r7
    8a72:	bc80      	pop	{r7}
    8a74:	4770      	bx	lr
    8a76:	bf00      	nop
    8a78:	e000ed00 	.word	0xe000ed00

00008a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
    8a7c:	b480      	push	{r7}
    8a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
    8a80:	4b04      	ldr	r3, [pc, #16]	; (8a94 <__NVIC_GetPriorityGrouping+0x18>)
    8a82:	68db      	ldr	r3, [r3, #12]
    8a84:	0a1b      	lsrs	r3, r3, #8
    8a86:	f003 0307 	and.w	r3, r3, #7
}
    8a8a:	4618      	mov	r0, r3
    8a8c:	46bd      	mov	sp, r7
    8a8e:	bc80      	pop	{r7}
    8a90:	4770      	bx	lr
    8a92:	bf00      	nop
    8a94:	e000ed00 	.word	0xe000ed00

00008a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    8a98:	b480      	push	{r7}
    8a9a:	b083      	sub	sp, #12
    8a9c:	af00      	add	r7, sp, #0
    8a9e:	4603      	mov	r3, r0
    8aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    8aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	db0b      	blt.n	8ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8aaa:	79fb      	ldrb	r3, [r7, #7]
    8aac:	f003 021f 	and.w	r2, r3, #31
    8ab0:	4906      	ldr	r1, [pc, #24]	; (8acc <__NVIC_EnableIRQ+0x34>)
    8ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8ab6:	095b      	lsrs	r3, r3, #5
    8ab8:	2001      	movs	r0, #1
    8aba:	fa00 f202 	lsl.w	r2, r0, r2
    8abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    8ac2:	bf00      	nop
    8ac4:	370c      	adds	r7, #12
    8ac6:	46bd      	mov	sp, r7
    8ac8:	bc80      	pop	{r7}
    8aca:	4770      	bx	lr
    8acc:	e000e100 	.word	0xe000e100

00008ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    8ad0:	b480      	push	{r7}
    8ad2:	b083      	sub	sp, #12
    8ad4:	af00      	add	r7, sp, #0
    8ad6:	4603      	mov	r3, r0
    8ad8:	6039      	str	r1, [r7, #0]
    8ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    8adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	db0a      	blt.n	8afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8ae4:	683b      	ldr	r3, [r7, #0]
    8ae6:	b2da      	uxtb	r2, r3
    8ae8:	490c      	ldr	r1, [pc, #48]	; (8b1c <__NVIC_SetPriority+0x4c>)
    8aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8aee:	0112      	lsls	r2, r2, #4
    8af0:	b2d2      	uxtb	r2, r2
    8af2:	440b      	add	r3, r1
    8af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    8af8:	e00a      	b.n	8b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8afa:	683b      	ldr	r3, [r7, #0]
    8afc:	b2da      	uxtb	r2, r3
    8afe:	4908      	ldr	r1, [pc, #32]	; (8b20 <__NVIC_SetPriority+0x50>)
    8b00:	79fb      	ldrb	r3, [r7, #7]
    8b02:	f003 030f 	and.w	r3, r3, #15
    8b06:	3b04      	subs	r3, #4
    8b08:	0112      	lsls	r2, r2, #4
    8b0a:	b2d2      	uxtb	r2, r2
    8b0c:	440b      	add	r3, r1
    8b0e:	761a      	strb	r2, [r3, #24]
}
    8b10:	bf00      	nop
    8b12:	370c      	adds	r7, #12
    8b14:	46bd      	mov	sp, r7
    8b16:	bc80      	pop	{r7}
    8b18:	4770      	bx	lr
    8b1a:	bf00      	nop
    8b1c:	e000e100 	.word	0xe000e100
    8b20:	e000ed00 	.word	0xe000ed00

00008b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
    8b24:	b480      	push	{r7}
    8b26:	b089      	sub	sp, #36	; 0x24
    8b28:	af00      	add	r7, sp, #0
    8b2a:	60f8      	str	r0, [r7, #12]
    8b2c:	60b9      	str	r1, [r7, #8]
    8b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
    8b30:	68fb      	ldr	r3, [r7, #12]
    8b32:	f003 0307 	and.w	r3, r3, #7
    8b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
    8b38:	69fb      	ldr	r3, [r7, #28]
    8b3a:	f1c3 0307 	rsb	r3, r3, #7
    8b3e:	2b04      	cmp	r3, #4
    8b40:	bf28      	it	cs
    8b42:	2304      	movcs	r3, #4
    8b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
    8b46:	69fb      	ldr	r3, [r7, #28]
    8b48:	3304      	adds	r3, #4
    8b4a:	2b06      	cmp	r3, #6
    8b4c:	d902      	bls.n	8b54 <NVIC_EncodePriority+0x30>
    8b4e:	69fb      	ldr	r3, [r7, #28]
    8b50:	3b03      	subs	r3, #3
    8b52:	e000      	b.n	8b56 <NVIC_EncodePriority+0x32>
    8b54:	2300      	movs	r3, #0
    8b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    8b58:	f04f 32ff 	mov.w	r2, #4294967295
    8b5c:	69bb      	ldr	r3, [r7, #24]
    8b5e:	fa02 f303 	lsl.w	r3, r2, r3
    8b62:	43da      	mvns	r2, r3
    8b64:	68bb      	ldr	r3, [r7, #8]
    8b66:	401a      	ands	r2, r3
    8b68:	697b      	ldr	r3, [r7, #20]
    8b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
    8b6c:	f04f 31ff 	mov.w	r1, #4294967295
    8b70:	697b      	ldr	r3, [r7, #20]
    8b72:	fa01 f303 	lsl.w	r3, r1, r3
    8b76:	43d9      	mvns	r1, r3
    8b78:	687b      	ldr	r3, [r7, #4]
    8b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    8b7c:	4313      	orrs	r3, r2
         );
}
    8b7e:	4618      	mov	r0, r3
    8b80:	3724      	adds	r7, #36	; 0x24
    8b82:	46bd      	mov	sp, r7
    8b84:	bc80      	pop	{r7}
    8b86:	4770      	bx	lr

00008b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    8b88:	b580      	push	{r7, lr}
    8b8a:	b082      	sub	sp, #8
    8b8c:	af00      	add	r7, sp, #0
    8b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	3b01      	subs	r3, #1
    8b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    8b98:	d301      	bcc.n	8b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
    8b9a:	2301      	movs	r3, #1
    8b9c:	e00f      	b.n	8bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    8b9e:	4a0a      	ldr	r2, [pc, #40]	; (8bc8 <SysTick_Config+0x40>)
    8ba0:	687b      	ldr	r3, [r7, #4]
    8ba2:	3b01      	subs	r3, #1
    8ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    8ba6:	210f      	movs	r1, #15
    8ba8:	f04f 30ff 	mov.w	r0, #4294967295
    8bac:	f7ff ff90 	bl	8ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    8bb0:	4b05      	ldr	r3, [pc, #20]	; (8bc8 <SysTick_Config+0x40>)
    8bb2:	2200      	movs	r2, #0
    8bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    8bb6:	4b04      	ldr	r3, [pc, #16]	; (8bc8 <SysTick_Config+0x40>)
    8bb8:	2207      	movs	r2, #7
    8bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    8bbc:	2300      	movs	r3, #0
}
    8bbe:	4618      	mov	r0, r3
    8bc0:	3708      	adds	r7, #8
    8bc2:	46bd      	mov	sp, r7
    8bc4:	bd80      	pop	{r7, pc}
    8bc6:	bf00      	nop
    8bc8:	e000e010 	.word	0xe000e010

00008bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    8bcc:	b580      	push	{r7, lr}
    8bce:	b082      	sub	sp, #8
    8bd0:	af00      	add	r7, sp, #0
    8bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
    8bd4:	6878      	ldr	r0, [r7, #4]
    8bd6:	f7ff ff2d 	bl	8a34 <__NVIC_SetPriorityGrouping>
}
    8bda:	bf00      	nop
    8bdc:	3708      	adds	r7, #8
    8bde:	46bd      	mov	sp, r7
    8be0:	bd80      	pop	{r7, pc}

00008be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
    8be2:	b580      	push	{r7, lr}
    8be4:	b086      	sub	sp, #24
    8be6:	af00      	add	r7, sp, #0
    8be8:	4603      	mov	r3, r0
    8bea:	60b9      	str	r1, [r7, #8]
    8bec:	607a      	str	r2, [r7, #4]
    8bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
    8bf0:	2300      	movs	r3, #0
    8bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
    8bf4:	f7ff ff42 	bl	8a7c <__NVIC_GetPriorityGrouping>
    8bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
    8bfa:	687a      	ldr	r2, [r7, #4]
    8bfc:	68b9      	ldr	r1, [r7, #8]
    8bfe:	6978      	ldr	r0, [r7, #20]
    8c00:	f7ff ff90 	bl	8b24 <NVIC_EncodePriority>
    8c04:	4602      	mov	r2, r0
    8c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8c0a:	4611      	mov	r1, r2
    8c0c:	4618      	mov	r0, r3
    8c0e:	f7ff ff5f 	bl	8ad0 <__NVIC_SetPriority>
}
    8c12:	bf00      	nop
    8c14:	3718      	adds	r7, #24
    8c16:	46bd      	mov	sp, r7
    8c18:	bd80      	pop	{r7, pc}

00008c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
    8c1a:	b580      	push	{r7, lr}
    8c1c:	b082      	sub	sp, #8
    8c1e:	af00      	add	r7, sp, #0
    8c20:	4603      	mov	r3, r0
    8c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
    8c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8c28:	4618      	mov	r0, r3
    8c2a:	f7ff ff35 	bl	8a98 <__NVIC_EnableIRQ>
}
    8c2e:	bf00      	nop
    8c30:	3708      	adds	r7, #8
    8c32:	46bd      	mov	sp, r7
    8c34:	bd80      	pop	{r7, pc}

00008c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
    8c36:	b580      	push	{r7, lr}
    8c38:	b082      	sub	sp, #8
    8c3a:	af00      	add	r7, sp, #0
    8c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
    8c3e:	6878      	ldr	r0, [r7, #4]
    8c40:	f7ff ffa2 	bl	8b88 <SysTick_Config>
    8c44:	4603      	mov	r3, r0
}
    8c46:	4618      	mov	r0, r3
    8c48:	3708      	adds	r7, #8
    8c4a:	46bd      	mov	sp, r7
    8c4c:	bd80      	pop	{r7, pc}

00008c4e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
    8c4e:	b580      	push	{r7, lr}
    8c50:	b082      	sub	sp, #8
    8c52:	af00      	add	r7, sp, #0
    8c54:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	2b00      	cmp	r3, #0
    8c5a:	d101      	bne.n	8c60 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
    8c5c:	2301      	movs	r3, #1
    8c5e:	e00e      	b.n	8c7e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
    8c60:	687b      	ldr	r3, [r7, #4]
    8c62:	795b      	ldrb	r3, [r3, #5]
    8c64:	b2db      	uxtb	r3, r3
    8c66:	2b00      	cmp	r3, #0
    8c68:	d105      	bne.n	8c76 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
    8c6a:	687b      	ldr	r3, [r7, #4]
    8c6c:	2200      	movs	r2, #0
    8c6e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
    8c70:	6878      	ldr	r0, [r7, #4]
    8c72:	f004 fdd3 	bl	d81c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
    8c76:	687b      	ldr	r3, [r7, #4]
    8c78:	2201      	movs	r2, #1
    8c7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
    8c7c:	2300      	movs	r3, #0
}
    8c7e:	4618      	mov	r0, r3
    8c80:	3708      	adds	r7, #8
    8c82:	46bd      	mov	sp, r7
    8c84:	bd80      	pop	{r7, pc}
	...

00008c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
    8c88:	b480      	push	{r7}
    8c8a:	b08b      	sub	sp, #44	; 0x2c
    8c8c:	af00      	add	r7, sp, #0
    8c8e:	6078      	str	r0, [r7, #4]
    8c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
    8c92:	2300      	movs	r3, #0
    8c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
    8c96:	2300      	movs	r3, #0
    8c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
    8c9a:	e127      	b.n	8eec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
    8c9c:	2201      	movs	r2, #1
    8c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ca0:	fa02 f303 	lsl.w	r3, r2, r3
    8ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
    8ca6:	683b      	ldr	r3, [r7, #0]
    8ca8:	681b      	ldr	r3, [r3, #0]
    8caa:	69fa      	ldr	r2, [r7, #28]
    8cac:	4013      	ands	r3, r2
    8cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
    8cb0:	69ba      	ldr	r2, [r7, #24]
    8cb2:	69fb      	ldr	r3, [r7, #28]
    8cb4:	429a      	cmp	r2, r3
    8cb6:	f040 8116 	bne.w	8ee6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
    8cba:	683b      	ldr	r3, [r7, #0]
    8cbc:	685b      	ldr	r3, [r3, #4]
    8cbe:	2b12      	cmp	r3, #18
    8cc0:	d034      	beq.n	8d2c <HAL_GPIO_Init+0xa4>
    8cc2:	2b12      	cmp	r3, #18
    8cc4:	d80d      	bhi.n	8ce2 <HAL_GPIO_Init+0x5a>
    8cc6:	2b02      	cmp	r3, #2
    8cc8:	d02b      	beq.n	8d22 <HAL_GPIO_Init+0x9a>
    8cca:	2b02      	cmp	r3, #2
    8ccc:	d804      	bhi.n	8cd8 <HAL_GPIO_Init+0x50>
    8cce:	2b00      	cmp	r3, #0
    8cd0:	d031      	beq.n	8d36 <HAL_GPIO_Init+0xae>
    8cd2:	2b01      	cmp	r3, #1
    8cd4:	d01c      	beq.n	8d10 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
    8cd6:	e048      	b.n	8d6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
    8cd8:	2b03      	cmp	r3, #3
    8cda:	d043      	beq.n	8d64 <HAL_GPIO_Init+0xdc>
    8cdc:	2b11      	cmp	r3, #17
    8cde:	d01b      	beq.n	8d18 <HAL_GPIO_Init+0x90>
          break;
    8ce0:	e043      	b.n	8d6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
    8ce2:	4a89      	ldr	r2, [pc, #548]	; (8f08 <HAL_GPIO_Init+0x280>)
    8ce4:	4293      	cmp	r3, r2
    8ce6:	d026      	beq.n	8d36 <HAL_GPIO_Init+0xae>
    8ce8:	4a87      	ldr	r2, [pc, #540]	; (8f08 <HAL_GPIO_Init+0x280>)
    8cea:	4293      	cmp	r3, r2
    8cec:	d806      	bhi.n	8cfc <HAL_GPIO_Init+0x74>
    8cee:	4a87      	ldr	r2, [pc, #540]	; (8f0c <HAL_GPIO_Init+0x284>)
    8cf0:	4293      	cmp	r3, r2
    8cf2:	d020      	beq.n	8d36 <HAL_GPIO_Init+0xae>
    8cf4:	4a86      	ldr	r2, [pc, #536]	; (8f10 <HAL_GPIO_Init+0x288>)
    8cf6:	4293      	cmp	r3, r2
    8cf8:	d01d      	beq.n	8d36 <HAL_GPIO_Init+0xae>
          break;
    8cfa:	e036      	b.n	8d6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
    8cfc:	4a85      	ldr	r2, [pc, #532]	; (8f14 <HAL_GPIO_Init+0x28c>)
    8cfe:	4293      	cmp	r3, r2
    8d00:	d019      	beq.n	8d36 <HAL_GPIO_Init+0xae>
    8d02:	4a85      	ldr	r2, [pc, #532]	; (8f18 <HAL_GPIO_Init+0x290>)
    8d04:	4293      	cmp	r3, r2
    8d06:	d016      	beq.n	8d36 <HAL_GPIO_Init+0xae>
    8d08:	4a84      	ldr	r2, [pc, #528]	; (8f1c <HAL_GPIO_Init+0x294>)
    8d0a:	4293      	cmp	r3, r2
    8d0c:	d013      	beq.n	8d36 <HAL_GPIO_Init+0xae>
          break;
    8d0e:	e02c      	b.n	8d6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
    8d10:	683b      	ldr	r3, [r7, #0]
    8d12:	68db      	ldr	r3, [r3, #12]
    8d14:	623b      	str	r3, [r7, #32]
          break;
    8d16:	e028      	b.n	8d6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
    8d18:	683b      	ldr	r3, [r7, #0]
    8d1a:	68db      	ldr	r3, [r3, #12]
    8d1c:	3304      	adds	r3, #4
    8d1e:	623b      	str	r3, [r7, #32]
          break;
    8d20:	e023      	b.n	8d6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
    8d22:	683b      	ldr	r3, [r7, #0]
    8d24:	68db      	ldr	r3, [r3, #12]
    8d26:	3308      	adds	r3, #8
    8d28:	623b      	str	r3, [r7, #32]
          break;
    8d2a:	e01e      	b.n	8d6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
    8d2c:	683b      	ldr	r3, [r7, #0]
    8d2e:	68db      	ldr	r3, [r3, #12]
    8d30:	330c      	adds	r3, #12
    8d32:	623b      	str	r3, [r7, #32]
          break;
    8d34:	e019      	b.n	8d6a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
    8d36:	683b      	ldr	r3, [r7, #0]
    8d38:	689b      	ldr	r3, [r3, #8]
    8d3a:	2b00      	cmp	r3, #0
    8d3c:	d102      	bne.n	8d44 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
    8d3e:	2304      	movs	r3, #4
    8d40:	623b      	str	r3, [r7, #32]
          break;
    8d42:	e012      	b.n	8d6a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
    8d44:	683b      	ldr	r3, [r7, #0]
    8d46:	689b      	ldr	r3, [r3, #8]
    8d48:	2b01      	cmp	r3, #1
    8d4a:	d105      	bne.n	8d58 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
    8d4c:	2308      	movs	r3, #8
    8d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
    8d50:	687b      	ldr	r3, [r7, #4]
    8d52:	69fa      	ldr	r2, [r7, #28]
    8d54:	611a      	str	r2, [r3, #16]
          break;
    8d56:	e008      	b.n	8d6a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
    8d58:	2308      	movs	r3, #8
    8d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
    8d5c:	687b      	ldr	r3, [r7, #4]
    8d5e:	69fa      	ldr	r2, [r7, #28]
    8d60:	615a      	str	r2, [r3, #20]
          break;
    8d62:	e002      	b.n	8d6a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
    8d64:	2300      	movs	r3, #0
    8d66:	623b      	str	r3, [r7, #32]
          break;
    8d68:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
    8d6a:	69bb      	ldr	r3, [r7, #24]
    8d6c:	2bff      	cmp	r3, #255	; 0xff
    8d6e:	d801      	bhi.n	8d74 <HAL_GPIO_Init+0xec>
    8d70:	687b      	ldr	r3, [r7, #4]
    8d72:	e001      	b.n	8d78 <HAL_GPIO_Init+0xf0>
    8d74:	687b      	ldr	r3, [r7, #4]
    8d76:	3304      	adds	r3, #4
    8d78:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
    8d7a:	69bb      	ldr	r3, [r7, #24]
    8d7c:	2bff      	cmp	r3, #255	; 0xff
    8d7e:	d802      	bhi.n	8d86 <HAL_GPIO_Init+0xfe>
    8d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d82:	009b      	lsls	r3, r3, #2
    8d84:	e002      	b.n	8d8c <HAL_GPIO_Init+0x104>
    8d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d88:	3b08      	subs	r3, #8
    8d8a:	009b      	lsls	r3, r3, #2
    8d8c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
    8d8e:	697b      	ldr	r3, [r7, #20]
    8d90:	681a      	ldr	r2, [r3, #0]
    8d92:	210f      	movs	r1, #15
    8d94:	693b      	ldr	r3, [r7, #16]
    8d96:	fa01 f303 	lsl.w	r3, r1, r3
    8d9a:	43db      	mvns	r3, r3
    8d9c:	401a      	ands	r2, r3
    8d9e:	6a39      	ldr	r1, [r7, #32]
    8da0:	693b      	ldr	r3, [r7, #16]
    8da2:	fa01 f303 	lsl.w	r3, r1, r3
    8da6:	431a      	orrs	r2, r3
    8da8:	697b      	ldr	r3, [r7, #20]
    8daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
    8dac:	683b      	ldr	r3, [r7, #0]
    8dae:	685b      	ldr	r3, [r3, #4]
    8db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    8db4:	2b00      	cmp	r3, #0
    8db6:	f000 8096 	beq.w	8ee6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
    8dba:	4b59      	ldr	r3, [pc, #356]	; (8f20 <HAL_GPIO_Init+0x298>)
    8dbc:	699b      	ldr	r3, [r3, #24]
    8dbe:	4a58      	ldr	r2, [pc, #352]	; (8f20 <HAL_GPIO_Init+0x298>)
    8dc0:	f043 0301 	orr.w	r3, r3, #1
    8dc4:	6193      	str	r3, [r2, #24]
    8dc6:	4b56      	ldr	r3, [pc, #344]	; (8f20 <HAL_GPIO_Init+0x298>)
    8dc8:	699b      	ldr	r3, [r3, #24]
    8dca:	f003 0301 	and.w	r3, r3, #1
    8dce:	60bb      	str	r3, [r7, #8]
    8dd0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
    8dd2:	4a54      	ldr	r2, [pc, #336]	; (8f24 <HAL_GPIO_Init+0x29c>)
    8dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8dd6:	089b      	lsrs	r3, r3, #2
    8dd8:	3302      	adds	r3, #2
    8dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dde:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
    8de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8de2:	f003 0303 	and.w	r3, r3, #3
    8de6:	009b      	lsls	r3, r3, #2
    8de8:	220f      	movs	r2, #15
    8dea:	fa02 f303 	lsl.w	r3, r2, r3
    8dee:	43db      	mvns	r3, r3
    8df0:	68fa      	ldr	r2, [r7, #12]
    8df2:	4013      	ands	r3, r2
    8df4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	4a4b      	ldr	r2, [pc, #300]	; (8f28 <HAL_GPIO_Init+0x2a0>)
    8dfa:	4293      	cmp	r3, r2
    8dfc:	d013      	beq.n	8e26 <HAL_GPIO_Init+0x19e>
    8dfe:	687b      	ldr	r3, [r7, #4]
    8e00:	4a4a      	ldr	r2, [pc, #296]	; (8f2c <HAL_GPIO_Init+0x2a4>)
    8e02:	4293      	cmp	r3, r2
    8e04:	d00d      	beq.n	8e22 <HAL_GPIO_Init+0x19a>
    8e06:	687b      	ldr	r3, [r7, #4]
    8e08:	4a49      	ldr	r2, [pc, #292]	; (8f30 <HAL_GPIO_Init+0x2a8>)
    8e0a:	4293      	cmp	r3, r2
    8e0c:	d007      	beq.n	8e1e <HAL_GPIO_Init+0x196>
    8e0e:	687b      	ldr	r3, [r7, #4]
    8e10:	4a48      	ldr	r2, [pc, #288]	; (8f34 <HAL_GPIO_Init+0x2ac>)
    8e12:	4293      	cmp	r3, r2
    8e14:	d101      	bne.n	8e1a <HAL_GPIO_Init+0x192>
    8e16:	2303      	movs	r3, #3
    8e18:	e006      	b.n	8e28 <HAL_GPIO_Init+0x1a0>
    8e1a:	2304      	movs	r3, #4
    8e1c:	e004      	b.n	8e28 <HAL_GPIO_Init+0x1a0>
    8e1e:	2302      	movs	r3, #2
    8e20:	e002      	b.n	8e28 <HAL_GPIO_Init+0x1a0>
    8e22:	2301      	movs	r3, #1
    8e24:	e000      	b.n	8e28 <HAL_GPIO_Init+0x1a0>
    8e26:	2300      	movs	r3, #0
    8e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8e2a:	f002 0203 	and.w	r2, r2, #3
    8e2e:	0092      	lsls	r2, r2, #2
    8e30:	4093      	lsls	r3, r2
    8e32:	68fa      	ldr	r2, [r7, #12]
    8e34:	4313      	orrs	r3, r2
    8e36:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
    8e38:	493a      	ldr	r1, [pc, #232]	; (8f24 <HAL_GPIO_Init+0x29c>)
    8e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e3c:	089b      	lsrs	r3, r3, #2
    8e3e:	3302      	adds	r3, #2
    8e40:	68fa      	ldr	r2, [r7, #12]
    8e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
    8e46:	683b      	ldr	r3, [r7, #0]
    8e48:	685b      	ldr	r3, [r3, #4]
    8e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    8e4e:	2b00      	cmp	r3, #0
    8e50:	d006      	beq.n	8e60 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
    8e52:	4b39      	ldr	r3, [pc, #228]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8e54:	681a      	ldr	r2, [r3, #0]
    8e56:	4938      	ldr	r1, [pc, #224]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8e58:	69bb      	ldr	r3, [r7, #24]
    8e5a:	4313      	orrs	r3, r2
    8e5c:	600b      	str	r3, [r1, #0]
    8e5e:	e006      	b.n	8e6e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
    8e60:	4b35      	ldr	r3, [pc, #212]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8e62:	681a      	ldr	r2, [r3, #0]
    8e64:	69bb      	ldr	r3, [r7, #24]
    8e66:	43db      	mvns	r3, r3
    8e68:	4933      	ldr	r1, [pc, #204]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8e6a:	4013      	ands	r3, r2
    8e6c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
    8e6e:	683b      	ldr	r3, [r7, #0]
    8e70:	685b      	ldr	r3, [r3, #4]
    8e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8e76:	2b00      	cmp	r3, #0
    8e78:	d006      	beq.n	8e88 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
    8e7a:	4b2f      	ldr	r3, [pc, #188]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8e7c:	685a      	ldr	r2, [r3, #4]
    8e7e:	492e      	ldr	r1, [pc, #184]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8e80:	69bb      	ldr	r3, [r7, #24]
    8e82:	4313      	orrs	r3, r2
    8e84:	604b      	str	r3, [r1, #4]
    8e86:	e006      	b.n	8e96 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
    8e88:	4b2b      	ldr	r3, [pc, #172]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8e8a:	685a      	ldr	r2, [r3, #4]
    8e8c:	69bb      	ldr	r3, [r7, #24]
    8e8e:	43db      	mvns	r3, r3
    8e90:	4929      	ldr	r1, [pc, #164]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8e92:	4013      	ands	r3, r2
    8e94:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
    8e96:	683b      	ldr	r3, [r7, #0]
    8e98:	685b      	ldr	r3, [r3, #4]
    8e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    8e9e:	2b00      	cmp	r3, #0
    8ea0:	d006      	beq.n	8eb0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
    8ea2:	4b25      	ldr	r3, [pc, #148]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8ea4:	689a      	ldr	r2, [r3, #8]
    8ea6:	4924      	ldr	r1, [pc, #144]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8ea8:	69bb      	ldr	r3, [r7, #24]
    8eaa:	4313      	orrs	r3, r2
    8eac:	608b      	str	r3, [r1, #8]
    8eae:	e006      	b.n	8ebe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
    8eb0:	4b21      	ldr	r3, [pc, #132]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8eb2:	689a      	ldr	r2, [r3, #8]
    8eb4:	69bb      	ldr	r3, [r7, #24]
    8eb6:	43db      	mvns	r3, r3
    8eb8:	491f      	ldr	r1, [pc, #124]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8eba:	4013      	ands	r3, r2
    8ebc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
    8ebe:	683b      	ldr	r3, [r7, #0]
    8ec0:	685b      	ldr	r3, [r3, #4]
    8ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8ec6:	2b00      	cmp	r3, #0
    8ec8:	d006      	beq.n	8ed8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
    8eca:	4b1b      	ldr	r3, [pc, #108]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8ecc:	68da      	ldr	r2, [r3, #12]
    8ece:	491a      	ldr	r1, [pc, #104]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8ed0:	69bb      	ldr	r3, [r7, #24]
    8ed2:	4313      	orrs	r3, r2
    8ed4:	60cb      	str	r3, [r1, #12]
    8ed6:	e006      	b.n	8ee6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
    8ed8:	4b17      	ldr	r3, [pc, #92]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8eda:	68da      	ldr	r2, [r3, #12]
    8edc:	69bb      	ldr	r3, [r7, #24]
    8ede:	43db      	mvns	r3, r3
    8ee0:	4915      	ldr	r1, [pc, #84]	; (8f38 <HAL_GPIO_Init+0x2b0>)
    8ee2:	4013      	ands	r3, r2
    8ee4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
    8ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ee8:	3301      	adds	r3, #1
    8eea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
    8eec:	683b      	ldr	r3, [r7, #0]
    8eee:	681a      	ldr	r2, [r3, #0]
    8ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ef2:	fa22 f303 	lsr.w	r3, r2, r3
    8ef6:	2b00      	cmp	r3, #0
    8ef8:	f47f aed0 	bne.w	8c9c <HAL_GPIO_Init+0x14>
  }
}
    8efc:	bf00      	nop
    8efe:	372c      	adds	r7, #44	; 0x2c
    8f00:	46bd      	mov	sp, r7
    8f02:	bc80      	pop	{r7}
    8f04:	4770      	bx	lr
    8f06:	bf00      	nop
    8f08:	10210000 	.word	0x10210000
    8f0c:	10110000 	.word	0x10110000
    8f10:	10120000 	.word	0x10120000
    8f14:	10310000 	.word	0x10310000
    8f18:	10320000 	.word	0x10320000
    8f1c:	10220000 	.word	0x10220000
    8f20:	40021000 	.word	0x40021000
    8f24:	40010000 	.word	0x40010000
    8f28:	40010800 	.word	0x40010800
    8f2c:	40010c00 	.word	0x40010c00
    8f30:	40011000 	.word	0x40011000
    8f34:	40011400 	.word	0x40011400
    8f38:	40010400 	.word	0x40010400

00008f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
    8f3c:	b480      	push	{r7}
    8f3e:	b085      	sub	sp, #20
    8f40:	af00      	add	r7, sp, #0
    8f42:	6078      	str	r0, [r7, #4]
    8f44:	460b      	mov	r3, r1
    8f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	689a      	ldr	r2, [r3, #8]
    8f4c:	887b      	ldrh	r3, [r7, #2]
    8f4e:	4013      	ands	r3, r2
    8f50:	2b00      	cmp	r3, #0
    8f52:	d002      	beq.n	8f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
    8f54:	2301      	movs	r3, #1
    8f56:	73fb      	strb	r3, [r7, #15]
    8f58:	e001      	b.n	8f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
    8f5a:	2300      	movs	r3, #0
    8f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    8f5e:	7bfb      	ldrb	r3, [r7, #15]
}
    8f60:	4618      	mov	r0, r3
    8f62:	3714      	adds	r7, #20
    8f64:	46bd      	mov	sp, r7
    8f66:	bc80      	pop	{r7}
    8f68:	4770      	bx	lr

00008f6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
    8f6a:	b480      	push	{r7}
    8f6c:	b083      	sub	sp, #12
    8f6e:	af00      	add	r7, sp, #0
    8f70:	6078      	str	r0, [r7, #4]
    8f72:	460b      	mov	r3, r1
    8f74:	807b      	strh	r3, [r7, #2]
    8f76:	4613      	mov	r3, r2
    8f78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
    8f7a:	787b      	ldrb	r3, [r7, #1]
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d003      	beq.n	8f88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    8f80:	887a      	ldrh	r2, [r7, #2]
    8f82:	687b      	ldr	r3, [r7, #4]
    8f84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
    8f86:	e003      	b.n	8f90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
    8f88:	887b      	ldrh	r3, [r7, #2]
    8f8a:	041a      	lsls	r2, r3, #16
    8f8c:	687b      	ldr	r3, [r7, #4]
    8f8e:	611a      	str	r2, [r3, #16]
}
    8f90:	bf00      	nop
    8f92:	370c      	adds	r7, #12
    8f94:	46bd      	mov	sp, r7
    8f96:	bc80      	pop	{r7}
    8f98:	4770      	bx	lr

00008f9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
    8f9a:	b480      	push	{r7}
    8f9c:	b083      	sub	sp, #12
    8f9e:	af00      	add	r7, sp, #0
    8fa0:	6078      	str	r0, [r7, #4]
    8fa2:	460b      	mov	r3, r1
    8fa4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
    8fa6:	687b      	ldr	r3, [r7, #4]
    8fa8:	68da      	ldr	r2, [r3, #12]
    8faa:	887b      	ldrh	r3, [r7, #2]
    8fac:	4013      	ands	r3, r2
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d003      	beq.n	8fba <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
    8fb2:	887a      	ldrh	r2, [r7, #2]
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
    8fb8:	e002      	b.n	8fc0 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
    8fba:	887a      	ldrh	r2, [r7, #2]
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	611a      	str	r2, [r3, #16]
}
    8fc0:	bf00      	nop
    8fc2:	370c      	adds	r7, #12
    8fc4:	46bd      	mov	sp, r7
    8fc6:	bc80      	pop	{r7}
    8fc8:	4770      	bx	lr
	...

00008fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
    8fcc:	b580      	push	{r7, lr}
    8fce:	b084      	sub	sp, #16
    8fd0:	af00      	add	r7, sp, #0
    8fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
    8fd4:	687b      	ldr	r3, [r7, #4]
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	d101      	bne.n	8fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
    8fda:	2301      	movs	r3, #1
    8fdc:	e10f      	b.n	91fe <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
    8fde:	687b      	ldr	r3, [r7, #4]
    8fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    8fe4:	b2db      	uxtb	r3, r3
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d106      	bne.n	8ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
    8fea:	687b      	ldr	r3, [r7, #4]
    8fec:	2200      	movs	r2, #0
    8fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
    8ff2:	6878      	ldr	r0, [r7, #4]
    8ff4:	f004 fcfc 	bl	d9f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
    8ff8:	687b      	ldr	r3, [r7, #4]
    8ffa:	2224      	movs	r2, #36	; 0x24
    8ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
    9000:	687b      	ldr	r3, [r7, #4]
    9002:	681b      	ldr	r3, [r3, #0]
    9004:	681a      	ldr	r2, [r3, #0]
    9006:	687b      	ldr	r3, [r7, #4]
    9008:	681b      	ldr	r3, [r3, #0]
    900a:	f022 0201 	bic.w	r2, r2, #1
    900e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
    9010:	f001 faf0 	bl	a5f4 <HAL_RCC_GetPCLK1Freq>
    9014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
    9016:	687b      	ldr	r3, [r7, #4]
    9018:	685b      	ldr	r3, [r3, #4]
    901a:	4a7b      	ldr	r2, [pc, #492]	; (9208 <HAL_I2C_Init+0x23c>)
    901c:	4293      	cmp	r3, r2
    901e:	d807      	bhi.n	9030 <HAL_I2C_Init+0x64>
    9020:	68fb      	ldr	r3, [r7, #12]
    9022:	4a7a      	ldr	r2, [pc, #488]	; (920c <HAL_I2C_Init+0x240>)
    9024:	4293      	cmp	r3, r2
    9026:	bf94      	ite	ls
    9028:	2301      	movls	r3, #1
    902a:	2300      	movhi	r3, #0
    902c:	b2db      	uxtb	r3, r3
    902e:	e006      	b.n	903e <HAL_I2C_Init+0x72>
    9030:	68fb      	ldr	r3, [r7, #12]
    9032:	4a77      	ldr	r2, [pc, #476]	; (9210 <HAL_I2C_Init+0x244>)
    9034:	4293      	cmp	r3, r2
    9036:	bf94      	ite	ls
    9038:	2301      	movls	r3, #1
    903a:	2300      	movhi	r3, #0
    903c:	b2db      	uxtb	r3, r3
    903e:	2b00      	cmp	r3, #0
    9040:	d001      	beq.n	9046 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
    9042:	2301      	movs	r3, #1
    9044:	e0db      	b.n	91fe <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
    9046:	68fb      	ldr	r3, [r7, #12]
    9048:	4a72      	ldr	r2, [pc, #456]	; (9214 <HAL_I2C_Init+0x248>)
    904a:	fba2 2303 	umull	r2, r3, r2, r3
    904e:	0c9b      	lsrs	r3, r3, #18
    9050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
    9052:	687b      	ldr	r3, [r7, #4]
    9054:	681b      	ldr	r3, [r3, #0]
    9056:	685b      	ldr	r3, [r3, #4]
    9058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
    905c:	687b      	ldr	r3, [r7, #4]
    905e:	681b      	ldr	r3, [r3, #0]
    9060:	68ba      	ldr	r2, [r7, #8]
    9062:	430a      	orrs	r2, r1
    9064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
    9066:	687b      	ldr	r3, [r7, #4]
    9068:	681b      	ldr	r3, [r3, #0]
    906a:	6a1b      	ldr	r3, [r3, #32]
    906c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
    9070:	687b      	ldr	r3, [r7, #4]
    9072:	685b      	ldr	r3, [r3, #4]
    9074:	4a64      	ldr	r2, [pc, #400]	; (9208 <HAL_I2C_Init+0x23c>)
    9076:	4293      	cmp	r3, r2
    9078:	d802      	bhi.n	9080 <HAL_I2C_Init+0xb4>
    907a:	68bb      	ldr	r3, [r7, #8]
    907c:	3301      	adds	r3, #1
    907e:	e009      	b.n	9094 <HAL_I2C_Init+0xc8>
    9080:	68bb      	ldr	r3, [r7, #8]
    9082:	f44f 7296 	mov.w	r2, #300	; 0x12c
    9086:	fb02 f303 	mul.w	r3, r2, r3
    908a:	4a63      	ldr	r2, [pc, #396]	; (9218 <HAL_I2C_Init+0x24c>)
    908c:	fba2 2303 	umull	r2, r3, r2, r3
    9090:	099b      	lsrs	r3, r3, #6
    9092:	3301      	adds	r3, #1
    9094:	687a      	ldr	r2, [r7, #4]
    9096:	6812      	ldr	r2, [r2, #0]
    9098:	430b      	orrs	r3, r1
    909a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
    909c:	687b      	ldr	r3, [r7, #4]
    909e:	681b      	ldr	r3, [r3, #0]
    90a0:	69db      	ldr	r3, [r3, #28]
    90a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
    90a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    90aa:	687b      	ldr	r3, [r7, #4]
    90ac:	685b      	ldr	r3, [r3, #4]
    90ae:	4956      	ldr	r1, [pc, #344]	; (9208 <HAL_I2C_Init+0x23c>)
    90b0:	428b      	cmp	r3, r1
    90b2:	d80d      	bhi.n	90d0 <HAL_I2C_Init+0x104>
    90b4:	68fb      	ldr	r3, [r7, #12]
    90b6:	1e59      	subs	r1, r3, #1
    90b8:	687b      	ldr	r3, [r7, #4]
    90ba:	685b      	ldr	r3, [r3, #4]
    90bc:	005b      	lsls	r3, r3, #1
    90be:	fbb1 f3f3 	udiv	r3, r1, r3
    90c2:	3301      	adds	r3, #1
    90c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    90c8:	2b04      	cmp	r3, #4
    90ca:	bf38      	it	cc
    90cc:	2304      	movcc	r3, #4
    90ce:	e04f      	b.n	9170 <HAL_I2C_Init+0x1a4>
    90d0:	687b      	ldr	r3, [r7, #4]
    90d2:	689b      	ldr	r3, [r3, #8]
    90d4:	2b00      	cmp	r3, #0
    90d6:	d111      	bne.n	90fc <HAL_I2C_Init+0x130>
    90d8:	68fb      	ldr	r3, [r7, #12]
    90da:	1e58      	subs	r0, r3, #1
    90dc:	687b      	ldr	r3, [r7, #4]
    90de:	6859      	ldr	r1, [r3, #4]
    90e0:	460b      	mov	r3, r1
    90e2:	005b      	lsls	r3, r3, #1
    90e4:	440b      	add	r3, r1
    90e6:	fbb0 f3f3 	udiv	r3, r0, r3
    90ea:	3301      	adds	r3, #1
    90ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
    90f0:	2b00      	cmp	r3, #0
    90f2:	bf0c      	ite	eq
    90f4:	2301      	moveq	r3, #1
    90f6:	2300      	movne	r3, #0
    90f8:	b2db      	uxtb	r3, r3
    90fa:	e012      	b.n	9122 <HAL_I2C_Init+0x156>
    90fc:	68fb      	ldr	r3, [r7, #12]
    90fe:	1e58      	subs	r0, r3, #1
    9100:	687b      	ldr	r3, [r7, #4]
    9102:	6859      	ldr	r1, [r3, #4]
    9104:	460b      	mov	r3, r1
    9106:	009b      	lsls	r3, r3, #2
    9108:	440b      	add	r3, r1
    910a:	0099      	lsls	r1, r3, #2
    910c:	440b      	add	r3, r1
    910e:	fbb0 f3f3 	udiv	r3, r0, r3
    9112:	3301      	adds	r3, #1
    9114:	f3c3 030b 	ubfx	r3, r3, #0, #12
    9118:	2b00      	cmp	r3, #0
    911a:	bf0c      	ite	eq
    911c:	2301      	moveq	r3, #1
    911e:	2300      	movne	r3, #0
    9120:	b2db      	uxtb	r3, r3
    9122:	2b00      	cmp	r3, #0
    9124:	d001      	beq.n	912a <HAL_I2C_Init+0x15e>
    9126:	2301      	movs	r3, #1
    9128:	e022      	b.n	9170 <HAL_I2C_Init+0x1a4>
    912a:	687b      	ldr	r3, [r7, #4]
    912c:	689b      	ldr	r3, [r3, #8]
    912e:	2b00      	cmp	r3, #0
    9130:	d10e      	bne.n	9150 <HAL_I2C_Init+0x184>
    9132:	68fb      	ldr	r3, [r7, #12]
    9134:	1e58      	subs	r0, r3, #1
    9136:	687b      	ldr	r3, [r7, #4]
    9138:	6859      	ldr	r1, [r3, #4]
    913a:	460b      	mov	r3, r1
    913c:	005b      	lsls	r3, r3, #1
    913e:	440b      	add	r3, r1
    9140:	fbb0 f3f3 	udiv	r3, r0, r3
    9144:	3301      	adds	r3, #1
    9146:	f3c3 030b 	ubfx	r3, r3, #0, #12
    914a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    914e:	e00f      	b.n	9170 <HAL_I2C_Init+0x1a4>
    9150:	68fb      	ldr	r3, [r7, #12]
    9152:	1e58      	subs	r0, r3, #1
    9154:	687b      	ldr	r3, [r7, #4]
    9156:	6859      	ldr	r1, [r3, #4]
    9158:	460b      	mov	r3, r1
    915a:	009b      	lsls	r3, r3, #2
    915c:	440b      	add	r3, r1
    915e:	0099      	lsls	r1, r3, #2
    9160:	440b      	add	r3, r1
    9162:	fbb0 f3f3 	udiv	r3, r0, r3
    9166:	3301      	adds	r3, #1
    9168:	f3c3 030b 	ubfx	r3, r3, #0, #12
    916c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    9170:	6879      	ldr	r1, [r7, #4]
    9172:	6809      	ldr	r1, [r1, #0]
    9174:	4313      	orrs	r3, r2
    9176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	681b      	ldr	r3, [r3, #0]
    917c:	681b      	ldr	r3, [r3, #0]
    917e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
    9182:	687b      	ldr	r3, [r7, #4]
    9184:	69da      	ldr	r2, [r3, #28]
    9186:	687b      	ldr	r3, [r7, #4]
    9188:	6a1b      	ldr	r3, [r3, #32]
    918a:	431a      	orrs	r2, r3
    918c:	687b      	ldr	r3, [r7, #4]
    918e:	681b      	ldr	r3, [r3, #0]
    9190:	430a      	orrs	r2, r1
    9192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
    9194:	687b      	ldr	r3, [r7, #4]
    9196:	681b      	ldr	r3, [r3, #0]
    9198:	689b      	ldr	r3, [r3, #8]
    919a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
    919e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    91a2:	687a      	ldr	r2, [r7, #4]
    91a4:	6911      	ldr	r1, [r2, #16]
    91a6:	687a      	ldr	r2, [r7, #4]
    91a8:	68d2      	ldr	r2, [r2, #12]
    91aa:	4311      	orrs	r1, r2
    91ac:	687a      	ldr	r2, [r7, #4]
    91ae:	6812      	ldr	r2, [r2, #0]
    91b0:	430b      	orrs	r3, r1
    91b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
    91b4:	687b      	ldr	r3, [r7, #4]
    91b6:	681b      	ldr	r3, [r3, #0]
    91b8:	68db      	ldr	r3, [r3, #12]
    91ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    91be:	687b      	ldr	r3, [r7, #4]
    91c0:	695a      	ldr	r2, [r3, #20]
    91c2:	687b      	ldr	r3, [r7, #4]
    91c4:	699b      	ldr	r3, [r3, #24]
    91c6:	431a      	orrs	r2, r3
    91c8:	687b      	ldr	r3, [r7, #4]
    91ca:	681b      	ldr	r3, [r3, #0]
    91cc:	430a      	orrs	r2, r1
    91ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
    91d0:	687b      	ldr	r3, [r7, #4]
    91d2:	681b      	ldr	r3, [r3, #0]
    91d4:	681a      	ldr	r2, [r3, #0]
    91d6:	687b      	ldr	r3, [r7, #4]
    91d8:	681b      	ldr	r3, [r3, #0]
    91da:	f042 0201 	orr.w	r2, r2, #1
    91de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    91e0:	687b      	ldr	r3, [r7, #4]
    91e2:	2200      	movs	r2, #0
    91e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
    91e6:	687b      	ldr	r3, [r7, #4]
    91e8:	2220      	movs	r2, #32
    91ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
    91ee:	687b      	ldr	r3, [r7, #4]
    91f0:	2200      	movs	r2, #0
    91f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
    91f4:	687b      	ldr	r3, [r7, #4]
    91f6:	2200      	movs	r2, #0
    91f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
    91fc:	2300      	movs	r3, #0
}
    91fe:	4618      	mov	r0, r3
    9200:	3710      	adds	r7, #16
    9202:	46bd      	mov	sp, r7
    9204:	bd80      	pop	{r7, pc}
    9206:	bf00      	nop
    9208:	000186a0 	.word	0x000186a0
    920c:	001e847f 	.word	0x001e847f
    9210:	003d08ff 	.word	0x003d08ff
    9214:	431bde83 	.word	0x431bde83
    9218:	10624dd3 	.word	0x10624dd3

0000921c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
    921c:	b580      	push	{r7, lr}
    921e:	b088      	sub	sp, #32
    9220:	af02      	add	r7, sp, #8
    9222:	60f8      	str	r0, [r7, #12]
    9224:	607a      	str	r2, [r7, #4]
    9226:	461a      	mov	r2, r3
    9228:	460b      	mov	r3, r1
    922a:	817b      	strh	r3, [r7, #10]
    922c:	4613      	mov	r3, r2
    922e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
    9230:	f7fe ffc4 	bl	81bc <HAL_GetTick>
    9234:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
    9236:	68fb      	ldr	r3, [r7, #12]
    9238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    923c:	b2db      	uxtb	r3, r3
    923e:	2b20      	cmp	r3, #32
    9240:	f040 80e0 	bne.w	9404 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    9244:	697b      	ldr	r3, [r7, #20]
    9246:	9300      	str	r3, [sp, #0]
    9248:	2319      	movs	r3, #25
    924a:	2201      	movs	r2, #1
    924c:	4970      	ldr	r1, [pc, #448]	; (9410 <HAL_I2C_Master_Transmit+0x1f4>)
    924e:	68f8      	ldr	r0, [r7, #12]
    9250:	f000 f958 	bl	9504 <I2C_WaitOnFlagUntilTimeout>
    9254:	4603      	mov	r3, r0
    9256:	2b00      	cmp	r3, #0
    9258:	d001      	beq.n	925e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
    925a:	2302      	movs	r3, #2
    925c:	e0d3      	b.n	9406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
    925e:	68fb      	ldr	r3, [r7, #12]
    9260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    9264:	2b01      	cmp	r3, #1
    9266:	d101      	bne.n	926c <HAL_I2C_Master_Transmit+0x50>
    9268:	2302      	movs	r3, #2
    926a:	e0cc      	b.n	9406 <HAL_I2C_Master_Transmit+0x1ea>
    926c:	68fb      	ldr	r3, [r7, #12]
    926e:	2201      	movs	r2, #1
    9270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
    9274:	68fb      	ldr	r3, [r7, #12]
    9276:	681b      	ldr	r3, [r3, #0]
    9278:	681b      	ldr	r3, [r3, #0]
    927a:	f003 0301 	and.w	r3, r3, #1
    927e:	2b01      	cmp	r3, #1
    9280:	d007      	beq.n	9292 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    9282:	68fb      	ldr	r3, [r7, #12]
    9284:	681b      	ldr	r3, [r3, #0]
    9286:	681a      	ldr	r2, [r3, #0]
    9288:	68fb      	ldr	r3, [r7, #12]
    928a:	681b      	ldr	r3, [r3, #0]
    928c:	f042 0201 	orr.w	r2, r2, #1
    9290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
    9292:	68fb      	ldr	r3, [r7, #12]
    9294:	681b      	ldr	r3, [r3, #0]
    9296:	681a      	ldr	r2, [r3, #0]
    9298:	68fb      	ldr	r3, [r7, #12]
    929a:	681b      	ldr	r3, [r3, #0]
    929c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    92a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
    92a2:	68fb      	ldr	r3, [r7, #12]
    92a4:	2221      	movs	r2, #33	; 0x21
    92a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
    92aa:	68fb      	ldr	r3, [r7, #12]
    92ac:	2210      	movs	r2, #16
    92ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
    92b2:	68fb      	ldr	r3, [r7, #12]
    92b4:	2200      	movs	r2, #0
    92b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    92b8:	68fb      	ldr	r3, [r7, #12]
    92ba:	687a      	ldr	r2, [r7, #4]
    92bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
    92be:	68fb      	ldr	r3, [r7, #12]
    92c0:	893a      	ldrh	r2, [r7, #8]
    92c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
    92c4:	68fb      	ldr	r3, [r7, #12]
    92c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    92c8:	b29a      	uxth	r2, r3
    92ca:	68fb      	ldr	r3, [r7, #12]
    92cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    92ce:	68fb      	ldr	r3, [r7, #12]
    92d0:	4a50      	ldr	r2, [pc, #320]	; (9414 <HAL_I2C_Master_Transmit+0x1f8>)
    92d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
    92d4:	8979      	ldrh	r1, [r7, #10]
    92d6:	697b      	ldr	r3, [r7, #20]
    92d8:	6a3a      	ldr	r2, [r7, #32]
    92da:	68f8      	ldr	r0, [r7, #12]
    92dc:	f000 f89c 	bl	9418 <I2C_MasterRequestWrite>
    92e0:	4603      	mov	r3, r0
    92e2:	2b00      	cmp	r3, #0
    92e4:	d001      	beq.n	92ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
    92e6:	2301      	movs	r3, #1
    92e8:	e08d      	b.n	9406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    92ea:	2300      	movs	r3, #0
    92ec:	613b      	str	r3, [r7, #16]
    92ee:	68fb      	ldr	r3, [r7, #12]
    92f0:	681b      	ldr	r3, [r3, #0]
    92f2:	695b      	ldr	r3, [r3, #20]
    92f4:	613b      	str	r3, [r7, #16]
    92f6:	68fb      	ldr	r3, [r7, #12]
    92f8:	681b      	ldr	r3, [r3, #0]
    92fa:	699b      	ldr	r3, [r3, #24]
    92fc:	613b      	str	r3, [r7, #16]
    92fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
    9300:	e066      	b.n	93d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
    9302:	697a      	ldr	r2, [r7, #20]
    9304:	6a39      	ldr	r1, [r7, #32]
    9306:	68f8      	ldr	r0, [r7, #12]
    9308:	f000 f9d2 	bl	96b0 <I2C_WaitOnTXEFlagUntilTimeout>
    930c:	4603      	mov	r3, r0
    930e:	2b00      	cmp	r3, #0
    9310:	d00d      	beq.n	932e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
    9312:	68fb      	ldr	r3, [r7, #12]
    9314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9316:	2b04      	cmp	r3, #4
    9318:	d107      	bne.n	932a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    931a:	68fb      	ldr	r3, [r7, #12]
    931c:	681b      	ldr	r3, [r3, #0]
    931e:	681a      	ldr	r2, [r3, #0]
    9320:	68fb      	ldr	r3, [r7, #12]
    9322:	681b      	ldr	r3, [r3, #0]
    9324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    9328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
    932a:	2301      	movs	r3, #1
    932c:	e06b      	b.n	9406 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
    932e:	68fb      	ldr	r3, [r7, #12]
    9330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9332:	781a      	ldrb	r2, [r3, #0]
    9334:	68fb      	ldr	r3, [r7, #12]
    9336:	681b      	ldr	r3, [r3, #0]
    9338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
    933a:	68fb      	ldr	r3, [r7, #12]
    933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    933e:	1c5a      	adds	r2, r3, #1
    9340:	68fb      	ldr	r3, [r7, #12]
    9342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
    9344:	68fb      	ldr	r3, [r7, #12]
    9346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9348:	b29b      	uxth	r3, r3
    934a:	3b01      	subs	r3, #1
    934c:	b29a      	uxth	r2, r3
    934e:	68fb      	ldr	r3, [r7, #12]
    9350:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
    9352:	68fb      	ldr	r3, [r7, #12]
    9354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9356:	3b01      	subs	r3, #1
    9358:	b29a      	uxth	r2, r3
    935a:	68fb      	ldr	r3, [r7, #12]
    935c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
    935e:	68fb      	ldr	r3, [r7, #12]
    9360:	681b      	ldr	r3, [r3, #0]
    9362:	695b      	ldr	r3, [r3, #20]
    9364:	f003 0304 	and.w	r3, r3, #4
    9368:	2b04      	cmp	r3, #4
    936a:	d11b      	bne.n	93a4 <HAL_I2C_Master_Transmit+0x188>
    936c:	68fb      	ldr	r3, [r7, #12]
    936e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9370:	2b00      	cmp	r3, #0
    9372:	d017      	beq.n	93a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
    9374:	68fb      	ldr	r3, [r7, #12]
    9376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9378:	781a      	ldrb	r2, [r3, #0]
    937a:	68fb      	ldr	r3, [r7, #12]
    937c:	681b      	ldr	r3, [r3, #0]
    937e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
    9380:	68fb      	ldr	r3, [r7, #12]
    9382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9384:	1c5a      	adds	r2, r3, #1
    9386:	68fb      	ldr	r3, [r7, #12]
    9388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
    938a:	68fb      	ldr	r3, [r7, #12]
    938c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    938e:	b29b      	uxth	r3, r3
    9390:	3b01      	subs	r3, #1
    9392:	b29a      	uxth	r2, r3
    9394:	68fb      	ldr	r3, [r7, #12]
    9396:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
    9398:	68fb      	ldr	r3, [r7, #12]
    939a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    939c:	3b01      	subs	r3, #1
    939e:	b29a      	uxth	r2, r3
    93a0:	68fb      	ldr	r3, [r7, #12]
    93a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
    93a4:	697a      	ldr	r2, [r7, #20]
    93a6:	6a39      	ldr	r1, [r7, #32]
    93a8:	68f8      	ldr	r0, [r7, #12]
    93aa:	f000 f9c2 	bl	9732 <I2C_WaitOnBTFFlagUntilTimeout>
    93ae:	4603      	mov	r3, r0
    93b0:	2b00      	cmp	r3, #0
    93b2:	d00d      	beq.n	93d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
    93b4:	68fb      	ldr	r3, [r7, #12]
    93b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    93b8:	2b04      	cmp	r3, #4
    93ba:	d107      	bne.n	93cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    93bc:	68fb      	ldr	r3, [r7, #12]
    93be:	681b      	ldr	r3, [r3, #0]
    93c0:	681a      	ldr	r2, [r3, #0]
    93c2:	68fb      	ldr	r3, [r7, #12]
    93c4:	681b      	ldr	r3, [r3, #0]
    93c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    93ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
    93cc:	2301      	movs	r3, #1
    93ce:	e01a      	b.n	9406 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
    93d0:	68fb      	ldr	r3, [r7, #12]
    93d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    93d4:	2b00      	cmp	r3, #0
    93d6:	d194      	bne.n	9302 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    93d8:	68fb      	ldr	r3, [r7, #12]
    93da:	681b      	ldr	r3, [r3, #0]
    93dc:	681a      	ldr	r2, [r3, #0]
    93de:	68fb      	ldr	r3, [r7, #12]
    93e0:	681b      	ldr	r3, [r3, #0]
    93e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    93e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
    93e8:	68fb      	ldr	r3, [r7, #12]
    93ea:	2220      	movs	r2, #32
    93ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
    93f0:	68fb      	ldr	r3, [r7, #12]
    93f2:	2200      	movs	r2, #0
    93f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    93f8:	68fb      	ldr	r3, [r7, #12]
    93fa:	2200      	movs	r2, #0
    93fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
    9400:	2300      	movs	r3, #0
    9402:	e000      	b.n	9406 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
    9404:	2302      	movs	r3, #2
  }
}
    9406:	4618      	mov	r0, r3
    9408:	3718      	adds	r7, #24
    940a:	46bd      	mov	sp, r7
    940c:	bd80      	pop	{r7, pc}
    940e:	bf00      	nop
    9410:	00100002 	.word	0x00100002
    9414:	ffff0000 	.word	0xffff0000

00009418 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
    9418:	b580      	push	{r7, lr}
    941a:	b088      	sub	sp, #32
    941c:	af02      	add	r7, sp, #8
    941e:	60f8      	str	r0, [r7, #12]
    9420:	607a      	str	r2, [r7, #4]
    9422:	603b      	str	r3, [r7, #0]
    9424:	460b      	mov	r3, r1
    9426:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
    9428:	68fb      	ldr	r3, [r7, #12]
    942a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    942c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
    942e:	697b      	ldr	r3, [r7, #20]
    9430:	2b08      	cmp	r3, #8
    9432:	d006      	beq.n	9442 <I2C_MasterRequestWrite+0x2a>
    9434:	697b      	ldr	r3, [r7, #20]
    9436:	2b01      	cmp	r3, #1
    9438:	d003      	beq.n	9442 <I2C_MasterRequestWrite+0x2a>
    943a:	697b      	ldr	r3, [r7, #20]
    943c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
    9440:	d108      	bne.n	9454 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
    9442:	68fb      	ldr	r3, [r7, #12]
    9444:	681b      	ldr	r3, [r3, #0]
    9446:	681a      	ldr	r2, [r3, #0]
    9448:	68fb      	ldr	r3, [r7, #12]
    944a:	681b      	ldr	r3, [r3, #0]
    944c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    9450:	601a      	str	r2, [r3, #0]
    9452:	e00b      	b.n	946c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
    9454:	68fb      	ldr	r3, [r7, #12]
    9456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9458:	2b12      	cmp	r3, #18
    945a:	d107      	bne.n	946c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
    945c:	68fb      	ldr	r3, [r7, #12]
    945e:	681b      	ldr	r3, [r3, #0]
    9460:	681a      	ldr	r2, [r3, #0]
    9462:	68fb      	ldr	r3, [r7, #12]
    9464:	681b      	ldr	r3, [r3, #0]
    9466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    946a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
    946c:	683b      	ldr	r3, [r7, #0]
    946e:	9300      	str	r3, [sp, #0]
    9470:	687b      	ldr	r3, [r7, #4]
    9472:	2200      	movs	r2, #0
    9474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    9478:	68f8      	ldr	r0, [r7, #12]
    947a:	f000 f843 	bl	9504 <I2C_WaitOnFlagUntilTimeout>
    947e:	4603      	mov	r3, r0
    9480:	2b00      	cmp	r3, #0
    9482:	d001      	beq.n	9488 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
    9484:	2301      	movs	r3, #1
    9486:	e035      	b.n	94f4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
    9488:	68fb      	ldr	r3, [r7, #12]
    948a:	691b      	ldr	r3, [r3, #16]
    948c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    9490:	d108      	bne.n	94a4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
    9492:	897b      	ldrh	r3, [r7, #10]
    9494:	b2db      	uxtb	r3, r3
    9496:	461a      	mov	r2, r3
    9498:	68fb      	ldr	r3, [r7, #12]
    949a:	681b      	ldr	r3, [r3, #0]
    949c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    94a0:	611a      	str	r2, [r3, #16]
    94a2:	e01b      	b.n	94dc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
    94a4:	897b      	ldrh	r3, [r7, #10]
    94a6:	11db      	asrs	r3, r3, #7
    94a8:	b2db      	uxtb	r3, r3
    94aa:	f003 0306 	and.w	r3, r3, #6
    94ae:	b2db      	uxtb	r3, r3
    94b0:	f063 030f 	orn	r3, r3, #15
    94b4:	b2da      	uxtb	r2, r3
    94b6:	68fb      	ldr	r3, [r7, #12]
    94b8:	681b      	ldr	r3, [r3, #0]
    94ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
    94bc:	683b      	ldr	r3, [r7, #0]
    94be:	687a      	ldr	r2, [r7, #4]
    94c0:	490e      	ldr	r1, [pc, #56]	; (94fc <I2C_MasterRequestWrite+0xe4>)
    94c2:	68f8      	ldr	r0, [r7, #12]
    94c4:	f000 f875 	bl	95b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    94c8:	4603      	mov	r3, r0
    94ca:	2b00      	cmp	r3, #0
    94cc:	d001      	beq.n	94d2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
    94ce:	2301      	movs	r3, #1
    94d0:	e010      	b.n	94f4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
    94d2:	897b      	ldrh	r3, [r7, #10]
    94d4:	b2da      	uxtb	r2, r3
    94d6:	68fb      	ldr	r3, [r7, #12]
    94d8:	681b      	ldr	r3, [r3, #0]
    94da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
    94dc:	683b      	ldr	r3, [r7, #0]
    94de:	687a      	ldr	r2, [r7, #4]
    94e0:	4907      	ldr	r1, [pc, #28]	; (9500 <I2C_MasterRequestWrite+0xe8>)
    94e2:	68f8      	ldr	r0, [r7, #12]
    94e4:	f000 f865 	bl	95b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    94e8:	4603      	mov	r3, r0
    94ea:	2b00      	cmp	r3, #0
    94ec:	d001      	beq.n	94f2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
    94ee:	2301      	movs	r3, #1
    94f0:	e000      	b.n	94f4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
    94f2:	2300      	movs	r3, #0
}
    94f4:	4618      	mov	r0, r3
    94f6:	3718      	adds	r7, #24
    94f8:	46bd      	mov	sp, r7
    94fa:	bd80      	pop	{r7, pc}
    94fc:	00010008 	.word	0x00010008
    9500:	00010002 	.word	0x00010002

00009504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
    9504:	b580      	push	{r7, lr}
    9506:	b084      	sub	sp, #16
    9508:	af00      	add	r7, sp, #0
    950a:	60f8      	str	r0, [r7, #12]
    950c:	60b9      	str	r1, [r7, #8]
    950e:	603b      	str	r3, [r7, #0]
    9510:	4613      	mov	r3, r2
    9512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
    9514:	e025      	b.n	9562 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    9516:	683b      	ldr	r3, [r7, #0]
    9518:	f1b3 3fff 	cmp.w	r3, #4294967295
    951c:	d021      	beq.n	9562 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
    951e:	f7fe fe4d 	bl	81bc <HAL_GetTick>
    9522:	4602      	mov	r2, r0
    9524:	69bb      	ldr	r3, [r7, #24]
    9526:	1ad3      	subs	r3, r2, r3
    9528:	683a      	ldr	r2, [r7, #0]
    952a:	429a      	cmp	r2, r3
    952c:	d302      	bcc.n	9534 <I2C_WaitOnFlagUntilTimeout+0x30>
    952e:	683b      	ldr	r3, [r7, #0]
    9530:	2b00      	cmp	r3, #0
    9532:	d116      	bne.n	9562 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
    9534:	68fb      	ldr	r3, [r7, #12]
    9536:	2200      	movs	r2, #0
    9538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
    953a:	68fb      	ldr	r3, [r7, #12]
    953c:	2220      	movs	r2, #32
    953e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
    9542:	68fb      	ldr	r3, [r7, #12]
    9544:	2200      	movs	r2, #0
    9546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
    954a:	68fb      	ldr	r3, [r7, #12]
    954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    954e:	f043 0220 	orr.w	r2, r3, #32
    9552:	68fb      	ldr	r3, [r7, #12]
    9554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
    9556:	68fb      	ldr	r3, [r7, #12]
    9558:	2200      	movs	r2, #0
    955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
    955e:	2301      	movs	r3, #1
    9560:	e023      	b.n	95aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
    9562:	68bb      	ldr	r3, [r7, #8]
    9564:	0c1b      	lsrs	r3, r3, #16
    9566:	b2db      	uxtb	r3, r3
    9568:	2b01      	cmp	r3, #1
    956a:	d10d      	bne.n	9588 <I2C_WaitOnFlagUntilTimeout+0x84>
    956c:	68fb      	ldr	r3, [r7, #12]
    956e:	681b      	ldr	r3, [r3, #0]
    9570:	695b      	ldr	r3, [r3, #20]
    9572:	43da      	mvns	r2, r3
    9574:	68bb      	ldr	r3, [r7, #8]
    9576:	4013      	ands	r3, r2
    9578:	b29b      	uxth	r3, r3
    957a:	2b00      	cmp	r3, #0
    957c:	bf0c      	ite	eq
    957e:	2301      	moveq	r3, #1
    9580:	2300      	movne	r3, #0
    9582:	b2db      	uxtb	r3, r3
    9584:	461a      	mov	r2, r3
    9586:	e00c      	b.n	95a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
    9588:	68fb      	ldr	r3, [r7, #12]
    958a:	681b      	ldr	r3, [r3, #0]
    958c:	699b      	ldr	r3, [r3, #24]
    958e:	43da      	mvns	r2, r3
    9590:	68bb      	ldr	r3, [r7, #8]
    9592:	4013      	ands	r3, r2
    9594:	b29b      	uxth	r3, r3
    9596:	2b00      	cmp	r3, #0
    9598:	bf0c      	ite	eq
    959a:	2301      	moveq	r3, #1
    959c:	2300      	movne	r3, #0
    959e:	b2db      	uxtb	r3, r3
    95a0:	461a      	mov	r2, r3
    95a2:	79fb      	ldrb	r3, [r7, #7]
    95a4:	429a      	cmp	r2, r3
    95a6:	d0b6      	beq.n	9516 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
    95a8:	2300      	movs	r3, #0
}
    95aa:	4618      	mov	r0, r3
    95ac:	3710      	adds	r7, #16
    95ae:	46bd      	mov	sp, r7
    95b0:	bd80      	pop	{r7, pc}

000095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
    95b2:	b580      	push	{r7, lr}
    95b4:	b084      	sub	sp, #16
    95b6:	af00      	add	r7, sp, #0
    95b8:	60f8      	str	r0, [r7, #12]
    95ba:	60b9      	str	r1, [r7, #8]
    95bc:	607a      	str	r2, [r7, #4]
    95be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
    95c0:	e051      	b.n	9666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    95c2:	68fb      	ldr	r3, [r7, #12]
    95c4:	681b      	ldr	r3, [r3, #0]
    95c6:	695b      	ldr	r3, [r3, #20]
    95c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    95cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    95d0:	d123      	bne.n	961a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    95d2:	68fb      	ldr	r3, [r7, #12]
    95d4:	681b      	ldr	r3, [r3, #0]
    95d6:	681a      	ldr	r2, [r3, #0]
    95d8:	68fb      	ldr	r3, [r7, #12]
    95da:	681b      	ldr	r3, [r3, #0]
    95dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    95e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
    95e2:	68fb      	ldr	r3, [r7, #12]
    95e4:	681b      	ldr	r3, [r3, #0]
    95e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
    95ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
    95ec:	68fb      	ldr	r3, [r7, #12]
    95ee:	2200      	movs	r2, #0
    95f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
    95f2:	68fb      	ldr	r3, [r7, #12]
    95f4:	2220      	movs	r2, #32
    95f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
    95fa:	68fb      	ldr	r3, [r7, #12]
    95fc:	2200      	movs	r2, #0
    95fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
    9602:	68fb      	ldr	r3, [r7, #12]
    9604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9606:	f043 0204 	orr.w	r2, r3, #4
    960a:	68fb      	ldr	r3, [r7, #12]
    960c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
    960e:	68fb      	ldr	r3, [r7, #12]
    9610:	2200      	movs	r2, #0
    9612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
    9616:	2301      	movs	r3, #1
    9618:	e046      	b.n	96a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    961a:	687b      	ldr	r3, [r7, #4]
    961c:	f1b3 3fff 	cmp.w	r3, #4294967295
    9620:	d021      	beq.n	9666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
    9622:	f7fe fdcb 	bl	81bc <HAL_GetTick>
    9626:	4602      	mov	r2, r0
    9628:	683b      	ldr	r3, [r7, #0]
    962a:	1ad3      	subs	r3, r2, r3
    962c:	687a      	ldr	r2, [r7, #4]
    962e:	429a      	cmp	r2, r3
    9630:	d302      	bcc.n	9638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    9632:	687b      	ldr	r3, [r7, #4]
    9634:	2b00      	cmp	r3, #0
    9636:	d116      	bne.n	9666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
    9638:	68fb      	ldr	r3, [r7, #12]
    963a:	2200      	movs	r2, #0
    963c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
    963e:	68fb      	ldr	r3, [r7, #12]
    9640:	2220      	movs	r2, #32
    9642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
    9646:	68fb      	ldr	r3, [r7, #12]
    9648:	2200      	movs	r2, #0
    964a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
    964e:	68fb      	ldr	r3, [r7, #12]
    9650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9652:	f043 0220 	orr.w	r2, r3, #32
    9656:	68fb      	ldr	r3, [r7, #12]
    9658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
    965a:	68fb      	ldr	r3, [r7, #12]
    965c:	2200      	movs	r2, #0
    965e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
    9662:	2301      	movs	r3, #1
    9664:	e020      	b.n	96a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
    9666:	68bb      	ldr	r3, [r7, #8]
    9668:	0c1b      	lsrs	r3, r3, #16
    966a:	b2db      	uxtb	r3, r3
    966c:	2b01      	cmp	r3, #1
    966e:	d10c      	bne.n	968a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
    9670:	68fb      	ldr	r3, [r7, #12]
    9672:	681b      	ldr	r3, [r3, #0]
    9674:	695b      	ldr	r3, [r3, #20]
    9676:	43da      	mvns	r2, r3
    9678:	68bb      	ldr	r3, [r7, #8]
    967a:	4013      	ands	r3, r2
    967c:	b29b      	uxth	r3, r3
    967e:	2b00      	cmp	r3, #0
    9680:	bf14      	ite	ne
    9682:	2301      	movne	r3, #1
    9684:	2300      	moveq	r3, #0
    9686:	b2db      	uxtb	r3, r3
    9688:	e00b      	b.n	96a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
    968a:	68fb      	ldr	r3, [r7, #12]
    968c:	681b      	ldr	r3, [r3, #0]
    968e:	699b      	ldr	r3, [r3, #24]
    9690:	43da      	mvns	r2, r3
    9692:	68bb      	ldr	r3, [r7, #8]
    9694:	4013      	ands	r3, r2
    9696:	b29b      	uxth	r3, r3
    9698:	2b00      	cmp	r3, #0
    969a:	bf14      	ite	ne
    969c:	2301      	movne	r3, #1
    969e:	2300      	moveq	r3, #0
    96a0:	b2db      	uxtb	r3, r3
    96a2:	2b00      	cmp	r3, #0
    96a4:	d18d      	bne.n	95c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
    96a6:	2300      	movs	r3, #0
}
    96a8:	4618      	mov	r0, r3
    96aa:	3710      	adds	r7, #16
    96ac:	46bd      	mov	sp, r7
    96ae:	bd80      	pop	{r7, pc}

000096b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
    96b0:	b580      	push	{r7, lr}
    96b2:	b084      	sub	sp, #16
    96b4:	af00      	add	r7, sp, #0
    96b6:	60f8      	str	r0, [r7, #12]
    96b8:	60b9      	str	r1, [r7, #8]
    96ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
    96bc:	e02d      	b.n	971a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
    96be:	68f8      	ldr	r0, [r7, #12]
    96c0:	f000 f878 	bl	97b4 <I2C_IsAcknowledgeFailed>
    96c4:	4603      	mov	r3, r0
    96c6:	2b00      	cmp	r3, #0
    96c8:	d001      	beq.n	96ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
    96ca:	2301      	movs	r3, #1
    96cc:	e02d      	b.n	972a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    96ce:	68bb      	ldr	r3, [r7, #8]
    96d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    96d4:	d021      	beq.n	971a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
    96d6:	f7fe fd71 	bl	81bc <HAL_GetTick>
    96da:	4602      	mov	r2, r0
    96dc:	687b      	ldr	r3, [r7, #4]
    96de:	1ad3      	subs	r3, r2, r3
    96e0:	68ba      	ldr	r2, [r7, #8]
    96e2:	429a      	cmp	r2, r3
    96e4:	d302      	bcc.n	96ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
    96e6:	68bb      	ldr	r3, [r7, #8]
    96e8:	2b00      	cmp	r3, #0
    96ea:	d116      	bne.n	971a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
    96ec:	68fb      	ldr	r3, [r7, #12]
    96ee:	2200      	movs	r2, #0
    96f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
    96f2:	68fb      	ldr	r3, [r7, #12]
    96f4:	2220      	movs	r2, #32
    96f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
    96fa:	68fb      	ldr	r3, [r7, #12]
    96fc:	2200      	movs	r2, #0
    96fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
    9702:	68fb      	ldr	r3, [r7, #12]
    9704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9706:	f043 0220 	orr.w	r2, r3, #32
    970a:	68fb      	ldr	r3, [r7, #12]
    970c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
    970e:	68fb      	ldr	r3, [r7, #12]
    9710:	2200      	movs	r2, #0
    9712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
    9716:	2301      	movs	r3, #1
    9718:	e007      	b.n	972a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
    971a:	68fb      	ldr	r3, [r7, #12]
    971c:	681b      	ldr	r3, [r3, #0]
    971e:	695b      	ldr	r3, [r3, #20]
    9720:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9724:	2b80      	cmp	r3, #128	; 0x80
    9726:	d1ca      	bne.n	96be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
    9728:	2300      	movs	r3, #0
}
    972a:	4618      	mov	r0, r3
    972c:	3710      	adds	r7, #16
    972e:	46bd      	mov	sp, r7
    9730:	bd80      	pop	{r7, pc}

00009732 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
    9732:	b580      	push	{r7, lr}
    9734:	b084      	sub	sp, #16
    9736:	af00      	add	r7, sp, #0
    9738:	60f8      	str	r0, [r7, #12]
    973a:	60b9      	str	r1, [r7, #8]
    973c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
    973e:	e02d      	b.n	979c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
    9740:	68f8      	ldr	r0, [r7, #12]
    9742:	f000 f837 	bl	97b4 <I2C_IsAcknowledgeFailed>
    9746:	4603      	mov	r3, r0
    9748:	2b00      	cmp	r3, #0
    974a:	d001      	beq.n	9750 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
    974c:	2301      	movs	r3, #1
    974e:	e02d      	b.n	97ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    9750:	68bb      	ldr	r3, [r7, #8]
    9752:	f1b3 3fff 	cmp.w	r3, #4294967295
    9756:	d021      	beq.n	979c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
    9758:	f7fe fd30 	bl	81bc <HAL_GetTick>
    975c:	4602      	mov	r2, r0
    975e:	687b      	ldr	r3, [r7, #4]
    9760:	1ad3      	subs	r3, r2, r3
    9762:	68ba      	ldr	r2, [r7, #8]
    9764:	429a      	cmp	r2, r3
    9766:	d302      	bcc.n	976e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
    9768:	68bb      	ldr	r3, [r7, #8]
    976a:	2b00      	cmp	r3, #0
    976c:	d116      	bne.n	979c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
    976e:	68fb      	ldr	r3, [r7, #12]
    9770:	2200      	movs	r2, #0
    9772:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
    9774:	68fb      	ldr	r3, [r7, #12]
    9776:	2220      	movs	r2, #32
    9778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
    977c:	68fb      	ldr	r3, [r7, #12]
    977e:	2200      	movs	r2, #0
    9780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
    9784:	68fb      	ldr	r3, [r7, #12]
    9786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9788:	f043 0220 	orr.w	r2, r3, #32
    978c:	68fb      	ldr	r3, [r7, #12]
    978e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
    9790:	68fb      	ldr	r3, [r7, #12]
    9792:	2200      	movs	r2, #0
    9794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
    9798:	2301      	movs	r3, #1
    979a:	e007      	b.n	97ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
    979c:	68fb      	ldr	r3, [r7, #12]
    979e:	681b      	ldr	r3, [r3, #0]
    97a0:	695b      	ldr	r3, [r3, #20]
    97a2:	f003 0304 	and.w	r3, r3, #4
    97a6:	2b04      	cmp	r3, #4
    97a8:	d1ca      	bne.n	9740 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
    97aa:	2300      	movs	r3, #0
}
    97ac:	4618      	mov	r0, r3
    97ae:	3710      	adds	r7, #16
    97b0:	46bd      	mov	sp, r7
    97b2:	bd80      	pop	{r7, pc}

000097b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
    97b4:	b480      	push	{r7}
    97b6:	b083      	sub	sp, #12
    97b8:	af00      	add	r7, sp, #0
    97ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    97bc:	687b      	ldr	r3, [r7, #4]
    97be:	681b      	ldr	r3, [r3, #0]
    97c0:	695b      	ldr	r3, [r3, #20]
    97c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    97c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    97ca:	d11b      	bne.n	9804 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
    97cc:	687b      	ldr	r3, [r7, #4]
    97ce:	681b      	ldr	r3, [r3, #0]
    97d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
    97d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    97d6:	687b      	ldr	r3, [r7, #4]
    97d8:	2200      	movs	r2, #0
    97da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
    97dc:	687b      	ldr	r3, [r7, #4]
    97de:	2220      	movs	r2, #32
    97e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
    97e4:	687b      	ldr	r3, [r7, #4]
    97e6:	2200      	movs	r2, #0
    97e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
    97ec:	687b      	ldr	r3, [r7, #4]
    97ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    97f0:	f043 0204 	orr.w	r2, r3, #4
    97f4:	687b      	ldr	r3, [r7, #4]
    97f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    97f8:	687b      	ldr	r3, [r7, #4]
    97fa:	2200      	movs	r2, #0
    97fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
    9800:	2301      	movs	r3, #1
    9802:	e000      	b.n	9806 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
    9804:	2300      	movs	r3, #0
}
    9806:	4618      	mov	r0, r3
    9808:	370c      	adds	r7, #12
    980a:	46bd      	mov	sp, r7
    980c:	bc80      	pop	{r7}
    980e:	4770      	bx	lr

00009810 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
    9810:	b580      	push	{r7, lr}
    9812:	b084      	sub	sp, #16
    9814:	af00      	add	r7, sp, #0
    9816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
    9818:	687b      	ldr	r3, [r7, #4]
    981a:	2b00      	cmp	r3, #0
    981c:	d101      	bne.n	9822 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
    981e:	2301      	movs	r3, #1
    9820:	e02b      	b.n	987a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
    9822:	687b      	ldr	r3, [r7, #4]
    9824:	681b      	ldr	r3, [r3, #0]
    9826:	f64c 42cc 	movw	r2, #52428	; 0xcccc
    982a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
    982c:	687b      	ldr	r3, [r7, #4]
    982e:	681b      	ldr	r3, [r3, #0]
    9830:	f245 5255 	movw	r2, #21845	; 0x5555
    9834:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
    9836:	687b      	ldr	r3, [r7, #4]
    9838:	681b      	ldr	r3, [r3, #0]
    983a:	687a      	ldr	r2, [r7, #4]
    983c:	6852      	ldr	r2, [r2, #4]
    983e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
    9840:	687b      	ldr	r3, [r7, #4]
    9842:	681b      	ldr	r3, [r3, #0]
    9844:	687a      	ldr	r2, [r7, #4]
    9846:	6892      	ldr	r2, [r2, #8]
    9848:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
    984a:	f7fe fcb7 	bl	81bc <HAL_GetTick>
    984e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
    9850:	e008      	b.n	9864 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
    9852:	f7fe fcb3 	bl	81bc <HAL_GetTick>
    9856:	4602      	mov	r2, r0
    9858:	68fb      	ldr	r3, [r7, #12]
    985a:	1ad3      	subs	r3, r2, r3
    985c:	2b30      	cmp	r3, #48	; 0x30
    985e:	d901      	bls.n	9864 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
    9860:	2303      	movs	r3, #3
    9862:	e00a      	b.n	987a <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
    9864:	687b      	ldr	r3, [r7, #4]
    9866:	681b      	ldr	r3, [r3, #0]
    9868:	68db      	ldr	r3, [r3, #12]
    986a:	2b00      	cmp	r3, #0
    986c:	d1f1      	bne.n	9852 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
    986e:	687b      	ldr	r3, [r7, #4]
    9870:	681b      	ldr	r3, [r3, #0]
    9872:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
    9876:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
    9878:	2300      	movs	r3, #0
}
    987a:	4618      	mov	r0, r3
    987c:	3710      	adds	r7, #16
    987e:	46bd      	mov	sp, r7
    9880:	bd80      	pop	{r7, pc}

00009882 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
    9882:	b480      	push	{r7}
    9884:	b083      	sub	sp, #12
    9886:	af00      	add	r7, sp, #0
    9888:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
    988a:	687b      	ldr	r3, [r7, #4]
    988c:	681b      	ldr	r3, [r3, #0]
    988e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
    9892:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
    9894:	2300      	movs	r3, #0
}
    9896:	4618      	mov	r0, r3
    9898:	370c      	adds	r7, #12
    989a:	46bd      	mov	sp, r7
    989c:	bc80      	pop	{r7}
    989e:	4770      	bx	lr

000098a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
    98a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    98a2:	b08b      	sub	sp, #44	; 0x2c
    98a4:	af06      	add	r7, sp, #24
    98a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
    98a8:	687b      	ldr	r3, [r7, #4]
    98aa:	2b00      	cmp	r3, #0
    98ac:	d101      	bne.n	98b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
    98ae:	2301      	movs	r3, #1
    98b0:	e0d3      	b.n	9a5a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
    98b2:	687b      	ldr	r3, [r7, #4]
    98b4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
    98b8:	b2db      	uxtb	r3, r3
    98ba:	2b00      	cmp	r3, #0
    98bc:	d106      	bne.n	98cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
    98be:	687b      	ldr	r3, [r7, #4]
    98c0:	2200      	movs	r2, #0
    98c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
    98c6:	6878      	ldr	r0, [r7, #4]
    98c8:	f005 f966 	bl	eb98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
    98cc:	687b      	ldr	r3, [r7, #4]
    98ce:	2203      	movs	r2, #3
    98d0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
    98d4:	687b      	ldr	r3, [r7, #4]
    98d6:	681b      	ldr	r3, [r3, #0]
    98d8:	4618      	mov	r0, r3
    98da:	f001 fe2b 	bl	b534 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
    98de:	687b      	ldr	r3, [r7, #4]
    98e0:	681b      	ldr	r3, [r3, #0]
    98e2:	603b      	str	r3, [r7, #0]
    98e4:	687e      	ldr	r6, [r7, #4]
    98e6:	466d      	mov	r5, sp
    98e8:	f106 0410 	add.w	r4, r6, #16
    98ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    98ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    98f0:	6823      	ldr	r3, [r4, #0]
    98f2:	602b      	str	r3, [r5, #0]
    98f4:	1d33      	adds	r3, r6, #4
    98f6:	cb0e      	ldmia	r3, {r1, r2, r3}
    98f8:	6838      	ldr	r0, [r7, #0]
    98fa:	f001 fdf4 	bl	b4e6 <USB_CoreInit>
    98fe:	4603      	mov	r3, r0
    9900:	2b00      	cmp	r3, #0
    9902:	d005      	beq.n	9910 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    9904:	687b      	ldr	r3, [r7, #4]
    9906:	2202      	movs	r2, #2
    9908:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
    990c:	2301      	movs	r3, #1
    990e:	e0a4      	b.n	9a5a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
    9910:	687b      	ldr	r3, [r7, #4]
    9912:	681b      	ldr	r3, [r3, #0]
    9914:	2100      	movs	r1, #0
    9916:	4618      	mov	r0, r3
    9918:	f001 fe28 	bl	b56c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
    991c:	2300      	movs	r3, #0
    991e:	73fb      	strb	r3, [r7, #15]
    9920:	e035      	b.n	998e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
    9922:	7bfb      	ldrb	r3, [r7, #15]
    9924:	687a      	ldr	r2, [r7, #4]
    9926:	015b      	lsls	r3, r3, #5
    9928:	4413      	add	r3, r2
    992a:	3329      	adds	r3, #41	; 0x29
    992c:	2201      	movs	r2, #1
    992e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
    9930:	7bfb      	ldrb	r3, [r7, #15]
    9932:	687a      	ldr	r2, [r7, #4]
    9934:	015b      	lsls	r3, r3, #5
    9936:	4413      	add	r3, r2
    9938:	3328      	adds	r3, #40	; 0x28
    993a:	7bfa      	ldrb	r2, [r7, #15]
    993c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
    993e:	7bfb      	ldrb	r3, [r7, #15]
    9940:	7bfa      	ldrb	r2, [r7, #15]
    9942:	b291      	uxth	r1, r2
    9944:	687a      	ldr	r2, [r7, #4]
    9946:	015b      	lsls	r3, r3, #5
    9948:	4413      	add	r3, r2
    994a:	3336      	adds	r3, #54	; 0x36
    994c:	460a      	mov	r2, r1
    994e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
    9950:	7bfb      	ldrb	r3, [r7, #15]
    9952:	687a      	ldr	r2, [r7, #4]
    9954:	015b      	lsls	r3, r3, #5
    9956:	4413      	add	r3, r2
    9958:	332b      	adds	r3, #43	; 0x2b
    995a:	2200      	movs	r2, #0
    995c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
    995e:	7bfb      	ldrb	r3, [r7, #15]
    9960:	687a      	ldr	r2, [r7, #4]
    9962:	015b      	lsls	r3, r3, #5
    9964:	4413      	add	r3, r2
    9966:	3338      	adds	r3, #56	; 0x38
    9968:	2200      	movs	r2, #0
    996a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
    996c:	7bfb      	ldrb	r3, [r7, #15]
    996e:	687a      	ldr	r2, [r7, #4]
    9970:	015b      	lsls	r3, r3, #5
    9972:	4413      	add	r3, r2
    9974:	333c      	adds	r3, #60	; 0x3c
    9976:	2200      	movs	r2, #0
    9978:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
    997a:	7bfb      	ldrb	r3, [r7, #15]
    997c:	687a      	ldr	r2, [r7, #4]
    997e:	3302      	adds	r3, #2
    9980:	015b      	lsls	r3, r3, #5
    9982:	4413      	add	r3, r2
    9984:	2200      	movs	r2, #0
    9986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
    9988:	7bfb      	ldrb	r3, [r7, #15]
    998a:	3301      	adds	r3, #1
    998c:	73fb      	strb	r3, [r7, #15]
    998e:	7bfa      	ldrb	r2, [r7, #15]
    9990:	687b      	ldr	r3, [r7, #4]
    9992:	685b      	ldr	r3, [r3, #4]
    9994:	429a      	cmp	r2, r3
    9996:	d3c4      	bcc.n	9922 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
    9998:	2300      	movs	r3, #0
    999a:	73fb      	strb	r3, [r7, #15]
    999c:	e031      	b.n	9a02 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
    999e:	7bfb      	ldrb	r3, [r7, #15]
    99a0:	687a      	ldr	r2, [r7, #4]
    99a2:	015b      	lsls	r3, r3, #5
    99a4:	4413      	add	r3, r2
    99a6:	f203 1329 	addw	r3, r3, #297	; 0x129
    99aa:	2200      	movs	r2, #0
    99ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
    99ae:	7bfb      	ldrb	r3, [r7, #15]
    99b0:	687a      	ldr	r2, [r7, #4]
    99b2:	015b      	lsls	r3, r3, #5
    99b4:	4413      	add	r3, r2
    99b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
    99ba:	7bfa      	ldrb	r2, [r7, #15]
    99bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    99be:	7bfb      	ldrb	r3, [r7, #15]
    99c0:	687a      	ldr	r2, [r7, #4]
    99c2:	015b      	lsls	r3, r3, #5
    99c4:	4413      	add	r3, r2
    99c6:	f203 132b 	addw	r3, r3, #299	; 0x12b
    99ca:	2200      	movs	r2, #0
    99cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
    99ce:	7bfb      	ldrb	r3, [r7, #15]
    99d0:	687a      	ldr	r2, [r7, #4]
    99d2:	015b      	lsls	r3, r3, #5
    99d4:	4413      	add	r3, r2
    99d6:	f503 739c 	add.w	r3, r3, #312	; 0x138
    99da:	2200      	movs	r2, #0
    99dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
    99de:	7bfb      	ldrb	r3, [r7, #15]
    99e0:	687a      	ldr	r2, [r7, #4]
    99e2:	015b      	lsls	r3, r3, #5
    99e4:	4413      	add	r3, r2
    99e6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
    99ea:	2200      	movs	r2, #0
    99ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
    99ee:	7bfb      	ldrb	r3, [r7, #15]
    99f0:	687a      	ldr	r2, [r7, #4]
    99f2:	330a      	adds	r3, #10
    99f4:	015b      	lsls	r3, r3, #5
    99f6:	4413      	add	r3, r2
    99f8:	2200      	movs	r2, #0
    99fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
    99fc:	7bfb      	ldrb	r3, [r7, #15]
    99fe:	3301      	adds	r3, #1
    9a00:	73fb      	strb	r3, [r7, #15]
    9a02:	7bfa      	ldrb	r2, [r7, #15]
    9a04:	687b      	ldr	r3, [r7, #4]
    9a06:	685b      	ldr	r3, [r3, #4]
    9a08:	429a      	cmp	r2, r3
    9a0a:	d3c8      	bcc.n	999e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
    9a0c:	687b      	ldr	r3, [r7, #4]
    9a0e:	681b      	ldr	r3, [r3, #0]
    9a10:	603b      	str	r3, [r7, #0]
    9a12:	687e      	ldr	r6, [r7, #4]
    9a14:	466d      	mov	r5, sp
    9a16:	f106 0410 	add.w	r4, r6, #16
    9a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    9a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    9a1e:	6823      	ldr	r3, [r4, #0]
    9a20:	602b      	str	r3, [r5, #0]
    9a22:	1d33      	adds	r3, r6, #4
    9a24:	cb0e      	ldmia	r3, {r1, r2, r3}
    9a26:	6838      	ldr	r0, [r7, #0]
    9a28:	f001 fdac 	bl	b584 <USB_DevInit>
    9a2c:	4603      	mov	r3, r0
    9a2e:	2b00      	cmp	r3, #0
    9a30:	d005      	beq.n	9a3e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    9a32:	687b      	ldr	r3, [r7, #4]
    9a34:	2202      	movs	r2, #2
    9a36:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
    9a3a:	2301      	movs	r3, #1
    9a3c:	e00d      	b.n	9a5a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
    9a3e:	687b      	ldr	r3, [r7, #4]
    9a40:	2200      	movs	r2, #0
    9a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
    9a46:	687b      	ldr	r3, [r7, #4]
    9a48:	2201      	movs	r2, #1
    9a4a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
    9a4e:	687b      	ldr	r3, [r7, #4]
    9a50:	681b      	ldr	r3, [r3, #0]
    9a52:	4618      	mov	r0, r3
    9a54:	f002 fd42 	bl	c4dc <USB_DevDisconnect>

  return HAL_OK;
    9a58:	2300      	movs	r3, #0
}
    9a5a:	4618      	mov	r0, r3
    9a5c:	3714      	adds	r7, #20
    9a5e:	46bd      	mov	sp, r7
    9a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009a62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
    9a62:	b580      	push	{r7, lr}
    9a64:	b082      	sub	sp, #8
    9a66:	af00      	add	r7, sp, #0
    9a68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
    9a6a:	687b      	ldr	r3, [r7, #4]
    9a6c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
    9a70:	2b01      	cmp	r3, #1
    9a72:	d101      	bne.n	9a78 <HAL_PCD_Start+0x16>
    9a74:	2302      	movs	r3, #2
    9a76:	e016      	b.n	9aa6 <HAL_PCD_Start+0x44>
    9a78:	687b      	ldr	r3, [r7, #4]
    9a7a:	2201      	movs	r2, #1
    9a7c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
    9a80:	2101      	movs	r1, #1
    9a82:	6878      	ldr	r0, [r7, #4]
    9a84:	f005 f9f5 	bl	ee72 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
    9a88:	687b      	ldr	r3, [r7, #4]
    9a8a:	681b      	ldr	r3, [r3, #0]
    9a8c:	4618      	mov	r0, r3
    9a8e:	f002 fd1b 	bl	c4c8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
    9a92:	687b      	ldr	r3, [r7, #4]
    9a94:	681b      	ldr	r3, [r3, #0]
    9a96:	4618      	mov	r0, r3
    9a98:	f001 fd35 	bl	b506 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
    9a9c:	687b      	ldr	r3, [r7, #4]
    9a9e:	2200      	movs	r2, #0
    9aa0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
    9aa4:	2300      	movs	r3, #0
}
    9aa6:	4618      	mov	r0, r3
    9aa8:	3708      	adds	r7, #8
    9aaa:	46bd      	mov	sp, r7
    9aac:	bd80      	pop	{r7, pc}

00009aae <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
    9aae:	b580      	push	{r7, lr}
    9ab0:	b084      	sub	sp, #16
    9ab2:	af00      	add	r7, sp, #0
    9ab4:	6078      	str	r0, [r7, #4]
    9ab6:	4608      	mov	r0, r1
    9ab8:	4611      	mov	r1, r2
    9aba:	461a      	mov	r2, r3
    9abc:	4603      	mov	r3, r0
    9abe:	70fb      	strb	r3, [r7, #3]
    9ac0:	460b      	mov	r3, r1
    9ac2:	803b      	strh	r3, [r7, #0]
    9ac4:	4613      	mov	r3, r2
    9ac6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
    9ac8:	2300      	movs	r3, #0
    9aca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
    9acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	da0b      	bge.n	9aec <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    9ad4:	78fb      	ldrb	r3, [r7, #3]
    9ad6:	f003 0307 	and.w	r3, r3, #7
    9ada:	015b      	lsls	r3, r3, #5
    9adc:	3328      	adds	r3, #40	; 0x28
    9ade:	687a      	ldr	r2, [r7, #4]
    9ae0:	4413      	add	r3, r2
    9ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
    9ae4:	68fb      	ldr	r3, [r7, #12]
    9ae6:	2201      	movs	r2, #1
    9ae8:	705a      	strb	r2, [r3, #1]
    9aea:	e00b      	b.n	9b04 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    9aec:	78fb      	ldrb	r3, [r7, #3]
    9aee:	f003 0307 	and.w	r3, r3, #7
    9af2:	015b      	lsls	r3, r3, #5
    9af4:	f503 7394 	add.w	r3, r3, #296	; 0x128
    9af8:	687a      	ldr	r2, [r7, #4]
    9afa:	4413      	add	r3, r2
    9afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
    9afe:	68fb      	ldr	r3, [r7, #12]
    9b00:	2200      	movs	r2, #0
    9b02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
    9b04:	78fb      	ldrb	r3, [r7, #3]
    9b06:	f003 0307 	and.w	r3, r3, #7
    9b0a:	b2da      	uxtb	r2, r3
    9b0c:	68fb      	ldr	r3, [r7, #12]
    9b0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
    9b10:	883a      	ldrh	r2, [r7, #0]
    9b12:	68fb      	ldr	r3, [r7, #12]
    9b14:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
    9b16:	68fb      	ldr	r3, [r7, #12]
    9b18:	78ba      	ldrb	r2, [r7, #2]
    9b1a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
    9b1c:	68fb      	ldr	r3, [r7, #12]
    9b1e:	785b      	ldrb	r3, [r3, #1]
    9b20:	2b00      	cmp	r3, #0
    9b22:	d004      	beq.n	9b2e <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
    9b24:	68fb      	ldr	r3, [r7, #12]
    9b26:	781b      	ldrb	r3, [r3, #0]
    9b28:	b29a      	uxth	r2, r3
    9b2a:	68fb      	ldr	r3, [r7, #12]
    9b2c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
    9b2e:	78bb      	ldrb	r3, [r7, #2]
    9b30:	2b02      	cmp	r3, #2
    9b32:	d102      	bne.n	9b3a <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
    9b34:	68fb      	ldr	r3, [r7, #12]
    9b36:	2200      	movs	r2, #0
    9b38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
    9b3a:	687b      	ldr	r3, [r7, #4]
    9b3c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
    9b40:	2b01      	cmp	r3, #1
    9b42:	d101      	bne.n	9b48 <HAL_PCD_EP_Open+0x9a>
    9b44:	2302      	movs	r3, #2
    9b46:	e00e      	b.n	9b66 <HAL_PCD_EP_Open+0xb8>
    9b48:	687b      	ldr	r3, [r7, #4]
    9b4a:	2201      	movs	r2, #1
    9b4c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
    9b50:	687b      	ldr	r3, [r7, #4]
    9b52:	681b      	ldr	r3, [r3, #0]
    9b54:	68f9      	ldr	r1, [r7, #12]
    9b56:	4618      	mov	r0, r3
    9b58:	f001 fd38 	bl	b5cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
    9b5c:	687b      	ldr	r3, [r7, #4]
    9b5e:	2200      	movs	r2, #0
    9b60:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
    9b64:	7afb      	ldrb	r3, [r7, #11]
}
    9b66:	4618      	mov	r0, r3
    9b68:	3710      	adds	r7, #16
    9b6a:	46bd      	mov	sp, r7
    9b6c:	bd80      	pop	{r7, pc}

00009b6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
    9b6e:	b580      	push	{r7, lr}
    9b70:	b084      	sub	sp, #16
    9b72:	af00      	add	r7, sp, #0
    9b74:	6078      	str	r0, [r7, #4]
    9b76:	460b      	mov	r3, r1
    9b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
    9b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
    9b7e:	2b00      	cmp	r3, #0
    9b80:	da0b      	bge.n	9b9a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    9b82:	78fb      	ldrb	r3, [r7, #3]
    9b84:	f003 0307 	and.w	r3, r3, #7
    9b88:	015b      	lsls	r3, r3, #5
    9b8a:	3328      	adds	r3, #40	; 0x28
    9b8c:	687a      	ldr	r2, [r7, #4]
    9b8e:	4413      	add	r3, r2
    9b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
    9b92:	68fb      	ldr	r3, [r7, #12]
    9b94:	2201      	movs	r2, #1
    9b96:	705a      	strb	r2, [r3, #1]
    9b98:	e00b      	b.n	9bb2 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    9b9a:	78fb      	ldrb	r3, [r7, #3]
    9b9c:	f003 0307 	and.w	r3, r3, #7
    9ba0:	015b      	lsls	r3, r3, #5
    9ba2:	f503 7394 	add.w	r3, r3, #296	; 0x128
    9ba6:	687a      	ldr	r2, [r7, #4]
    9ba8:	4413      	add	r3, r2
    9baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
    9bac:	68fb      	ldr	r3, [r7, #12]
    9bae:	2200      	movs	r2, #0
    9bb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
    9bb2:	78fb      	ldrb	r3, [r7, #3]
    9bb4:	f003 0307 	and.w	r3, r3, #7
    9bb8:	b2da      	uxtb	r2, r3
    9bba:	68fb      	ldr	r3, [r7, #12]
    9bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
    9bbe:	687b      	ldr	r3, [r7, #4]
    9bc0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
    9bc4:	2b01      	cmp	r3, #1
    9bc6:	d101      	bne.n	9bcc <HAL_PCD_EP_Close+0x5e>
    9bc8:	2302      	movs	r3, #2
    9bca:	e00e      	b.n	9bea <HAL_PCD_EP_Close+0x7c>
    9bcc:	687b      	ldr	r3, [r7, #4]
    9bce:	2201      	movs	r2, #1
    9bd0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
    9bd4:	687b      	ldr	r3, [r7, #4]
    9bd6:	681b      	ldr	r3, [r3, #0]
    9bd8:	68f9      	ldr	r1, [r7, #12]
    9bda:	4618      	mov	r0, r3
    9bdc:	f001 ffe4 	bl	bba8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
    9be0:	687b      	ldr	r3, [r7, #4]
    9be2:	2200      	movs	r2, #0
    9be4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
    9be8:	2300      	movs	r3, #0
}
    9bea:	4618      	mov	r0, r3
    9bec:	3710      	adds	r7, #16
    9bee:	46bd      	mov	sp, r7
    9bf0:	bd80      	pop	{r7, pc}

00009bf2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
    9bf2:	b580      	push	{r7, lr}
    9bf4:	b086      	sub	sp, #24
    9bf6:	af00      	add	r7, sp, #0
    9bf8:	60f8      	str	r0, [r7, #12]
    9bfa:	607a      	str	r2, [r7, #4]
    9bfc:	603b      	str	r3, [r7, #0]
    9bfe:	460b      	mov	r3, r1
    9c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    9c02:	7afb      	ldrb	r3, [r7, #11]
    9c04:	f003 0307 	and.w	r3, r3, #7
    9c08:	015b      	lsls	r3, r3, #5
    9c0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
    9c0e:	68fa      	ldr	r2, [r7, #12]
    9c10:	4413      	add	r3, r2
    9c12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
    9c14:	697b      	ldr	r3, [r7, #20]
    9c16:	687a      	ldr	r2, [r7, #4]
    9c18:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
    9c1a:	697b      	ldr	r3, [r7, #20]
    9c1c:	683a      	ldr	r2, [r7, #0]
    9c1e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
    9c20:	697b      	ldr	r3, [r7, #20]
    9c22:	2200      	movs	r2, #0
    9c24:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
    9c26:	697b      	ldr	r3, [r7, #20]
    9c28:	2200      	movs	r2, #0
    9c2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
    9c2c:	7afb      	ldrb	r3, [r7, #11]
    9c2e:	f003 0307 	and.w	r3, r3, #7
    9c32:	b2da      	uxtb	r2, r3
    9c34:	697b      	ldr	r3, [r7, #20]
    9c36:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
    9c38:	7afb      	ldrb	r3, [r7, #11]
    9c3a:	f003 0307 	and.w	r3, r3, #7
    9c3e:	2b00      	cmp	r3, #0
    9c40:	d106      	bne.n	9c50 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
    9c42:	68fb      	ldr	r3, [r7, #12]
    9c44:	681b      	ldr	r3, [r3, #0]
    9c46:	6979      	ldr	r1, [r7, #20]
    9c48:	4618      	mov	r0, r3
    9c4a:	f002 f943 	bl	bed4 <USB_EPStartXfer>
    9c4e:	e005      	b.n	9c5c <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
    9c50:	68fb      	ldr	r3, [r7, #12]
    9c52:	681b      	ldr	r3, [r3, #0]
    9c54:	6979      	ldr	r1, [r7, #20]
    9c56:	4618      	mov	r0, r3
    9c58:	f002 f93c 	bl	bed4 <USB_EPStartXfer>
  }

  return HAL_OK;
    9c5c:	2300      	movs	r3, #0
}
    9c5e:	4618      	mov	r0, r3
    9c60:	3718      	adds	r7, #24
    9c62:	46bd      	mov	sp, r7
    9c64:	bd80      	pop	{r7, pc}

00009c66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
    9c66:	b480      	push	{r7}
    9c68:	b083      	sub	sp, #12
    9c6a:	af00      	add	r7, sp, #0
    9c6c:	6078      	str	r0, [r7, #4]
    9c6e:	460b      	mov	r3, r1
    9c70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
    9c72:	78fb      	ldrb	r3, [r7, #3]
    9c74:	f003 0307 	and.w	r3, r3, #7
    9c78:	687a      	ldr	r2, [r7, #4]
    9c7a:	330a      	adds	r3, #10
    9c7c:	015b      	lsls	r3, r3, #5
    9c7e:	4413      	add	r3, r2
    9c80:	3304      	adds	r3, #4
    9c82:	681b      	ldr	r3, [r3, #0]
}
    9c84:	4618      	mov	r0, r3
    9c86:	370c      	adds	r7, #12
    9c88:	46bd      	mov	sp, r7
    9c8a:	bc80      	pop	{r7}
    9c8c:	4770      	bx	lr

00009c8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
    9c8e:	b580      	push	{r7, lr}
    9c90:	b086      	sub	sp, #24
    9c92:	af00      	add	r7, sp, #0
    9c94:	60f8      	str	r0, [r7, #12]
    9c96:	607a      	str	r2, [r7, #4]
    9c98:	603b      	str	r3, [r7, #0]
    9c9a:	460b      	mov	r3, r1
    9c9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    9c9e:	7afb      	ldrb	r3, [r7, #11]
    9ca0:	f003 0307 	and.w	r3, r3, #7
    9ca4:	015b      	lsls	r3, r3, #5
    9ca6:	3328      	adds	r3, #40	; 0x28
    9ca8:	68fa      	ldr	r2, [r7, #12]
    9caa:	4413      	add	r3, r2
    9cac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
    9cae:	697b      	ldr	r3, [r7, #20]
    9cb0:	687a      	ldr	r2, [r7, #4]
    9cb2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
    9cb4:	697b      	ldr	r3, [r7, #20]
    9cb6:	683a      	ldr	r2, [r7, #0]
    9cb8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
    9cba:	697b      	ldr	r3, [r7, #20]
    9cbc:	2200      	movs	r2, #0
    9cbe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
    9cc0:	697b      	ldr	r3, [r7, #20]
    9cc2:	2201      	movs	r2, #1
    9cc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
    9cc6:	7afb      	ldrb	r3, [r7, #11]
    9cc8:	f003 0307 	and.w	r3, r3, #7
    9ccc:	b2da      	uxtb	r2, r3
    9cce:	697b      	ldr	r3, [r7, #20]
    9cd0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
    9cd2:	7afb      	ldrb	r3, [r7, #11]
    9cd4:	f003 0307 	and.w	r3, r3, #7
    9cd8:	2b00      	cmp	r3, #0
    9cda:	d106      	bne.n	9cea <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
    9cdc:	68fb      	ldr	r3, [r7, #12]
    9cde:	681b      	ldr	r3, [r3, #0]
    9ce0:	6979      	ldr	r1, [r7, #20]
    9ce2:	4618      	mov	r0, r3
    9ce4:	f002 f8f6 	bl	bed4 <USB_EPStartXfer>
    9ce8:	e005      	b.n	9cf6 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
    9cea:	68fb      	ldr	r3, [r7, #12]
    9cec:	681b      	ldr	r3, [r3, #0]
    9cee:	6979      	ldr	r1, [r7, #20]
    9cf0:	4618      	mov	r0, r3
    9cf2:	f002 f8ef 	bl	bed4 <USB_EPStartXfer>
  }

  return HAL_OK;
    9cf6:	2300      	movs	r3, #0
}
    9cf8:	4618      	mov	r0, r3
    9cfa:	3718      	adds	r7, #24
    9cfc:	46bd      	mov	sp, r7
    9cfe:	bd80      	pop	{r7, pc}

00009d00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
    9d00:	b580      	push	{r7, lr}
    9d02:	b084      	sub	sp, #16
    9d04:	af00      	add	r7, sp, #0
    9d06:	6078      	str	r0, [r7, #4]
    9d08:	460b      	mov	r3, r1
    9d0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
    9d0c:	78fb      	ldrb	r3, [r7, #3]
    9d0e:	f003 0207 	and.w	r2, r3, #7
    9d12:	687b      	ldr	r3, [r7, #4]
    9d14:	685b      	ldr	r3, [r3, #4]
    9d16:	429a      	cmp	r2, r3
    9d18:	d901      	bls.n	9d1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
    9d1a:	2301      	movs	r3, #1
    9d1c:	e046      	b.n	9dac <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
    9d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
    9d22:	2b00      	cmp	r3, #0
    9d24:	da0b      	bge.n	9d3e <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    9d26:	78fb      	ldrb	r3, [r7, #3]
    9d28:	f003 0307 	and.w	r3, r3, #7
    9d2c:	015b      	lsls	r3, r3, #5
    9d2e:	3328      	adds	r3, #40	; 0x28
    9d30:	687a      	ldr	r2, [r7, #4]
    9d32:	4413      	add	r3, r2
    9d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
    9d36:	68fb      	ldr	r3, [r7, #12]
    9d38:	2201      	movs	r2, #1
    9d3a:	705a      	strb	r2, [r3, #1]
    9d3c:	e009      	b.n	9d52 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
    9d3e:	78fb      	ldrb	r3, [r7, #3]
    9d40:	015b      	lsls	r3, r3, #5
    9d42:	f503 7394 	add.w	r3, r3, #296	; 0x128
    9d46:	687a      	ldr	r2, [r7, #4]
    9d48:	4413      	add	r3, r2
    9d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
    9d4c:	68fb      	ldr	r3, [r7, #12]
    9d4e:	2200      	movs	r2, #0
    9d50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
    9d52:	68fb      	ldr	r3, [r7, #12]
    9d54:	2201      	movs	r2, #1
    9d56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
    9d58:	78fb      	ldrb	r3, [r7, #3]
    9d5a:	f003 0307 	and.w	r3, r3, #7
    9d5e:	b2da      	uxtb	r2, r3
    9d60:	68fb      	ldr	r3, [r7, #12]
    9d62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
    9d64:	687b      	ldr	r3, [r7, #4]
    9d66:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
    9d6a:	2b01      	cmp	r3, #1
    9d6c:	d101      	bne.n	9d72 <HAL_PCD_EP_SetStall+0x72>
    9d6e:	2302      	movs	r3, #2
    9d70:	e01c      	b.n	9dac <HAL_PCD_EP_SetStall+0xac>
    9d72:	687b      	ldr	r3, [r7, #4]
    9d74:	2201      	movs	r2, #1
    9d76:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
    9d7a:	687b      	ldr	r3, [r7, #4]
    9d7c:	681b      	ldr	r3, [r3, #0]
    9d7e:	68f9      	ldr	r1, [r7, #12]
    9d80:	4618      	mov	r0, r3
    9d82:	f002 fb5f 	bl	c444 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
    9d86:	78fb      	ldrb	r3, [r7, #3]
    9d88:	f003 0307 	and.w	r3, r3, #7
    9d8c:	2b00      	cmp	r3, #0
    9d8e:	d108      	bne.n	9da2 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
    9d90:	687b      	ldr	r3, [r7, #4]
    9d92:	681a      	ldr	r2, [r3, #0]
    9d94:	687b      	ldr	r3, [r7, #4]
    9d96:	f503 730c 	add.w	r3, r3, #560	; 0x230
    9d9a:	4619      	mov	r1, r3
    9d9c:	4610      	mov	r0, r2
    9d9e:	f002 fba7 	bl	c4f0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
    9da2:	687b      	ldr	r3, [r7, #4]
    9da4:	2200      	movs	r2, #0
    9da6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
    9daa:	2300      	movs	r3, #0
}
    9dac:	4618      	mov	r0, r3
    9dae:	3710      	adds	r7, #16
    9db0:	46bd      	mov	sp, r7
    9db2:	bd80      	pop	{r7, pc}

00009db4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
    9db4:	b480      	push	{r7}
    9db6:	b087      	sub	sp, #28
    9db8:	af00      	add	r7, sp, #0
    9dba:	60f8      	str	r0, [r7, #12]
    9dbc:	607b      	str	r3, [r7, #4]
    9dbe:	460b      	mov	r3, r1
    9dc0:	817b      	strh	r3, [r7, #10]
    9dc2:	4613      	mov	r3, r2
    9dc4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
    9dc6:	897b      	ldrh	r3, [r7, #10]
    9dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9dcc:	b29b      	uxth	r3, r3
    9dce:	2b00      	cmp	r3, #0
    9dd0:	d008      	beq.n	9de4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    9dd2:	897b      	ldrh	r3, [r7, #10]
    9dd4:	f003 0307 	and.w	r3, r3, #7
    9dd8:	015b      	lsls	r3, r3, #5
    9dda:	3328      	adds	r3, #40	; 0x28
    9ddc:	68fa      	ldr	r2, [r7, #12]
    9dde:	4413      	add	r3, r2
    9de0:	617b      	str	r3, [r7, #20]
    9de2:	e006      	b.n	9df2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
    9de4:	897b      	ldrh	r3, [r7, #10]
    9de6:	015b      	lsls	r3, r3, #5
    9de8:	f503 7394 	add.w	r3, r3, #296	; 0x128
    9dec:	68fa      	ldr	r2, [r7, #12]
    9dee:	4413      	add	r3, r2
    9df0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
    9df2:	893b      	ldrh	r3, [r7, #8]
    9df4:	2b00      	cmp	r3, #0
    9df6:	d107      	bne.n	9e08 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    9df8:	697b      	ldr	r3, [r7, #20]
    9dfa:	2200      	movs	r2, #0
    9dfc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
    9dfe:	687b      	ldr	r3, [r7, #4]
    9e00:	b29a      	uxth	r2, r3
    9e02:	697b      	ldr	r3, [r7, #20]
    9e04:	80da      	strh	r2, [r3, #6]
    9e06:	e00b      	b.n	9e20 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
    9e08:	697b      	ldr	r3, [r7, #20]
    9e0a:	2201      	movs	r2, #1
    9e0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    9e0e:	687b      	ldr	r3, [r7, #4]
    9e10:	b29a      	uxth	r2, r3
    9e12:	697b      	ldr	r3, [r7, #20]
    9e14:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
    9e16:	687b      	ldr	r3, [r7, #4]
    9e18:	0c1b      	lsrs	r3, r3, #16
    9e1a:	b29a      	uxth	r2, r3
    9e1c:	697b      	ldr	r3, [r7, #20]
    9e1e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
    9e20:	2300      	movs	r3, #0
}
    9e22:	4618      	mov	r0, r3
    9e24:	371c      	adds	r7, #28
    9e26:	46bd      	mov	sp, r7
    9e28:	bc80      	pop	{r7}
    9e2a:	4770      	bx	lr

00009e2c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
    9e2c:	b480      	push	{r7}
    9e2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
    9e30:	4b03      	ldr	r3, [pc, #12]	; (9e40 <HAL_PWR_EnableBkUpAccess+0x14>)
    9e32:	2201      	movs	r2, #1
    9e34:	601a      	str	r2, [r3, #0]
}
    9e36:	bf00      	nop
    9e38:	46bd      	mov	sp, r7
    9e3a:	bc80      	pop	{r7}
    9e3c:	4770      	bx	lr
    9e3e:	bf00      	nop
    9e40:	420e0020 	.word	0x420e0020

00009e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
    9e44:	b580      	push	{r7, lr}
    9e46:	b086      	sub	sp, #24
    9e48:	af00      	add	r7, sp, #0
    9e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
    9e4c:	687b      	ldr	r3, [r7, #4]
    9e4e:	2b00      	cmp	r3, #0
    9e50:	d101      	bne.n	9e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
    9e52:	2301      	movs	r3, #1
    9e54:	e26c      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
    9e56:	687b      	ldr	r3, [r7, #4]
    9e58:	681b      	ldr	r3, [r3, #0]
    9e5a:	f003 0301 	and.w	r3, r3, #1
    9e5e:	2b00      	cmp	r3, #0
    9e60:	f000 8087 	beq.w	9f72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
    9e64:	4b92      	ldr	r3, [pc, #584]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9e66:	685b      	ldr	r3, [r3, #4]
    9e68:	f003 030c 	and.w	r3, r3, #12
    9e6c:	2b04      	cmp	r3, #4
    9e6e:	d00c      	beq.n	9e8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    9e70:	4b8f      	ldr	r3, [pc, #572]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9e72:	685b      	ldr	r3, [r3, #4]
    9e74:	f003 030c 	and.w	r3, r3, #12
    9e78:	2b08      	cmp	r3, #8
    9e7a:	d112      	bne.n	9ea2 <HAL_RCC_OscConfig+0x5e>
    9e7c:	4b8c      	ldr	r3, [pc, #560]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9e7e:	685b      	ldr	r3, [r3, #4]
    9e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    9e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9e88:	d10b      	bne.n	9ea2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    9e8a:	4b89      	ldr	r3, [pc, #548]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9e8c:	681b      	ldr	r3, [r3, #0]
    9e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9e92:	2b00      	cmp	r3, #0
    9e94:	d06c      	beq.n	9f70 <HAL_RCC_OscConfig+0x12c>
    9e96:	687b      	ldr	r3, [r7, #4]
    9e98:	685b      	ldr	r3, [r3, #4]
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d168      	bne.n	9f70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
    9e9e:	2301      	movs	r3, #1
    9ea0:	e246      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
    9ea2:	687b      	ldr	r3, [r7, #4]
    9ea4:	685b      	ldr	r3, [r3, #4]
    9ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9eaa:	d106      	bne.n	9eba <HAL_RCC_OscConfig+0x76>
    9eac:	4b80      	ldr	r3, [pc, #512]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9eae:	681b      	ldr	r3, [r3, #0]
    9eb0:	4a7f      	ldr	r2, [pc, #508]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9eb6:	6013      	str	r3, [r2, #0]
    9eb8:	e02e      	b.n	9f18 <HAL_RCC_OscConfig+0xd4>
    9eba:	687b      	ldr	r3, [r7, #4]
    9ebc:	685b      	ldr	r3, [r3, #4]
    9ebe:	2b00      	cmp	r3, #0
    9ec0:	d10c      	bne.n	9edc <HAL_RCC_OscConfig+0x98>
    9ec2:	4b7b      	ldr	r3, [pc, #492]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9ec4:	681b      	ldr	r3, [r3, #0]
    9ec6:	4a7a      	ldr	r2, [pc, #488]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    9ecc:	6013      	str	r3, [r2, #0]
    9ece:	4b78      	ldr	r3, [pc, #480]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9ed0:	681b      	ldr	r3, [r3, #0]
    9ed2:	4a77      	ldr	r2, [pc, #476]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    9ed8:	6013      	str	r3, [r2, #0]
    9eda:	e01d      	b.n	9f18 <HAL_RCC_OscConfig+0xd4>
    9edc:	687b      	ldr	r3, [r7, #4]
    9ede:	685b      	ldr	r3, [r3, #4]
    9ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    9ee4:	d10c      	bne.n	9f00 <HAL_RCC_OscConfig+0xbc>
    9ee6:	4b72      	ldr	r3, [pc, #456]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9ee8:	681b      	ldr	r3, [r3, #0]
    9eea:	4a71      	ldr	r2, [pc, #452]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    9ef0:	6013      	str	r3, [r2, #0]
    9ef2:	4b6f      	ldr	r3, [pc, #444]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9ef4:	681b      	ldr	r3, [r3, #0]
    9ef6:	4a6e      	ldr	r2, [pc, #440]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9efc:	6013      	str	r3, [r2, #0]
    9efe:	e00b      	b.n	9f18 <HAL_RCC_OscConfig+0xd4>
    9f00:	4b6b      	ldr	r3, [pc, #428]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9f02:	681b      	ldr	r3, [r3, #0]
    9f04:	4a6a      	ldr	r2, [pc, #424]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    9f0a:	6013      	str	r3, [r2, #0]
    9f0c:	4b68      	ldr	r3, [pc, #416]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9f0e:	681b      	ldr	r3, [r3, #0]
    9f10:	4a67      	ldr	r2, [pc, #412]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    9f16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
    9f18:	687b      	ldr	r3, [r7, #4]
    9f1a:	685b      	ldr	r3, [r3, #4]
    9f1c:	2b00      	cmp	r3, #0
    9f1e:	d013      	beq.n	9f48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    9f20:	f7fe f94c 	bl	81bc <HAL_GetTick>
    9f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    9f26:	e008      	b.n	9f3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
    9f28:	f7fe f948 	bl	81bc <HAL_GetTick>
    9f2c:	4602      	mov	r2, r0
    9f2e:	693b      	ldr	r3, [r7, #16]
    9f30:	1ad3      	subs	r3, r2, r3
    9f32:	2b64      	cmp	r3, #100	; 0x64
    9f34:	d901      	bls.n	9f3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
    9f36:	2303      	movs	r3, #3
    9f38:	e1fa      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    9f3a:	4b5d      	ldr	r3, [pc, #372]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9f3c:	681b      	ldr	r3, [r3, #0]
    9f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9f42:	2b00      	cmp	r3, #0
    9f44:	d0f0      	beq.n	9f28 <HAL_RCC_OscConfig+0xe4>
    9f46:	e014      	b.n	9f72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    9f48:	f7fe f938 	bl	81bc <HAL_GetTick>
    9f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    9f4e:	e008      	b.n	9f62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
    9f50:	f7fe f934 	bl	81bc <HAL_GetTick>
    9f54:	4602      	mov	r2, r0
    9f56:	693b      	ldr	r3, [r7, #16]
    9f58:	1ad3      	subs	r3, r2, r3
    9f5a:	2b64      	cmp	r3, #100	; 0x64
    9f5c:	d901      	bls.n	9f62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
    9f5e:	2303      	movs	r3, #3
    9f60:	e1e6      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    9f62:	4b53      	ldr	r3, [pc, #332]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9f64:	681b      	ldr	r3, [r3, #0]
    9f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9f6a:	2b00      	cmp	r3, #0
    9f6c:	d1f0      	bne.n	9f50 <HAL_RCC_OscConfig+0x10c>
    9f6e:	e000      	b.n	9f72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    9f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
    9f72:	687b      	ldr	r3, [r7, #4]
    9f74:	681b      	ldr	r3, [r3, #0]
    9f76:	f003 0302 	and.w	r3, r3, #2
    9f7a:	2b00      	cmp	r3, #0
    9f7c:	d063      	beq.n	a046 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
    9f7e:	4b4c      	ldr	r3, [pc, #304]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9f80:	685b      	ldr	r3, [r3, #4]
    9f82:	f003 030c 	and.w	r3, r3, #12
    9f86:	2b00      	cmp	r3, #0
    9f88:	d00b      	beq.n	9fa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    9f8a:	4b49      	ldr	r3, [pc, #292]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9f8c:	685b      	ldr	r3, [r3, #4]
    9f8e:	f003 030c 	and.w	r3, r3, #12
    9f92:	2b08      	cmp	r3, #8
    9f94:	d11c      	bne.n	9fd0 <HAL_RCC_OscConfig+0x18c>
    9f96:	4b46      	ldr	r3, [pc, #280]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9f98:	685b      	ldr	r3, [r3, #4]
    9f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    9f9e:	2b00      	cmp	r3, #0
    9fa0:	d116      	bne.n	9fd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    9fa2:	4b43      	ldr	r3, [pc, #268]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9fa4:	681b      	ldr	r3, [r3, #0]
    9fa6:	f003 0302 	and.w	r3, r3, #2
    9faa:	2b00      	cmp	r3, #0
    9fac:	d005      	beq.n	9fba <HAL_RCC_OscConfig+0x176>
    9fae:	687b      	ldr	r3, [r7, #4]
    9fb0:	691b      	ldr	r3, [r3, #16]
    9fb2:	2b01      	cmp	r3, #1
    9fb4:	d001      	beq.n	9fba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
    9fb6:	2301      	movs	r3, #1
    9fb8:	e1ba      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    9fba:	4b3d      	ldr	r3, [pc, #244]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9fbc:	681b      	ldr	r3, [r3, #0]
    9fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    9fc2:	687b      	ldr	r3, [r7, #4]
    9fc4:	695b      	ldr	r3, [r3, #20]
    9fc6:	00db      	lsls	r3, r3, #3
    9fc8:	4939      	ldr	r1, [pc, #228]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9fca:	4313      	orrs	r3, r2
    9fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    9fce:	e03a      	b.n	a046 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
    9fd0:	687b      	ldr	r3, [r7, #4]
    9fd2:	691b      	ldr	r3, [r3, #16]
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	d020      	beq.n	a01a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
    9fd8:	4b36      	ldr	r3, [pc, #216]	; (a0b4 <HAL_RCC_OscConfig+0x270>)
    9fda:	2201      	movs	r2, #1
    9fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    9fde:	f7fe f8ed 	bl	81bc <HAL_GetTick>
    9fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    9fe4:	e008      	b.n	9ff8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
    9fe6:	f7fe f8e9 	bl	81bc <HAL_GetTick>
    9fea:	4602      	mov	r2, r0
    9fec:	693b      	ldr	r3, [r7, #16]
    9fee:	1ad3      	subs	r3, r2, r3
    9ff0:	2b02      	cmp	r3, #2
    9ff2:	d901      	bls.n	9ff8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
    9ff4:	2303      	movs	r3, #3
    9ff6:	e19b      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    9ff8:	4b2d      	ldr	r3, [pc, #180]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    9ffa:	681b      	ldr	r3, [r3, #0]
    9ffc:	f003 0302 	and.w	r3, r3, #2
    a000:	2b00      	cmp	r3, #0
    a002:	d0f0      	beq.n	9fe6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    a004:	4b2a      	ldr	r3, [pc, #168]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    a006:	681b      	ldr	r3, [r3, #0]
    a008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    a00c:	687b      	ldr	r3, [r7, #4]
    a00e:	695b      	ldr	r3, [r3, #20]
    a010:	00db      	lsls	r3, r3, #3
    a012:	4927      	ldr	r1, [pc, #156]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    a014:	4313      	orrs	r3, r2
    a016:	600b      	str	r3, [r1, #0]
    a018:	e015      	b.n	a046 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
    a01a:	4b26      	ldr	r3, [pc, #152]	; (a0b4 <HAL_RCC_OscConfig+0x270>)
    a01c:	2200      	movs	r2, #0
    a01e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    a020:	f7fe f8cc 	bl	81bc <HAL_GetTick>
    a024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    a026:	e008      	b.n	a03a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
    a028:	f7fe f8c8 	bl	81bc <HAL_GetTick>
    a02c:	4602      	mov	r2, r0
    a02e:	693b      	ldr	r3, [r7, #16]
    a030:	1ad3      	subs	r3, r2, r3
    a032:	2b02      	cmp	r3, #2
    a034:	d901      	bls.n	a03a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
    a036:	2303      	movs	r3, #3
    a038:	e17a      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    a03a:	4b1d      	ldr	r3, [pc, #116]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    a03c:	681b      	ldr	r3, [r3, #0]
    a03e:	f003 0302 	and.w	r3, r3, #2
    a042:	2b00      	cmp	r3, #0
    a044:	d1f0      	bne.n	a028 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
    a046:	687b      	ldr	r3, [r7, #4]
    a048:	681b      	ldr	r3, [r3, #0]
    a04a:	f003 0308 	and.w	r3, r3, #8
    a04e:	2b00      	cmp	r3, #0
    a050:	d03a      	beq.n	a0c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
    a052:	687b      	ldr	r3, [r7, #4]
    a054:	699b      	ldr	r3, [r3, #24]
    a056:	2b00      	cmp	r3, #0
    a058:	d019      	beq.n	a08e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
    a05a:	4b17      	ldr	r3, [pc, #92]	; (a0b8 <HAL_RCC_OscConfig+0x274>)
    a05c:	2201      	movs	r2, #1
    a05e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
    a060:	f7fe f8ac 	bl	81bc <HAL_GetTick>
    a064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    a066:	e008      	b.n	a07a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
    a068:	f7fe f8a8 	bl	81bc <HAL_GetTick>
    a06c:	4602      	mov	r2, r0
    a06e:	693b      	ldr	r3, [r7, #16]
    a070:	1ad3      	subs	r3, r2, r3
    a072:	2b02      	cmp	r3, #2
    a074:	d901      	bls.n	a07a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
    a076:	2303      	movs	r3, #3
    a078:	e15a      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    a07a:	4b0d      	ldr	r3, [pc, #52]	; (a0b0 <HAL_RCC_OscConfig+0x26c>)
    a07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a07e:	f003 0302 	and.w	r3, r3, #2
    a082:	2b00      	cmp	r3, #0
    a084:	d0f0      	beq.n	a068 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
    a086:	2001      	movs	r0, #1
    a088:	f000 fadc 	bl	a644 <RCC_Delay>
    a08c:	e01c      	b.n	a0c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
    a08e:	4b0a      	ldr	r3, [pc, #40]	; (a0b8 <HAL_RCC_OscConfig+0x274>)
    a090:	2200      	movs	r2, #0
    a092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
    a094:	f7fe f892 	bl	81bc <HAL_GetTick>
    a098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    a09a:	e00f      	b.n	a0bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
    a09c:	f7fe f88e 	bl	81bc <HAL_GetTick>
    a0a0:	4602      	mov	r2, r0
    a0a2:	693b      	ldr	r3, [r7, #16]
    a0a4:	1ad3      	subs	r3, r2, r3
    a0a6:	2b02      	cmp	r3, #2
    a0a8:	d908      	bls.n	a0bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
    a0aa:	2303      	movs	r3, #3
    a0ac:	e140      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
    a0ae:	bf00      	nop
    a0b0:	40021000 	.word	0x40021000
    a0b4:	42420000 	.word	0x42420000
    a0b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    a0bc:	4b9e      	ldr	r3, [pc, #632]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a0c0:	f003 0302 	and.w	r3, r3, #2
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d1e9      	bne.n	a09c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
    a0c8:	687b      	ldr	r3, [r7, #4]
    a0ca:	681b      	ldr	r3, [r3, #0]
    a0cc:	f003 0304 	and.w	r3, r3, #4
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	f000 80a6 	beq.w	a222 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
    a0d6:	2300      	movs	r3, #0
    a0d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
    a0da:	4b97      	ldr	r3, [pc, #604]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a0dc:	69db      	ldr	r3, [r3, #28]
    a0de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    a0e2:	2b00      	cmp	r3, #0
    a0e4:	d10d      	bne.n	a102 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
    a0e6:	4b94      	ldr	r3, [pc, #592]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a0e8:	69db      	ldr	r3, [r3, #28]
    a0ea:	4a93      	ldr	r2, [pc, #588]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a0ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a0f0:	61d3      	str	r3, [r2, #28]
    a0f2:	4b91      	ldr	r3, [pc, #580]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a0f4:	69db      	ldr	r3, [r3, #28]
    a0f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    a0fa:	60bb      	str	r3, [r7, #8]
    a0fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
    a0fe:	2301      	movs	r3, #1
    a100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    a102:	4b8e      	ldr	r3, [pc, #568]	; (a33c <HAL_RCC_OscConfig+0x4f8>)
    a104:	681b      	ldr	r3, [r3, #0]
    a106:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a10a:	2b00      	cmp	r3, #0
    a10c:	d118      	bne.n	a140 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
    a10e:	4b8b      	ldr	r3, [pc, #556]	; (a33c <HAL_RCC_OscConfig+0x4f8>)
    a110:	681b      	ldr	r3, [r3, #0]
    a112:	4a8a      	ldr	r2, [pc, #552]	; (a33c <HAL_RCC_OscConfig+0x4f8>)
    a114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
    a11a:	f7fe f84f 	bl	81bc <HAL_GetTick>
    a11e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    a120:	e008      	b.n	a134 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    a122:	f7fe f84b 	bl	81bc <HAL_GetTick>
    a126:	4602      	mov	r2, r0
    a128:	693b      	ldr	r3, [r7, #16]
    a12a:	1ad3      	subs	r3, r2, r3
    a12c:	2b64      	cmp	r3, #100	; 0x64
    a12e:	d901      	bls.n	a134 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
    a130:	2303      	movs	r3, #3
    a132:	e0fd      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    a134:	4b81      	ldr	r3, [pc, #516]	; (a33c <HAL_RCC_OscConfig+0x4f8>)
    a136:	681b      	ldr	r3, [r3, #0]
    a138:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a13c:	2b00      	cmp	r3, #0
    a13e:	d0f0      	beq.n	a122 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    a140:	687b      	ldr	r3, [r7, #4]
    a142:	68db      	ldr	r3, [r3, #12]
    a144:	2b01      	cmp	r3, #1
    a146:	d106      	bne.n	a156 <HAL_RCC_OscConfig+0x312>
    a148:	4b7b      	ldr	r3, [pc, #492]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a14a:	6a1b      	ldr	r3, [r3, #32]
    a14c:	4a7a      	ldr	r2, [pc, #488]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a14e:	f043 0301 	orr.w	r3, r3, #1
    a152:	6213      	str	r3, [r2, #32]
    a154:	e02d      	b.n	a1b2 <HAL_RCC_OscConfig+0x36e>
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	68db      	ldr	r3, [r3, #12]
    a15a:	2b00      	cmp	r3, #0
    a15c:	d10c      	bne.n	a178 <HAL_RCC_OscConfig+0x334>
    a15e:	4b76      	ldr	r3, [pc, #472]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a160:	6a1b      	ldr	r3, [r3, #32]
    a162:	4a75      	ldr	r2, [pc, #468]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a164:	f023 0301 	bic.w	r3, r3, #1
    a168:	6213      	str	r3, [r2, #32]
    a16a:	4b73      	ldr	r3, [pc, #460]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a16c:	6a1b      	ldr	r3, [r3, #32]
    a16e:	4a72      	ldr	r2, [pc, #456]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a170:	f023 0304 	bic.w	r3, r3, #4
    a174:	6213      	str	r3, [r2, #32]
    a176:	e01c      	b.n	a1b2 <HAL_RCC_OscConfig+0x36e>
    a178:	687b      	ldr	r3, [r7, #4]
    a17a:	68db      	ldr	r3, [r3, #12]
    a17c:	2b05      	cmp	r3, #5
    a17e:	d10c      	bne.n	a19a <HAL_RCC_OscConfig+0x356>
    a180:	4b6d      	ldr	r3, [pc, #436]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a182:	6a1b      	ldr	r3, [r3, #32]
    a184:	4a6c      	ldr	r2, [pc, #432]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a186:	f043 0304 	orr.w	r3, r3, #4
    a18a:	6213      	str	r3, [r2, #32]
    a18c:	4b6a      	ldr	r3, [pc, #424]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a18e:	6a1b      	ldr	r3, [r3, #32]
    a190:	4a69      	ldr	r2, [pc, #420]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a192:	f043 0301 	orr.w	r3, r3, #1
    a196:	6213      	str	r3, [r2, #32]
    a198:	e00b      	b.n	a1b2 <HAL_RCC_OscConfig+0x36e>
    a19a:	4b67      	ldr	r3, [pc, #412]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a19c:	6a1b      	ldr	r3, [r3, #32]
    a19e:	4a66      	ldr	r2, [pc, #408]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a1a0:	f023 0301 	bic.w	r3, r3, #1
    a1a4:	6213      	str	r3, [r2, #32]
    a1a6:	4b64      	ldr	r3, [pc, #400]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a1a8:	6a1b      	ldr	r3, [r3, #32]
    a1aa:	4a63      	ldr	r2, [pc, #396]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a1ac:	f023 0304 	bic.w	r3, r3, #4
    a1b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    a1b2:	687b      	ldr	r3, [r7, #4]
    a1b4:	68db      	ldr	r3, [r3, #12]
    a1b6:	2b00      	cmp	r3, #0
    a1b8:	d015      	beq.n	a1e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    a1ba:	f7fd ffff 	bl	81bc <HAL_GetTick>
    a1be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    a1c0:	e00a      	b.n	a1d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
    a1c2:	f7fd fffb 	bl	81bc <HAL_GetTick>
    a1c6:	4602      	mov	r2, r0
    a1c8:	693b      	ldr	r3, [r7, #16]
    a1ca:	1ad3      	subs	r3, r2, r3
    a1cc:	f241 3288 	movw	r2, #5000	; 0x1388
    a1d0:	4293      	cmp	r3, r2
    a1d2:	d901      	bls.n	a1d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
    a1d4:	2303      	movs	r3, #3
    a1d6:	e0ab      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    a1d8:	4b57      	ldr	r3, [pc, #348]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a1da:	6a1b      	ldr	r3, [r3, #32]
    a1dc:	f003 0302 	and.w	r3, r3, #2
    a1e0:	2b00      	cmp	r3, #0
    a1e2:	d0ee      	beq.n	a1c2 <HAL_RCC_OscConfig+0x37e>
    a1e4:	e014      	b.n	a210 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    a1e6:	f7fd ffe9 	bl	81bc <HAL_GetTick>
    a1ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    a1ec:	e00a      	b.n	a204 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
    a1ee:	f7fd ffe5 	bl	81bc <HAL_GetTick>
    a1f2:	4602      	mov	r2, r0
    a1f4:	693b      	ldr	r3, [r7, #16]
    a1f6:	1ad3      	subs	r3, r2, r3
    a1f8:	f241 3288 	movw	r2, #5000	; 0x1388
    a1fc:	4293      	cmp	r3, r2
    a1fe:	d901      	bls.n	a204 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
    a200:	2303      	movs	r3, #3
    a202:	e095      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    a204:	4b4c      	ldr	r3, [pc, #304]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a206:	6a1b      	ldr	r3, [r3, #32]
    a208:	f003 0302 	and.w	r3, r3, #2
    a20c:	2b00      	cmp	r3, #0
    a20e:	d1ee      	bne.n	a1ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
    a210:	7dfb      	ldrb	r3, [r7, #23]
    a212:	2b01      	cmp	r3, #1
    a214:	d105      	bne.n	a222 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    a216:	4b48      	ldr	r3, [pc, #288]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a218:	69db      	ldr	r3, [r3, #28]
    a21a:	4a47      	ldr	r2, [pc, #284]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a21c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    a220:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
    a222:	687b      	ldr	r3, [r7, #4]
    a224:	69db      	ldr	r3, [r3, #28]
    a226:	2b00      	cmp	r3, #0
    a228:	f000 8081 	beq.w	a32e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    a22c:	4b42      	ldr	r3, [pc, #264]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a22e:	685b      	ldr	r3, [r3, #4]
    a230:	f003 030c 	and.w	r3, r3, #12
    a234:	2b08      	cmp	r3, #8
    a236:	d061      	beq.n	a2fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
    a238:	687b      	ldr	r3, [r7, #4]
    a23a:	69db      	ldr	r3, [r3, #28]
    a23c:	2b02      	cmp	r3, #2
    a23e:	d146      	bne.n	a2ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    a240:	4b3f      	ldr	r3, [pc, #252]	; (a340 <HAL_RCC_OscConfig+0x4fc>)
    a242:	2200      	movs	r2, #0
    a244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    a246:	f7fd ffb9 	bl	81bc <HAL_GetTick>
    a24a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    a24c:	e008      	b.n	a260 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
    a24e:	f7fd ffb5 	bl	81bc <HAL_GetTick>
    a252:	4602      	mov	r2, r0
    a254:	693b      	ldr	r3, [r7, #16]
    a256:	1ad3      	subs	r3, r2, r3
    a258:	2b02      	cmp	r3, #2
    a25a:	d901      	bls.n	a260 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
    a25c:	2303      	movs	r3, #3
    a25e:	e067      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    a260:	4b35      	ldr	r3, [pc, #212]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a262:	681b      	ldr	r3, [r3, #0]
    a264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a268:	2b00      	cmp	r3, #0
    a26a:	d1f0      	bne.n	a24e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
    a26c:	687b      	ldr	r3, [r7, #4]
    a26e:	6a1b      	ldr	r3, [r3, #32]
    a270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    a274:	d108      	bne.n	a288 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
    a276:	4b30      	ldr	r3, [pc, #192]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a278:	685b      	ldr	r3, [r3, #4]
    a27a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
    a27e:	687b      	ldr	r3, [r7, #4]
    a280:	689b      	ldr	r3, [r3, #8]
    a282:	492d      	ldr	r1, [pc, #180]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a284:	4313      	orrs	r3, r2
    a286:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
    a288:	4b2b      	ldr	r3, [pc, #172]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a28a:	685b      	ldr	r3, [r3, #4]
    a28c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
    a290:	687b      	ldr	r3, [r7, #4]
    a292:	6a19      	ldr	r1, [r3, #32]
    a294:	687b      	ldr	r3, [r7, #4]
    a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a298:	430b      	orrs	r3, r1
    a29a:	4927      	ldr	r1, [pc, #156]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a29c:	4313      	orrs	r3, r2
    a29e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
    a2a0:	4b27      	ldr	r3, [pc, #156]	; (a340 <HAL_RCC_OscConfig+0x4fc>)
    a2a2:	2201      	movs	r2, #1
    a2a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    a2a6:	f7fd ff89 	bl	81bc <HAL_GetTick>
    a2aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
    a2ac:	e008      	b.n	a2c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
    a2ae:	f7fd ff85 	bl	81bc <HAL_GetTick>
    a2b2:	4602      	mov	r2, r0
    a2b4:	693b      	ldr	r3, [r7, #16]
    a2b6:	1ad3      	subs	r3, r2, r3
    a2b8:	2b02      	cmp	r3, #2
    a2ba:	d901      	bls.n	a2c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
    a2bc:	2303      	movs	r3, #3
    a2be:	e037      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
    a2c0:	4b1d      	ldr	r3, [pc, #116]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a2c2:	681b      	ldr	r3, [r3, #0]
    a2c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a2c8:	2b00      	cmp	r3, #0
    a2ca:	d0f0      	beq.n	a2ae <HAL_RCC_OscConfig+0x46a>
    a2cc:	e02f      	b.n	a32e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    a2ce:	4b1c      	ldr	r3, [pc, #112]	; (a340 <HAL_RCC_OscConfig+0x4fc>)
    a2d0:	2200      	movs	r2, #0
    a2d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    a2d4:	f7fd ff72 	bl	81bc <HAL_GetTick>
    a2d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    a2da:	e008      	b.n	a2ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
    a2dc:	f7fd ff6e 	bl	81bc <HAL_GetTick>
    a2e0:	4602      	mov	r2, r0
    a2e2:	693b      	ldr	r3, [r7, #16]
    a2e4:	1ad3      	subs	r3, r2, r3
    a2e6:	2b02      	cmp	r3, #2
    a2e8:	d901      	bls.n	a2ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
    a2ea:	2303      	movs	r3, #3
    a2ec:	e020      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    a2ee:	4b12      	ldr	r3, [pc, #72]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a2f0:	681b      	ldr	r3, [r3, #0]
    a2f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d1f0      	bne.n	a2dc <HAL_RCC_OscConfig+0x498>
    a2fa:	e018      	b.n	a32e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
    a2fc:	687b      	ldr	r3, [r7, #4]
    a2fe:	69db      	ldr	r3, [r3, #28]
    a300:	2b01      	cmp	r3, #1
    a302:	d101      	bne.n	a308 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
    a304:	2301      	movs	r3, #1
    a306:	e013      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
    a308:	4b0b      	ldr	r3, [pc, #44]	; (a338 <HAL_RCC_OscConfig+0x4f4>)
    a30a:	685b      	ldr	r3, [r3, #4]
    a30c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
    a30e:	68fb      	ldr	r3, [r7, #12]
    a310:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
    a314:	687b      	ldr	r3, [r7, #4]
    a316:	6a1b      	ldr	r3, [r3, #32]
    a318:	429a      	cmp	r2, r3
    a31a:	d106      	bne.n	a32a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
    a31c:	68fb      	ldr	r3, [r7, #12]
    a31e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
    a322:	687b      	ldr	r3, [r7, #4]
    a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
    a326:	429a      	cmp	r2, r3
    a328:	d001      	beq.n	a32e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
    a32a:	2301      	movs	r3, #1
    a32c:	e000      	b.n	a330 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
    a32e:	2300      	movs	r3, #0
}
    a330:	4618      	mov	r0, r3
    a332:	3718      	adds	r7, #24
    a334:	46bd      	mov	sp, r7
    a336:	bd80      	pop	{r7, pc}
    a338:	40021000 	.word	0x40021000
    a33c:	40007000 	.word	0x40007000
    a340:	42420060 	.word	0x42420060

0000a344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
    a344:	b580      	push	{r7, lr}
    a346:	b084      	sub	sp, #16
    a348:	af00      	add	r7, sp, #0
    a34a:	6078      	str	r0, [r7, #4]
    a34c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
    a34e:	687b      	ldr	r3, [r7, #4]
    a350:	2b00      	cmp	r3, #0
    a352:	d101      	bne.n	a358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
    a354:	2301      	movs	r3, #1
    a356:	e0d0      	b.n	a4fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
    a358:	4b6a      	ldr	r3, [pc, #424]	; (a504 <HAL_RCC_ClockConfig+0x1c0>)
    a35a:	681b      	ldr	r3, [r3, #0]
    a35c:	f003 0307 	and.w	r3, r3, #7
    a360:	683a      	ldr	r2, [r7, #0]
    a362:	429a      	cmp	r2, r3
    a364:	d910      	bls.n	a388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    a366:	4b67      	ldr	r3, [pc, #412]	; (a504 <HAL_RCC_ClockConfig+0x1c0>)
    a368:	681b      	ldr	r3, [r3, #0]
    a36a:	f023 0207 	bic.w	r2, r3, #7
    a36e:	4965      	ldr	r1, [pc, #404]	; (a504 <HAL_RCC_ClockConfig+0x1c0>)
    a370:	683b      	ldr	r3, [r7, #0]
    a372:	4313      	orrs	r3, r2
    a374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
    a376:	4b63      	ldr	r3, [pc, #396]	; (a504 <HAL_RCC_ClockConfig+0x1c0>)
    a378:	681b      	ldr	r3, [r3, #0]
    a37a:	f003 0307 	and.w	r3, r3, #7
    a37e:	683a      	ldr	r2, [r7, #0]
    a380:	429a      	cmp	r2, r3
    a382:	d001      	beq.n	a388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
    a384:	2301      	movs	r3, #1
    a386:	e0b8      	b.n	a4fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
    a388:	687b      	ldr	r3, [r7, #4]
    a38a:	681b      	ldr	r3, [r3, #0]
    a38c:	f003 0302 	and.w	r3, r3, #2
    a390:	2b00      	cmp	r3, #0
    a392:	d020      	beq.n	a3d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    a394:	687b      	ldr	r3, [r7, #4]
    a396:	681b      	ldr	r3, [r3, #0]
    a398:	f003 0304 	and.w	r3, r3, #4
    a39c:	2b00      	cmp	r3, #0
    a39e:	d005      	beq.n	a3ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
    a3a0:	4b59      	ldr	r3, [pc, #356]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a3a2:	685b      	ldr	r3, [r3, #4]
    a3a4:	4a58      	ldr	r2, [pc, #352]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a3a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    a3aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    a3ac:	687b      	ldr	r3, [r7, #4]
    a3ae:	681b      	ldr	r3, [r3, #0]
    a3b0:	f003 0308 	and.w	r3, r3, #8
    a3b4:	2b00      	cmp	r3, #0
    a3b6:	d005      	beq.n	a3c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
    a3b8:	4b53      	ldr	r3, [pc, #332]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a3ba:	685b      	ldr	r3, [r3, #4]
    a3bc:	4a52      	ldr	r2, [pc, #328]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a3be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
    a3c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    a3c4:	4b50      	ldr	r3, [pc, #320]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a3c6:	685b      	ldr	r3, [r3, #4]
    a3c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    a3cc:	687b      	ldr	r3, [r7, #4]
    a3ce:	689b      	ldr	r3, [r3, #8]
    a3d0:	494d      	ldr	r1, [pc, #308]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a3d2:	4313      	orrs	r3, r2
    a3d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    a3d6:	687b      	ldr	r3, [r7, #4]
    a3d8:	681b      	ldr	r3, [r3, #0]
    a3da:	f003 0301 	and.w	r3, r3, #1
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d040      	beq.n	a464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    a3e2:	687b      	ldr	r3, [r7, #4]
    a3e4:	685b      	ldr	r3, [r3, #4]
    a3e6:	2b01      	cmp	r3, #1
    a3e8:	d107      	bne.n	a3fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    a3ea:	4b47      	ldr	r3, [pc, #284]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a3ec:	681b      	ldr	r3, [r3, #0]
    a3ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    a3f2:	2b00      	cmp	r3, #0
    a3f4:	d115      	bne.n	a422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    a3f6:	2301      	movs	r3, #1
    a3f8:	e07f      	b.n	a4fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    a3fa:	687b      	ldr	r3, [r7, #4]
    a3fc:	685b      	ldr	r3, [r3, #4]
    a3fe:	2b02      	cmp	r3, #2
    a400:	d107      	bne.n	a412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    a402:	4b41      	ldr	r3, [pc, #260]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a404:	681b      	ldr	r3, [r3, #0]
    a406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a40a:	2b00      	cmp	r3, #0
    a40c:	d109      	bne.n	a422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    a40e:	2301      	movs	r3, #1
    a410:	e073      	b.n	a4fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    a412:	4b3d      	ldr	r3, [pc, #244]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a414:	681b      	ldr	r3, [r3, #0]
    a416:	f003 0302 	and.w	r3, r3, #2
    a41a:	2b00      	cmp	r3, #0
    a41c:	d101      	bne.n	a422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    a41e:	2301      	movs	r3, #1
    a420:	e06b      	b.n	a4fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    a422:	4b39      	ldr	r3, [pc, #228]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a424:	685b      	ldr	r3, [r3, #4]
    a426:	f023 0203 	bic.w	r2, r3, #3
    a42a:	687b      	ldr	r3, [r7, #4]
    a42c:	685b      	ldr	r3, [r3, #4]
    a42e:	4936      	ldr	r1, [pc, #216]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a430:	4313      	orrs	r3, r2
    a432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    a434:	f7fd fec2 	bl	81bc <HAL_GetTick>
    a438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    a43a:	e00a      	b.n	a452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
    a43c:	f7fd febe 	bl	81bc <HAL_GetTick>
    a440:	4602      	mov	r2, r0
    a442:	68fb      	ldr	r3, [r7, #12]
    a444:	1ad3      	subs	r3, r2, r3
    a446:	f241 3288 	movw	r2, #5000	; 0x1388
    a44a:	4293      	cmp	r3, r2
    a44c:	d901      	bls.n	a452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
    a44e:	2303      	movs	r3, #3
    a450:	e053      	b.n	a4fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    a452:	4b2d      	ldr	r3, [pc, #180]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a454:	685b      	ldr	r3, [r3, #4]
    a456:	f003 020c 	and.w	r2, r3, #12
    a45a:	687b      	ldr	r3, [r7, #4]
    a45c:	685b      	ldr	r3, [r3, #4]
    a45e:	009b      	lsls	r3, r3, #2
    a460:	429a      	cmp	r2, r3
    a462:	d1eb      	bne.n	a43c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
    a464:	4b27      	ldr	r3, [pc, #156]	; (a504 <HAL_RCC_ClockConfig+0x1c0>)
    a466:	681b      	ldr	r3, [r3, #0]
    a468:	f003 0307 	and.w	r3, r3, #7
    a46c:	683a      	ldr	r2, [r7, #0]
    a46e:	429a      	cmp	r2, r3
    a470:	d210      	bcs.n	a494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    a472:	4b24      	ldr	r3, [pc, #144]	; (a504 <HAL_RCC_ClockConfig+0x1c0>)
    a474:	681b      	ldr	r3, [r3, #0]
    a476:	f023 0207 	bic.w	r2, r3, #7
    a47a:	4922      	ldr	r1, [pc, #136]	; (a504 <HAL_RCC_ClockConfig+0x1c0>)
    a47c:	683b      	ldr	r3, [r7, #0]
    a47e:	4313      	orrs	r3, r2
    a480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
    a482:	4b20      	ldr	r3, [pc, #128]	; (a504 <HAL_RCC_ClockConfig+0x1c0>)
    a484:	681b      	ldr	r3, [r3, #0]
    a486:	f003 0307 	and.w	r3, r3, #7
    a48a:	683a      	ldr	r2, [r7, #0]
    a48c:	429a      	cmp	r2, r3
    a48e:	d001      	beq.n	a494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
    a490:	2301      	movs	r3, #1
    a492:	e032      	b.n	a4fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	681b      	ldr	r3, [r3, #0]
    a498:	f003 0304 	and.w	r3, r3, #4
    a49c:	2b00      	cmp	r3, #0
    a49e:	d008      	beq.n	a4b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
    a4a0:	4b19      	ldr	r3, [pc, #100]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a4a2:	685b      	ldr	r3, [r3, #4]
    a4a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
    a4a8:	687b      	ldr	r3, [r7, #4]
    a4aa:	68db      	ldr	r3, [r3, #12]
    a4ac:	4916      	ldr	r1, [pc, #88]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a4ae:	4313      	orrs	r3, r2
    a4b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    a4b2:	687b      	ldr	r3, [r7, #4]
    a4b4:	681b      	ldr	r3, [r3, #0]
    a4b6:	f003 0308 	and.w	r3, r3, #8
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	d009      	beq.n	a4d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
    a4be:	4b12      	ldr	r3, [pc, #72]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a4c0:	685b      	ldr	r3, [r3, #4]
    a4c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
    a4c6:	687b      	ldr	r3, [r7, #4]
    a4c8:	691b      	ldr	r3, [r3, #16]
    a4ca:	00db      	lsls	r3, r3, #3
    a4cc:	490e      	ldr	r1, [pc, #56]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a4ce:	4313      	orrs	r3, r2
    a4d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
    a4d2:	f000 f821 	bl	a518 <HAL_RCC_GetSysClockFreq>
    a4d6:	4601      	mov	r1, r0
    a4d8:	4b0b      	ldr	r3, [pc, #44]	; (a508 <HAL_RCC_ClockConfig+0x1c4>)
    a4da:	685b      	ldr	r3, [r3, #4]
    a4dc:	091b      	lsrs	r3, r3, #4
    a4de:	f003 030f 	and.w	r3, r3, #15
    a4e2:	4a0a      	ldr	r2, [pc, #40]	; (a50c <HAL_RCC_ClockConfig+0x1c8>)
    a4e4:	5cd3      	ldrb	r3, [r2, r3]
    a4e6:	fa21 f303 	lsr.w	r3, r1, r3
    a4ea:	4a09      	ldr	r2, [pc, #36]	; (a510 <HAL_RCC_ClockConfig+0x1cc>)
    a4ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
    a4ee:	4b09      	ldr	r3, [pc, #36]	; (a514 <HAL_RCC_ClockConfig+0x1d0>)
    a4f0:	681b      	ldr	r3, [r3, #0]
    a4f2:	4618      	mov	r0, r3
    a4f4:	f7fd fe32 	bl	815c <HAL_InitTick>

  return HAL_OK;
    a4f8:	2300      	movs	r3, #0
}
    a4fa:	4618      	mov	r0, r3
    a4fc:	3710      	adds	r7, #16
    a4fe:	46bd      	mov	sp, r7
    a500:	bd80      	pop	{r7, pc}
    a502:	bf00      	nop
    a504:	40022000 	.word	0x40022000
    a508:	40021000 	.word	0x40021000
    a50c:	00014e1c 	.word	0x00014e1c
    a510:	000256f0 	.word	0x000256f0
    a514:	000251b4 	.word	0x000251b4

0000a518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
    a518:	b490      	push	{r4, r7}
    a51a:	b08a      	sub	sp, #40	; 0x28
    a51c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
    a51e:	4b2a      	ldr	r3, [pc, #168]	; (a5c8 <HAL_RCC_GetSysClockFreq+0xb0>)
    a520:	1d3c      	adds	r4, r7, #4
    a522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
    a528:	4b28      	ldr	r3, [pc, #160]	; (a5cc <HAL_RCC_GetSysClockFreq+0xb4>)
    a52a:	881b      	ldrh	r3, [r3, #0]
    a52c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
    a52e:	2300      	movs	r3, #0
    a530:	61fb      	str	r3, [r7, #28]
    a532:	2300      	movs	r3, #0
    a534:	61bb      	str	r3, [r7, #24]
    a536:	2300      	movs	r3, #0
    a538:	627b      	str	r3, [r7, #36]	; 0x24
    a53a:	2300      	movs	r3, #0
    a53c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
    a53e:	2300      	movs	r3, #0
    a540:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
    a542:	4b23      	ldr	r3, [pc, #140]	; (a5d0 <HAL_RCC_GetSysClockFreq+0xb8>)
    a544:	685b      	ldr	r3, [r3, #4]
    a546:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
    a548:	69fb      	ldr	r3, [r7, #28]
    a54a:	f003 030c 	and.w	r3, r3, #12
    a54e:	2b04      	cmp	r3, #4
    a550:	d002      	beq.n	a558 <HAL_RCC_GetSysClockFreq+0x40>
    a552:	2b08      	cmp	r3, #8
    a554:	d003      	beq.n	a55e <HAL_RCC_GetSysClockFreq+0x46>
    a556:	e02d      	b.n	a5b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
    a558:	4b1e      	ldr	r3, [pc, #120]	; (a5d4 <HAL_RCC_GetSysClockFreq+0xbc>)
    a55a:	623b      	str	r3, [r7, #32]
      break;
    a55c:	e02d      	b.n	a5ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
    a55e:	69fb      	ldr	r3, [r7, #28]
    a560:	0c9b      	lsrs	r3, r3, #18
    a562:	f003 030f 	and.w	r3, r3, #15
    a566:	f107 0228 	add.w	r2, r7, #40	; 0x28
    a56a:	4413      	add	r3, r2
    a56c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    a570:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
    a572:	69fb      	ldr	r3, [r7, #28]
    a574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    a578:	2b00      	cmp	r3, #0
    a57a:	d013      	beq.n	a5a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
    a57c:	4b14      	ldr	r3, [pc, #80]	; (a5d0 <HAL_RCC_GetSysClockFreq+0xb8>)
    a57e:	685b      	ldr	r3, [r3, #4]
    a580:	0c5b      	lsrs	r3, r3, #17
    a582:	f003 0301 	and.w	r3, r3, #1
    a586:	f107 0228 	add.w	r2, r7, #40	; 0x28
    a58a:	4413      	add	r3, r2
    a58c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    a590:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
    a592:	697b      	ldr	r3, [r7, #20]
    a594:	4a0f      	ldr	r2, [pc, #60]	; (a5d4 <HAL_RCC_GetSysClockFreq+0xbc>)
    a596:	fb02 f203 	mul.w	r2, r2, r3
    a59a:	69bb      	ldr	r3, [r7, #24]
    a59c:	fbb2 f3f3 	udiv	r3, r2, r3
    a5a0:	627b      	str	r3, [r7, #36]	; 0x24
    a5a2:	e004      	b.n	a5ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
    a5a4:	697b      	ldr	r3, [r7, #20]
    a5a6:	4a0c      	ldr	r2, [pc, #48]	; (a5d8 <HAL_RCC_GetSysClockFreq+0xc0>)
    a5a8:	fb02 f303 	mul.w	r3, r2, r3
    a5ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
    a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a5b0:	623b      	str	r3, [r7, #32]
      break;
    a5b2:	e002      	b.n	a5ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
    a5b4:	4b09      	ldr	r3, [pc, #36]	; (a5dc <HAL_RCC_GetSysClockFreq+0xc4>)
    a5b6:	623b      	str	r3, [r7, #32]
      break;
    a5b8:	bf00      	nop
    }
  }
  return sysclockfreq;
    a5ba:	6a3b      	ldr	r3, [r7, #32]
}
    a5bc:	4618      	mov	r0, r3
    a5be:	3728      	adds	r7, #40	; 0x28
    a5c0:	46bd      	mov	sp, r7
    a5c2:	bc90      	pop	{r4, r7}
    a5c4:	4770      	bx	lr
    a5c6:	bf00      	nop
    a5c8:	00014450 	.word	0x00014450
    a5cc:	00014460 	.word	0x00014460
    a5d0:	40021000 	.word	0x40021000
    a5d4:	00f42400 	.word	0x00f42400
    a5d8:	003d0900 	.word	0x003d0900
    a5dc:	007a1200 	.word	0x007a1200

0000a5e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
    a5e0:	b480      	push	{r7}
    a5e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
    a5e4:	4b02      	ldr	r3, [pc, #8]	; (a5f0 <HAL_RCC_GetHCLKFreq+0x10>)
    a5e6:	681b      	ldr	r3, [r3, #0]
}
    a5e8:	4618      	mov	r0, r3
    a5ea:	46bd      	mov	sp, r7
    a5ec:	bc80      	pop	{r7}
    a5ee:	4770      	bx	lr
    a5f0:	000256f0 	.word	0x000256f0

0000a5f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
    a5f4:	b580      	push	{r7, lr}
    a5f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
    a5f8:	f7ff fff2 	bl	a5e0 <HAL_RCC_GetHCLKFreq>
    a5fc:	4601      	mov	r1, r0
    a5fe:	4b05      	ldr	r3, [pc, #20]	; (a614 <HAL_RCC_GetPCLK1Freq+0x20>)
    a600:	685b      	ldr	r3, [r3, #4]
    a602:	0a1b      	lsrs	r3, r3, #8
    a604:	f003 0307 	and.w	r3, r3, #7
    a608:	4a03      	ldr	r2, [pc, #12]	; (a618 <HAL_RCC_GetPCLK1Freq+0x24>)
    a60a:	5cd3      	ldrb	r3, [r2, r3]
    a60c:	fa21 f303 	lsr.w	r3, r1, r3
}
    a610:	4618      	mov	r0, r3
    a612:	bd80      	pop	{r7, pc}
    a614:	40021000 	.word	0x40021000
    a618:	00014e2c 	.word	0x00014e2c

0000a61c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
    a61c:	b580      	push	{r7, lr}
    a61e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
    a620:	f7ff ffde 	bl	a5e0 <HAL_RCC_GetHCLKFreq>
    a624:	4601      	mov	r1, r0
    a626:	4b05      	ldr	r3, [pc, #20]	; (a63c <HAL_RCC_GetPCLK2Freq+0x20>)
    a628:	685b      	ldr	r3, [r3, #4]
    a62a:	0adb      	lsrs	r3, r3, #11
    a62c:	f003 0307 	and.w	r3, r3, #7
    a630:	4a03      	ldr	r2, [pc, #12]	; (a640 <HAL_RCC_GetPCLK2Freq+0x24>)
    a632:	5cd3      	ldrb	r3, [r2, r3]
    a634:	fa21 f303 	lsr.w	r3, r1, r3
}
    a638:	4618      	mov	r0, r3
    a63a:	bd80      	pop	{r7, pc}
    a63c:	40021000 	.word	0x40021000
    a640:	00014e2c 	.word	0x00014e2c

0000a644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
    a644:	b480      	push	{r7}
    a646:	b085      	sub	sp, #20
    a648:	af00      	add	r7, sp, #0
    a64a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
    a64c:	4b0a      	ldr	r3, [pc, #40]	; (a678 <RCC_Delay+0x34>)
    a64e:	681b      	ldr	r3, [r3, #0]
    a650:	4a0a      	ldr	r2, [pc, #40]	; (a67c <RCC_Delay+0x38>)
    a652:	fba2 2303 	umull	r2, r3, r2, r3
    a656:	0a5b      	lsrs	r3, r3, #9
    a658:	687a      	ldr	r2, [r7, #4]
    a65a:	fb02 f303 	mul.w	r3, r2, r3
    a65e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
    a660:	bf00      	nop
  }
  while (Delay --);
    a662:	68fb      	ldr	r3, [r7, #12]
    a664:	1e5a      	subs	r2, r3, #1
    a666:	60fa      	str	r2, [r7, #12]
    a668:	2b00      	cmp	r3, #0
    a66a:	d1f9      	bne.n	a660 <RCC_Delay+0x1c>
}
    a66c:	bf00      	nop
    a66e:	3714      	adds	r7, #20
    a670:	46bd      	mov	sp, r7
    a672:	bc80      	pop	{r7}
    a674:	4770      	bx	lr
    a676:	bf00      	nop
    a678:	000256f0 	.word	0x000256f0
    a67c:	10624dd3 	.word	0x10624dd3

0000a680 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
    a680:	b580      	push	{r7, lr}
    a682:	b086      	sub	sp, #24
    a684:	af00      	add	r7, sp, #0
    a686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
    a688:	2300      	movs	r3, #0
    a68a:	613b      	str	r3, [r7, #16]
    a68c:	2300      	movs	r3, #0
    a68e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
    a690:	687b      	ldr	r3, [r7, #4]
    a692:	681b      	ldr	r3, [r3, #0]
    a694:	f003 0301 	and.w	r3, r3, #1
    a698:	2b00      	cmp	r3, #0
    a69a:	d07d      	beq.n	a798 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
    a69c:	2300      	movs	r3, #0
    a69e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
    a6a0:	4b4f      	ldr	r3, [pc, #316]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a6a2:	69db      	ldr	r3, [r3, #28]
    a6a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    a6a8:	2b00      	cmp	r3, #0
    a6aa:	d10d      	bne.n	a6c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
    a6ac:	4b4c      	ldr	r3, [pc, #304]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a6ae:	69db      	ldr	r3, [r3, #28]
    a6b0:	4a4b      	ldr	r2, [pc, #300]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a6b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a6b6:	61d3      	str	r3, [r2, #28]
    a6b8:	4b49      	ldr	r3, [pc, #292]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a6ba:	69db      	ldr	r3, [r3, #28]
    a6bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    a6c0:	60bb      	str	r3, [r7, #8]
    a6c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
    a6c4:	2301      	movs	r3, #1
    a6c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    a6c8:	4b46      	ldr	r3, [pc, #280]	; (a7e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
    a6ca:	681b      	ldr	r3, [r3, #0]
    a6cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d118      	bne.n	a706 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
    a6d4:	4b43      	ldr	r3, [pc, #268]	; (a7e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
    a6d6:	681b      	ldr	r3, [r3, #0]
    a6d8:	4a42      	ldr	r2, [pc, #264]	; (a7e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
    a6da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a6de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
    a6e0:	f7fd fd6c 	bl	81bc <HAL_GetTick>
    a6e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    a6e6:	e008      	b.n	a6fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    a6e8:	f7fd fd68 	bl	81bc <HAL_GetTick>
    a6ec:	4602      	mov	r2, r0
    a6ee:	693b      	ldr	r3, [r7, #16]
    a6f0:	1ad3      	subs	r3, r2, r3
    a6f2:	2b64      	cmp	r3, #100	; 0x64
    a6f4:	d901      	bls.n	a6fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
    a6f6:	2303      	movs	r3, #3
    a6f8:	e06d      	b.n	a7d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    a6fa:	4b3a      	ldr	r3, [pc, #232]	; (a7e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
    a6fc:	681b      	ldr	r3, [r3, #0]
    a6fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a702:	2b00      	cmp	r3, #0
    a704:	d0f0      	beq.n	a6e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    a706:	4b36      	ldr	r3, [pc, #216]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a708:	6a1b      	ldr	r3, [r3, #32]
    a70a:	f403 7340 	and.w	r3, r3, #768	; 0x300
    a70e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    a710:	68fb      	ldr	r3, [r7, #12]
    a712:	2b00      	cmp	r3, #0
    a714:	d02e      	beq.n	a774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    a716:	687b      	ldr	r3, [r7, #4]
    a718:	685b      	ldr	r3, [r3, #4]
    a71a:	f403 7340 	and.w	r3, r3, #768	; 0x300
    a71e:	68fa      	ldr	r2, [r7, #12]
    a720:	429a      	cmp	r2, r3
    a722:	d027      	beq.n	a774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
    a724:	4b2e      	ldr	r3, [pc, #184]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a726:	6a1b      	ldr	r3, [r3, #32]
    a728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    a72c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
    a72e:	4b2e      	ldr	r3, [pc, #184]	; (a7e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
    a730:	2201      	movs	r2, #1
    a732:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
    a734:	4b2c      	ldr	r3, [pc, #176]	; (a7e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
    a736:	2200      	movs	r2, #0
    a738:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    a73a:	4a29      	ldr	r2, [pc, #164]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a73c:	68fb      	ldr	r3, [r7, #12]
    a73e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
    a740:	68fb      	ldr	r3, [r7, #12]
    a742:	f003 0301 	and.w	r3, r3, #1
    a746:	2b00      	cmp	r3, #0
    a748:	d014      	beq.n	a774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    a74a:	f7fd fd37 	bl	81bc <HAL_GetTick>
    a74e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    a750:	e00a      	b.n	a768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
    a752:	f7fd fd33 	bl	81bc <HAL_GetTick>
    a756:	4602      	mov	r2, r0
    a758:	693b      	ldr	r3, [r7, #16]
    a75a:	1ad3      	subs	r3, r2, r3
    a75c:	f241 3288 	movw	r2, #5000	; 0x1388
    a760:	4293      	cmp	r3, r2
    a762:	d901      	bls.n	a768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
    a764:	2303      	movs	r3, #3
    a766:	e036      	b.n	a7d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    a768:	4b1d      	ldr	r3, [pc, #116]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a76a:	6a1b      	ldr	r3, [r3, #32]
    a76c:	f003 0302 	and.w	r3, r3, #2
    a770:	2b00      	cmp	r3, #0
    a772:	d0ee      	beq.n	a752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    a774:	4b1a      	ldr	r3, [pc, #104]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a776:	6a1b      	ldr	r3, [r3, #32]
    a778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	685b      	ldr	r3, [r3, #4]
    a780:	4917      	ldr	r1, [pc, #92]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a782:	4313      	orrs	r3, r2
    a784:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
    a786:	7dfb      	ldrb	r3, [r7, #23]
    a788:	2b01      	cmp	r3, #1
    a78a:	d105      	bne.n	a798 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    a78c:	4b14      	ldr	r3, [pc, #80]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a78e:	69db      	ldr	r3, [r3, #28]
    a790:	4a13      	ldr	r2, [pc, #76]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    a796:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
    a798:	687b      	ldr	r3, [r7, #4]
    a79a:	681b      	ldr	r3, [r3, #0]
    a79c:	f003 0302 	and.w	r3, r3, #2
    a7a0:	2b00      	cmp	r3, #0
    a7a2:	d008      	beq.n	a7b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
    a7a4:	4b0e      	ldr	r3, [pc, #56]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a7a6:	685b      	ldr	r3, [r3, #4]
    a7a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
    a7ac:	687b      	ldr	r3, [r7, #4]
    a7ae:	689b      	ldr	r3, [r3, #8]
    a7b0:	490b      	ldr	r1, [pc, #44]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a7b2:	4313      	orrs	r3, r2
    a7b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
    a7b6:	687b      	ldr	r3, [r7, #4]
    a7b8:	681b      	ldr	r3, [r3, #0]
    a7ba:	f003 0310 	and.w	r3, r3, #16
    a7be:	2b00      	cmp	r3, #0
    a7c0:	d008      	beq.n	a7d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
    a7c2:	4b07      	ldr	r3, [pc, #28]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a7c4:	685b      	ldr	r3, [r3, #4]
    a7c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    a7ca:	687b      	ldr	r3, [r7, #4]
    a7cc:	68db      	ldr	r3, [r3, #12]
    a7ce:	4904      	ldr	r1, [pc, #16]	; (a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    a7d0:	4313      	orrs	r3, r2
    a7d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
    a7d4:	2300      	movs	r3, #0
}
    a7d6:	4618      	mov	r0, r3
    a7d8:	3718      	adds	r7, #24
    a7da:	46bd      	mov	sp, r7
    a7dc:	bd80      	pop	{r7, pc}
    a7de:	bf00      	nop
    a7e0:	40021000 	.word	0x40021000
    a7e4:	40007000 	.word	0x40007000
    a7e8:	42420440 	.word	0x42420440

0000a7ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
    a7ec:	b590      	push	{r4, r7, lr}
    a7ee:	b08d      	sub	sp, #52	; 0x34
    a7f0:	af00      	add	r7, sp, #0
    a7f2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
    a7f4:	4b55      	ldr	r3, [pc, #340]	; (a94c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
    a7f6:	f107 040c 	add.w	r4, r7, #12
    a7fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a7fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
    a800:	4b53      	ldr	r3, [pc, #332]	; (a950 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
    a802:	881b      	ldrh	r3, [r3, #0]
    a804:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
    a806:	2300      	movs	r3, #0
    a808:	627b      	str	r3, [r7, #36]	; 0x24
    a80a:	2300      	movs	r3, #0
    a80c:	62fb      	str	r3, [r7, #44]	; 0x2c
    a80e:	2300      	movs	r3, #0
    a810:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
    a812:	2300      	movs	r3, #0
    a814:	61fb      	str	r3, [r7, #28]
    a816:	2300      	movs	r3, #0
    a818:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
    a81a:	687b      	ldr	r3, [r7, #4]
    a81c:	2b02      	cmp	r3, #2
    a81e:	d07e      	beq.n	a91e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
    a820:	2b10      	cmp	r3, #16
    a822:	d002      	beq.n	a82a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
    a824:	2b01      	cmp	r3, #1
    a826:	d048      	beq.n	a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
    a828:	e08a      	b.n	a940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      temp_reg = RCC->CFGR;
    a82a:	4b4a      	ldr	r3, [pc, #296]	; (a954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
    a82c:	685b      	ldr	r3, [r3, #4]
    a82e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
    a830:	4b48      	ldr	r3, [pc, #288]	; (a954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
    a832:	681b      	ldr	r3, [r3, #0]
    a834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a838:	2b00      	cmp	r3, #0
    a83a:	d07e      	beq.n	a93a <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
    a83c:	69fb      	ldr	r3, [r7, #28]
    a83e:	0c9b      	lsrs	r3, r3, #18
    a840:	f003 030f 	and.w	r3, r3, #15
    a844:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a848:	4413      	add	r3, r2
    a84a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    a84e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
    a850:	69fb      	ldr	r3, [r7, #28]
    a852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    a856:	2b00      	cmp	r3, #0
    a858:	d018      	beq.n	a88c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
    a85a:	4b3e      	ldr	r3, [pc, #248]	; (a954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
    a85c:	685b      	ldr	r3, [r3, #4]
    a85e:	0c5b      	lsrs	r3, r3, #17
    a860:	f003 0301 	and.w	r3, r3, #1
    a864:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a868:	4413      	add	r3, r2
    a86a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    a86e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
    a870:	69fb      	ldr	r3, [r7, #28]
    a872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    a876:	2b00      	cmp	r3, #0
    a878:	d00d      	beq.n	a896 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
    a87a:	4a37      	ldr	r2, [pc, #220]	; (a958 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
    a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a87e:	fbb2 f2f3 	udiv	r2, r2, r3
    a882:	6a3b      	ldr	r3, [r7, #32]
    a884:	fb02 f303 	mul.w	r3, r2, r3
    a888:	62fb      	str	r3, [r7, #44]	; 0x2c
    a88a:	e004      	b.n	a896 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
    a88c:	6a3b      	ldr	r3, [r7, #32]
    a88e:	4a33      	ldr	r2, [pc, #204]	; (a95c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
    a890:	fb02 f303 	mul.w	r3, r2, r3
    a894:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
    a896:	4b2f      	ldr	r3, [pc, #188]	; (a954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
    a898:	685b      	ldr	r3, [r3, #4]
    a89a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    a89e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    a8a2:	d102      	bne.n	a8aa <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
    a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a8a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
    a8a8:	e047      	b.n	a93a <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          frequency = (pllclk * 2) / 3;
    a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a8ac:	005b      	lsls	r3, r3, #1
    a8ae:	4a2c      	ldr	r2, [pc, #176]	; (a960 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
    a8b0:	fba2 2303 	umull	r2, r3, r2, r3
    a8b4:	085b      	lsrs	r3, r3, #1
    a8b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
    a8b8:	e03f      	b.n	a93a <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
      temp_reg = RCC->BDCR;
    a8ba:	4b26      	ldr	r3, [pc, #152]	; (a954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
    a8bc:	6a1b      	ldr	r3, [r3, #32]
    a8be:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
    a8c0:	69fb      	ldr	r3, [r7, #28]
    a8c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
    a8c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a8ca:	d108      	bne.n	a8de <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    a8cc:	69fb      	ldr	r3, [r7, #28]
    a8ce:	f003 0302 	and.w	r3, r3, #2
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	d003      	beq.n	a8de <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
    a8d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    a8da:	62bb      	str	r3, [r7, #40]	; 0x28
    a8dc:	e01e      	b.n	a91c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
    a8de:	69fb      	ldr	r3, [r7, #28]
    a8e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
    a8e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a8e8:	d109      	bne.n	a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    a8ea:	4b1a      	ldr	r3, [pc, #104]	; (a954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
    a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a8ee:	f003 0302 	and.w	r3, r3, #2
    a8f2:	2b00      	cmp	r3, #0
    a8f4:	d003      	beq.n	a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
    a8f6:	f649 4340 	movw	r3, #40000	; 0x9c40
    a8fa:	62bb      	str	r3, [r7, #40]	; 0x28
    a8fc:	e00e      	b.n	a91c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
    a8fe:	69fb      	ldr	r3, [r7, #28]
    a900:	f403 7340 	and.w	r3, r3, #768	; 0x300
    a904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    a908:	d119      	bne.n	a93e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
    a90a:	4b12      	ldr	r3, [pc, #72]	; (a954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
    a90c:	681b      	ldr	r3, [r3, #0]
    a90e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    a912:	2b00      	cmp	r3, #0
    a914:	d013      	beq.n	a93e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        frequency = HSE_VALUE / 128U;
    a916:	4b13      	ldr	r3, [pc, #76]	; (a964 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
    a918:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
    a91a:	e010      	b.n	a93e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
    a91c:	e00f      	b.n	a93e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
    a91e:	f7ff fe7d 	bl	a61c <HAL_RCC_GetPCLK2Freq>
    a922:	4602      	mov	r2, r0
    a924:	4b0b      	ldr	r3, [pc, #44]	; (a954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
    a926:	685b      	ldr	r3, [r3, #4]
    a928:	0b9b      	lsrs	r3, r3, #14
    a92a:	f003 0303 	and.w	r3, r3, #3
    a92e:	3301      	adds	r3, #1
    a930:	005b      	lsls	r3, r3, #1
    a932:	fbb2 f3f3 	udiv	r3, r2, r3
    a936:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
    a938:	e002      	b.n	a940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      break;
    a93a:	bf00      	nop
    a93c:	e000      	b.n	a940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      break;
    a93e:	bf00      	nop
    }
  }
  return (frequency);
    a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    a942:	4618      	mov	r0, r3
    a944:	3734      	adds	r7, #52	; 0x34
    a946:	46bd      	mov	sp, r7
    a948:	bd90      	pop	{r4, r7, pc}
    a94a:	bf00      	nop
    a94c:	00014464 	.word	0x00014464
    a950:	00014474 	.word	0x00014474
    a954:	40021000 	.word	0x40021000
    a958:	00f42400 	.word	0x00f42400
    a95c:	003d0900 	.word	0x003d0900
    a960:	aaaaaaab 	.word	0xaaaaaaab
    a964:	0001e848 	.word	0x0001e848

0000a968 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
    a968:	b580      	push	{r7, lr}
    a96a:	b084      	sub	sp, #16
    a96c:	af00      	add	r7, sp, #0
    a96e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
    a970:	2300      	movs	r3, #0
    a972:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
    a974:	687b      	ldr	r3, [r7, #4]
    a976:	2b00      	cmp	r3, #0
    a978:	d101      	bne.n	a97e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
    a97a:	2301      	movs	r3, #1
    a97c:	e084      	b.n	aa88 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
    a97e:	687b      	ldr	r3, [r7, #4]
    a980:	7c5b      	ldrb	r3, [r3, #17]
    a982:	b2db      	uxtb	r3, r3
    a984:	2b00      	cmp	r3, #0
    a986:	d105      	bne.n	a994 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	2200      	movs	r2, #0
    a98c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
    a98e:	6878      	ldr	r0, [r7, #4]
    a990:	f003 facc 	bl	df2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
    a994:	687b      	ldr	r3, [r7, #4]
    a996:	2202      	movs	r2, #2
    a998:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
    a99a:	6878      	ldr	r0, [r7, #4]
    a99c:	f000 faa0 	bl	aee0 <HAL_RTC_WaitForSynchro>
    a9a0:	4603      	mov	r3, r0
    a9a2:	2b00      	cmp	r3, #0
    a9a4:	d004      	beq.n	a9b0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
    a9a6:	687b      	ldr	r3, [r7, #4]
    a9a8:	2204      	movs	r2, #4
    a9aa:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
    a9ac:	2301      	movs	r3, #1
    a9ae:	e06b      	b.n	aa88 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
    a9b0:	6878      	ldr	r0, [r7, #4]
    a9b2:	f000 fb59 	bl	b068 <RTC_EnterInitMode>
    a9b6:	4603      	mov	r3, r0
    a9b8:	2b00      	cmp	r3, #0
    a9ba:	d004      	beq.n	a9c6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
    a9bc:	687b      	ldr	r3, [r7, #4]
    a9be:	2204      	movs	r2, #4
    a9c0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
    a9c2:	2301      	movs	r3, #1
    a9c4:	e060      	b.n	aa88 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
    a9c6:	687b      	ldr	r3, [r7, #4]
    a9c8:	681b      	ldr	r3, [r3, #0]
    a9ca:	685a      	ldr	r2, [r3, #4]
    a9cc:	687b      	ldr	r3, [r7, #4]
    a9ce:	681b      	ldr	r3, [r3, #0]
    a9d0:	f022 0207 	bic.w	r2, r2, #7
    a9d4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
    a9d6:	687b      	ldr	r3, [r7, #4]
    a9d8:	689b      	ldr	r3, [r3, #8]
    a9da:	2b00      	cmp	r3, #0
    a9dc:	d005      	beq.n	a9ea <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
    a9de:	4b2c      	ldr	r3, [pc, #176]	; (aa90 <HAL_RTC_Init+0x128>)
    a9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a9e2:	4a2b      	ldr	r2, [pc, #172]	; (aa90 <HAL_RTC_Init+0x128>)
    a9e4:	f023 0301 	bic.w	r3, r3, #1
    a9e8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
    a9ea:	4b29      	ldr	r3, [pc, #164]	; (aa90 <HAL_RTC_Init+0x128>)
    a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a9ee:	f423 7260 	bic.w	r2, r3, #896	; 0x380
    a9f2:	687b      	ldr	r3, [r7, #4]
    a9f4:	689b      	ldr	r3, [r3, #8]
    a9f6:	4926      	ldr	r1, [pc, #152]	; (aa90 <HAL_RTC_Init+0x128>)
    a9f8:	4313      	orrs	r3, r2
    a9fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
    a9fc:	687b      	ldr	r3, [r7, #4]
    a9fe:	685b      	ldr	r3, [r3, #4]
    aa00:	f1b3 3fff 	cmp.w	r3, #4294967295
    aa04:	d003      	beq.n	aa0e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
    aa06:	687b      	ldr	r3, [r7, #4]
    aa08:	685b      	ldr	r3, [r3, #4]
    aa0a:	60fb      	str	r3, [r7, #12]
    aa0c:	e00e      	b.n	aa2c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
    aa0e:	2001      	movs	r0, #1
    aa10:	f7ff feec 	bl	a7ec <HAL_RCCEx_GetPeriphCLKFreq>
    aa14:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
    aa16:	68fb      	ldr	r3, [r7, #12]
    aa18:	2b00      	cmp	r3, #0
    aa1a:	d104      	bne.n	aa26 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
    aa1c:	687b      	ldr	r3, [r7, #4]
    aa1e:	2204      	movs	r2, #4
    aa20:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
    aa22:	2301      	movs	r3, #1
    aa24:	e030      	b.n	aa88 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
    aa26:	68fb      	ldr	r3, [r7, #12]
    aa28:	3b01      	subs	r3, #1
    aa2a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
    aa2c:	687b      	ldr	r3, [r7, #4]
    aa2e:	681b      	ldr	r3, [r3, #0]
    aa30:	689b      	ldr	r3, [r3, #8]
    aa32:	f023 010f 	bic.w	r1, r3, #15
    aa36:	68fb      	ldr	r3, [r7, #12]
    aa38:	0c1a      	lsrs	r2, r3, #16
    aa3a:	687b      	ldr	r3, [r7, #4]
    aa3c:	681b      	ldr	r3, [r3, #0]
    aa3e:	430a      	orrs	r2, r1
    aa40:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
    aa42:	687b      	ldr	r3, [r7, #4]
    aa44:	681b      	ldr	r3, [r3, #0]
    aa46:	68db      	ldr	r3, [r3, #12]
    aa48:	0c1b      	lsrs	r3, r3, #16
    aa4a:	041b      	lsls	r3, r3, #16
    aa4c:	68fa      	ldr	r2, [r7, #12]
    aa4e:	b291      	uxth	r1, r2
    aa50:	687a      	ldr	r2, [r7, #4]
    aa52:	6812      	ldr	r2, [r2, #0]
    aa54:	430b      	orrs	r3, r1
    aa56:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
    aa58:	6878      	ldr	r0, [r7, #4]
    aa5a:	f000 fb2d 	bl	b0b8 <RTC_ExitInitMode>
    aa5e:	4603      	mov	r3, r0
    aa60:	2b00      	cmp	r3, #0
    aa62:	d004      	beq.n	aa6e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
    aa64:	687b      	ldr	r3, [r7, #4]
    aa66:	2204      	movs	r2, #4
    aa68:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
    aa6a:	2301      	movs	r3, #1
    aa6c:	e00c      	b.n	aa88 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
    aa6e:	687b      	ldr	r3, [r7, #4]
    aa70:	2200      	movs	r2, #0
    aa72:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
    aa74:	687b      	ldr	r3, [r7, #4]
    aa76:	2201      	movs	r2, #1
    aa78:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
    aa7a:	687b      	ldr	r3, [r7, #4]
    aa7c:	2201      	movs	r2, #1
    aa7e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
    aa80:	687b      	ldr	r3, [r7, #4]
    aa82:	2201      	movs	r2, #1
    aa84:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
    aa86:	2300      	movs	r3, #0
  }
}
    aa88:	4618      	mov	r0, r3
    aa8a:	3710      	adds	r7, #16
    aa8c:	46bd      	mov	sp, r7
    aa8e:	bd80      	pop	{r7, pc}
    aa90:	40006c00 	.word	0x40006c00

0000aa94 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
    aa94:	b590      	push	{r4, r7, lr}
    aa96:	b087      	sub	sp, #28
    aa98:	af00      	add	r7, sp, #0
    aa9a:	60f8      	str	r0, [r7, #12]
    aa9c:	60b9      	str	r1, [r7, #8]
    aa9e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
    aaa0:	2300      	movs	r3, #0
    aaa2:	617b      	str	r3, [r7, #20]
    aaa4:	2300      	movs	r3, #0
    aaa6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
    aaa8:	68fb      	ldr	r3, [r7, #12]
    aaaa:	2b00      	cmp	r3, #0
    aaac:	d002      	beq.n	aab4 <HAL_RTC_SetTime+0x20>
    aaae:	68bb      	ldr	r3, [r7, #8]
    aab0:	2b00      	cmp	r3, #0
    aab2:	d101      	bne.n	aab8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
    aab4:	2301      	movs	r3, #1
    aab6:	e080      	b.n	abba <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
    aab8:	68fb      	ldr	r3, [r7, #12]
    aaba:	7c1b      	ldrb	r3, [r3, #16]
    aabc:	2b01      	cmp	r3, #1
    aabe:	d101      	bne.n	aac4 <HAL_RTC_SetTime+0x30>
    aac0:	2302      	movs	r3, #2
    aac2:	e07a      	b.n	abba <HAL_RTC_SetTime+0x126>
    aac4:	68fb      	ldr	r3, [r7, #12]
    aac6:	2201      	movs	r2, #1
    aac8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
    aaca:	68fb      	ldr	r3, [r7, #12]
    aacc:	2202      	movs	r2, #2
    aace:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
    aad0:	687b      	ldr	r3, [r7, #4]
    aad2:	2b00      	cmp	r3, #0
    aad4:	d113      	bne.n	aafe <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
    aad6:	68bb      	ldr	r3, [r7, #8]
    aad8:	781b      	ldrb	r3, [r3, #0]
    aada:	461a      	mov	r2, r3
    aadc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    aae0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
    aae4:	68bb      	ldr	r3, [r7, #8]
    aae6:	785b      	ldrb	r3, [r3, #1]
    aae8:	4619      	mov	r1, r3
    aaea:	460b      	mov	r3, r1
    aaec:	011b      	lsls	r3, r3, #4
    aaee:	1a5b      	subs	r3, r3, r1
    aaf0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
    aaf2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
    aaf4:	68ba      	ldr	r2, [r7, #8]
    aaf6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
    aaf8:	4413      	add	r3, r2
    aafa:	617b      	str	r3, [r7, #20]
    aafc:	e01e      	b.n	ab3c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
    aafe:	68bb      	ldr	r3, [r7, #8]
    ab00:	781b      	ldrb	r3, [r3, #0]
    ab02:	4618      	mov	r0, r3
    ab04:	f000 fb1d 	bl	b142 <RTC_Bcd2ToByte>
    ab08:	4603      	mov	r3, r0
    ab0a:	461a      	mov	r2, r3
    ab0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    ab10:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
    ab14:	68bb      	ldr	r3, [r7, #8]
    ab16:	785b      	ldrb	r3, [r3, #1]
    ab18:	4618      	mov	r0, r3
    ab1a:	f000 fb12 	bl	b142 <RTC_Bcd2ToByte>
    ab1e:	4603      	mov	r3, r0
    ab20:	461a      	mov	r2, r3
    ab22:	4613      	mov	r3, r2
    ab24:	011b      	lsls	r3, r3, #4
    ab26:	1a9b      	subs	r3, r3, r2
    ab28:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
    ab2a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
    ab2c:	68bb      	ldr	r3, [r7, #8]
    ab2e:	789b      	ldrb	r3, [r3, #2]
    ab30:	4618      	mov	r0, r3
    ab32:	f000 fb06 	bl	b142 <RTC_Bcd2ToByte>
    ab36:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
    ab38:	4423      	add	r3, r4
    ab3a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
    ab3c:	6979      	ldr	r1, [r7, #20]
    ab3e:	68f8      	ldr	r0, [r7, #12]
    ab40:	f000 fa2b 	bl	af9a <RTC_WriteTimeCounter>
    ab44:	4603      	mov	r3, r0
    ab46:	2b00      	cmp	r3, #0
    ab48:	d007      	beq.n	ab5a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
    ab4a:	68fb      	ldr	r3, [r7, #12]
    ab4c:	2204      	movs	r2, #4
    ab4e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
    ab50:	68fb      	ldr	r3, [r7, #12]
    ab52:	2200      	movs	r2, #0
    ab54:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
    ab56:	2301      	movs	r3, #1
    ab58:	e02f      	b.n	abba <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
    ab5a:	68fb      	ldr	r3, [r7, #12]
    ab5c:	681b      	ldr	r3, [r3, #0]
    ab5e:	685a      	ldr	r2, [r3, #4]
    ab60:	68fb      	ldr	r3, [r7, #12]
    ab62:	681b      	ldr	r3, [r3, #0]
    ab64:	f022 0205 	bic.w	r2, r2, #5
    ab68:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
    ab6a:	68f8      	ldr	r0, [r7, #12]
    ab6c:	f000 fa3c 	bl	afe8 <RTC_ReadAlarmCounter>
    ab70:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
    ab72:	693b      	ldr	r3, [r7, #16]
    ab74:	f1b3 3fff 	cmp.w	r3, #4294967295
    ab78:	d018      	beq.n	abac <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
    ab7a:	693a      	ldr	r2, [r7, #16]
    ab7c:	697b      	ldr	r3, [r7, #20]
    ab7e:	429a      	cmp	r2, r3
    ab80:	d214      	bcs.n	abac <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
    ab82:	693b      	ldr	r3, [r7, #16]
    ab84:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    ab88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    ab8c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
    ab8e:	6939      	ldr	r1, [r7, #16]
    ab90:	68f8      	ldr	r0, [r7, #12]
    ab92:	f000 fa42 	bl	b01a <RTC_WriteAlarmCounter>
    ab96:	4603      	mov	r3, r0
    ab98:	2b00      	cmp	r3, #0
    ab9a:	d007      	beq.n	abac <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
    ab9c:	68fb      	ldr	r3, [r7, #12]
    ab9e:	2204      	movs	r2, #4
    aba0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
    aba2:	68fb      	ldr	r3, [r7, #12]
    aba4:	2200      	movs	r2, #0
    aba6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
    aba8:	2301      	movs	r3, #1
    abaa:	e006      	b.n	abba <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
    abac:	68fb      	ldr	r3, [r7, #12]
    abae:	2201      	movs	r2, #1
    abb0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
    abb2:	68fb      	ldr	r3, [r7, #12]
    abb4:	2200      	movs	r2, #0
    abb6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
    abb8:	2300      	movs	r3, #0
  }
}
    abba:	4618      	mov	r0, r3
    abbc:	371c      	adds	r7, #28
    abbe:	46bd      	mov	sp, r7
    abc0:	bd90      	pop	{r4, r7, pc}
	...

0000abc4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
    abc4:	b580      	push	{r7, lr}
    abc6:	b088      	sub	sp, #32
    abc8:	af00      	add	r7, sp, #0
    abca:	60f8      	str	r0, [r7, #12]
    abcc:	60b9      	str	r1, [r7, #8]
    abce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
    abd0:	2300      	movs	r3, #0
    abd2:	61bb      	str	r3, [r7, #24]
    abd4:	2300      	movs	r3, #0
    abd6:	61fb      	str	r3, [r7, #28]
    abd8:	2300      	movs	r3, #0
    abda:	617b      	str	r3, [r7, #20]
    abdc:	2300      	movs	r3, #0
    abde:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
    abe0:	68fb      	ldr	r3, [r7, #12]
    abe2:	2b00      	cmp	r3, #0
    abe4:	d002      	beq.n	abec <HAL_RTC_GetTime+0x28>
    abe6:	68bb      	ldr	r3, [r7, #8]
    abe8:	2b00      	cmp	r3, #0
    abea:	d101      	bne.n	abf0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
    abec:	2301      	movs	r3, #1
    abee:	e0b5      	b.n	ad5c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
    abf0:	68fb      	ldr	r3, [r7, #12]
    abf2:	681b      	ldr	r3, [r3, #0]
    abf4:	685b      	ldr	r3, [r3, #4]
    abf6:	f003 0304 	and.w	r3, r3, #4
    abfa:	2b00      	cmp	r3, #0
    abfc:	d001      	beq.n	ac02 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
    abfe:	2301      	movs	r3, #1
    ac00:	e0ac      	b.n	ad5c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
    ac02:	68f8      	ldr	r0, [r7, #12]
    ac04:	f000 f999 	bl	af3a <RTC_ReadTimeCounter>
    ac08:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
    ac0a:	69bb      	ldr	r3, [r7, #24]
    ac0c:	4a55      	ldr	r2, [pc, #340]	; (ad64 <HAL_RTC_GetTime+0x1a0>)
    ac0e:	fba2 2303 	umull	r2, r3, r2, r3
    ac12:	0adb      	lsrs	r3, r3, #11
    ac14:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
    ac16:	69ba      	ldr	r2, [r7, #24]
    ac18:	4b52      	ldr	r3, [pc, #328]	; (ad64 <HAL_RTC_GetTime+0x1a0>)
    ac1a:	fba3 1302 	umull	r1, r3, r3, r2
    ac1e:	0adb      	lsrs	r3, r3, #11
    ac20:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    ac24:	fb01 f303 	mul.w	r3, r1, r3
    ac28:	1ad3      	subs	r3, r2, r3
    ac2a:	4a4f      	ldr	r2, [pc, #316]	; (ad68 <HAL_RTC_GetTime+0x1a4>)
    ac2c:	fba2 2303 	umull	r2, r3, r2, r3
    ac30:	095b      	lsrs	r3, r3, #5
    ac32:	b2da      	uxtb	r2, r3
    ac34:	68bb      	ldr	r3, [r7, #8]
    ac36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
    ac38:	69bb      	ldr	r3, [r7, #24]
    ac3a:	4a4a      	ldr	r2, [pc, #296]	; (ad64 <HAL_RTC_GetTime+0x1a0>)
    ac3c:	fba2 1203 	umull	r1, r2, r2, r3
    ac40:	0ad2      	lsrs	r2, r2, #11
    ac42:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    ac46:	fb01 f202 	mul.w	r2, r1, r2
    ac4a:	1a9a      	subs	r2, r3, r2
    ac4c:	4b46      	ldr	r3, [pc, #280]	; (ad68 <HAL_RTC_GetTime+0x1a4>)
    ac4e:	fba3 1302 	umull	r1, r3, r3, r2
    ac52:	0959      	lsrs	r1, r3, #5
    ac54:	460b      	mov	r3, r1
    ac56:	011b      	lsls	r3, r3, #4
    ac58:	1a5b      	subs	r3, r3, r1
    ac5a:	009b      	lsls	r3, r3, #2
    ac5c:	1ad1      	subs	r1, r2, r3
    ac5e:	b2ca      	uxtb	r2, r1
    ac60:	68bb      	ldr	r3, [r7, #8]
    ac62:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
    ac64:	693b      	ldr	r3, [r7, #16]
    ac66:	2b17      	cmp	r3, #23
    ac68:	d955      	bls.n	ad16 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
    ac6a:	693b      	ldr	r3, [r7, #16]
    ac6c:	4a3f      	ldr	r2, [pc, #252]	; (ad6c <HAL_RTC_GetTime+0x1a8>)
    ac6e:	fba2 2303 	umull	r2, r3, r2, r3
    ac72:	091b      	lsrs	r3, r3, #4
    ac74:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
    ac76:	6939      	ldr	r1, [r7, #16]
    ac78:	4b3c      	ldr	r3, [pc, #240]	; (ad6c <HAL_RTC_GetTime+0x1a8>)
    ac7a:	fba3 2301 	umull	r2, r3, r3, r1
    ac7e:	091a      	lsrs	r2, r3, #4
    ac80:	4613      	mov	r3, r2
    ac82:	005b      	lsls	r3, r3, #1
    ac84:	4413      	add	r3, r2
    ac86:	00db      	lsls	r3, r3, #3
    ac88:	1aca      	subs	r2, r1, r3
    ac8a:	b2d2      	uxtb	r2, r2
    ac8c:	68bb      	ldr	r3, [r7, #8]
    ac8e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
    ac90:	68f8      	ldr	r0, [r7, #12]
    ac92:	f000 f9a9 	bl	afe8 <RTC_ReadAlarmCounter>
    ac96:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
    ac98:	69fb      	ldr	r3, [r7, #28]
    ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295
    ac9e:	d008      	beq.n	acb2 <HAL_RTC_GetTime+0xee>
    aca0:	69fa      	ldr	r2, [r7, #28]
    aca2:	69bb      	ldr	r3, [r7, #24]
    aca4:	429a      	cmp	r2, r3
    aca6:	d904      	bls.n	acb2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
    aca8:	69fa      	ldr	r2, [r7, #28]
    acaa:	69bb      	ldr	r3, [r7, #24]
    acac:	1ad3      	subs	r3, r2, r3
    acae:	61fb      	str	r3, [r7, #28]
    acb0:	e002      	b.n	acb8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
    acb2:	f04f 33ff 	mov.w	r3, #4294967295
    acb6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
    acb8:	697b      	ldr	r3, [r7, #20]
    acba:	4a2d      	ldr	r2, [pc, #180]	; (ad70 <HAL_RTC_GetTime+0x1ac>)
    acbc:	fb02 f303 	mul.w	r3, r2, r3
    acc0:	69ba      	ldr	r2, [r7, #24]
    acc2:	1ad3      	subs	r3, r2, r3
    acc4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
    acc6:	69b9      	ldr	r1, [r7, #24]
    acc8:	68f8      	ldr	r0, [r7, #12]
    acca:	f000 f966 	bl	af9a <RTC_WriteTimeCounter>
    acce:	4603      	mov	r3, r0
    acd0:	2b00      	cmp	r3, #0
    acd2:	d001      	beq.n	acd8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
    acd4:	2301      	movs	r3, #1
    acd6:	e041      	b.n	ad5c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
    acd8:	69fb      	ldr	r3, [r7, #28]
    acda:	f1b3 3fff 	cmp.w	r3, #4294967295
    acde:	d00c      	beq.n	acfa <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
    ace0:	69fa      	ldr	r2, [r7, #28]
    ace2:	69bb      	ldr	r3, [r7, #24]
    ace4:	4413      	add	r3, r2
    ace6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
    ace8:	69f9      	ldr	r1, [r7, #28]
    acea:	68f8      	ldr	r0, [r7, #12]
    acec:	f000 f995 	bl	b01a <RTC_WriteAlarmCounter>
    acf0:	4603      	mov	r3, r0
    acf2:	2b00      	cmp	r3, #0
    acf4:	d00a      	beq.n	ad0c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
    acf6:	2301      	movs	r3, #1
    acf8:	e030      	b.n	ad5c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
    acfa:	69f9      	ldr	r1, [r7, #28]
    acfc:	68f8      	ldr	r0, [r7, #12]
    acfe:	f000 f98c 	bl	b01a <RTC_WriteAlarmCounter>
    ad02:	4603      	mov	r3, r0
    ad04:	2b00      	cmp	r3, #0
    ad06:	d001      	beq.n	ad0c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
    ad08:	2301      	movs	r3, #1
    ad0a:	e027      	b.n	ad5c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
    ad0c:	6979      	ldr	r1, [r7, #20]
    ad0e:	68f8      	ldr	r0, [r7, #12]
    ad10:	f000 fa34 	bl	b17c <RTC_DateUpdate>
    ad14:	e003      	b.n	ad1e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
    ad16:	693b      	ldr	r3, [r7, #16]
    ad18:	b2da      	uxtb	r2, r3
    ad1a:	68bb      	ldr	r3, [r7, #8]
    ad1c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
    ad1e:	687b      	ldr	r3, [r7, #4]
    ad20:	2b00      	cmp	r3, #0
    ad22:	d01a      	beq.n	ad5a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
    ad24:	68bb      	ldr	r3, [r7, #8]
    ad26:	781b      	ldrb	r3, [r3, #0]
    ad28:	4618      	mov	r0, r3
    ad2a:	f000 f9ed 	bl	b108 <RTC_ByteToBcd2>
    ad2e:	4603      	mov	r3, r0
    ad30:	461a      	mov	r2, r3
    ad32:	68bb      	ldr	r3, [r7, #8]
    ad34:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
    ad36:	68bb      	ldr	r3, [r7, #8]
    ad38:	785b      	ldrb	r3, [r3, #1]
    ad3a:	4618      	mov	r0, r3
    ad3c:	f000 f9e4 	bl	b108 <RTC_ByteToBcd2>
    ad40:	4603      	mov	r3, r0
    ad42:	461a      	mov	r2, r3
    ad44:	68bb      	ldr	r3, [r7, #8]
    ad46:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
    ad48:	68bb      	ldr	r3, [r7, #8]
    ad4a:	789b      	ldrb	r3, [r3, #2]
    ad4c:	4618      	mov	r0, r3
    ad4e:	f000 f9db 	bl	b108 <RTC_ByteToBcd2>
    ad52:	4603      	mov	r3, r0
    ad54:	461a      	mov	r2, r3
    ad56:	68bb      	ldr	r3, [r7, #8]
    ad58:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
    ad5a:	2300      	movs	r3, #0
}
    ad5c:	4618      	mov	r0, r3
    ad5e:	3720      	adds	r7, #32
    ad60:	46bd      	mov	sp, r7
    ad62:	bd80      	pop	{r7, pc}
    ad64:	91a2b3c5 	.word	0x91a2b3c5
    ad68:	88888889 	.word	0x88888889
    ad6c:	aaaaaaab 	.word	0xaaaaaaab
    ad70:	00015180 	.word	0x00015180

0000ad74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
    ad74:	b580      	push	{r7, lr}
    ad76:	b088      	sub	sp, #32
    ad78:	af00      	add	r7, sp, #0
    ad7a:	60f8      	str	r0, [r7, #12]
    ad7c:	60b9      	str	r1, [r7, #8]
    ad7e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
    ad80:	2300      	movs	r3, #0
    ad82:	61fb      	str	r3, [r7, #28]
    ad84:	2300      	movs	r3, #0
    ad86:	61bb      	str	r3, [r7, #24]
    ad88:	2300      	movs	r3, #0
    ad8a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
    ad8c:	68fb      	ldr	r3, [r7, #12]
    ad8e:	2b00      	cmp	r3, #0
    ad90:	d002      	beq.n	ad98 <HAL_RTC_SetDate+0x24>
    ad92:	68bb      	ldr	r3, [r7, #8]
    ad94:	2b00      	cmp	r3, #0
    ad96:	d101      	bne.n	ad9c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
    ad98:	2301      	movs	r3, #1
    ad9a:	e097      	b.n	aecc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
    ad9c:	68fb      	ldr	r3, [r7, #12]
    ad9e:	7c1b      	ldrb	r3, [r3, #16]
    ada0:	2b01      	cmp	r3, #1
    ada2:	d101      	bne.n	ada8 <HAL_RTC_SetDate+0x34>
    ada4:	2302      	movs	r3, #2
    ada6:	e091      	b.n	aecc <HAL_RTC_SetDate+0x158>
    ada8:	68fb      	ldr	r3, [r7, #12]
    adaa:	2201      	movs	r2, #1
    adac:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
    adae:	68fb      	ldr	r3, [r7, #12]
    adb0:	2202      	movs	r2, #2
    adb2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
    adb4:	687b      	ldr	r3, [r7, #4]
    adb6:	2b00      	cmp	r3, #0
    adb8:	d10c      	bne.n	add4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
    adba:	68bb      	ldr	r3, [r7, #8]
    adbc:	78da      	ldrb	r2, [r3, #3]
    adbe:	68fb      	ldr	r3, [r7, #12]
    adc0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
    adc2:	68bb      	ldr	r3, [r7, #8]
    adc4:	785a      	ldrb	r2, [r3, #1]
    adc6:	68fb      	ldr	r3, [r7, #12]
    adc8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
    adca:	68bb      	ldr	r3, [r7, #8]
    adcc:	789a      	ldrb	r2, [r3, #2]
    adce:	68fb      	ldr	r3, [r7, #12]
    add0:	739a      	strb	r2, [r3, #14]
    add2:	e01a      	b.n	ae0a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
    add4:	68bb      	ldr	r3, [r7, #8]
    add6:	78db      	ldrb	r3, [r3, #3]
    add8:	4618      	mov	r0, r3
    adda:	f000 f9b2 	bl	b142 <RTC_Bcd2ToByte>
    adde:	4603      	mov	r3, r0
    ade0:	461a      	mov	r2, r3
    ade2:	68fb      	ldr	r3, [r7, #12]
    ade4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
    ade6:	68bb      	ldr	r3, [r7, #8]
    ade8:	785b      	ldrb	r3, [r3, #1]
    adea:	4618      	mov	r0, r3
    adec:	f000 f9a9 	bl	b142 <RTC_Bcd2ToByte>
    adf0:	4603      	mov	r3, r0
    adf2:	461a      	mov	r2, r3
    adf4:	68fb      	ldr	r3, [r7, #12]
    adf6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
    adf8:	68bb      	ldr	r3, [r7, #8]
    adfa:	789b      	ldrb	r3, [r3, #2]
    adfc:	4618      	mov	r0, r3
    adfe:	f000 f9a0 	bl	b142 <RTC_Bcd2ToByte>
    ae02:	4603      	mov	r3, r0
    ae04:	461a      	mov	r2, r3
    ae06:	68fb      	ldr	r3, [r7, #12]
    ae08:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
    ae0a:	68fb      	ldr	r3, [r7, #12]
    ae0c:	7bdb      	ldrb	r3, [r3, #15]
    ae0e:	4618      	mov	r0, r3
    ae10:	68fb      	ldr	r3, [r7, #12]
    ae12:	7b59      	ldrb	r1, [r3, #13]
    ae14:	68fb      	ldr	r3, [r7, #12]
    ae16:	7b9b      	ldrb	r3, [r3, #14]
    ae18:	461a      	mov	r2, r3
    ae1a:	f000 fa8b 	bl	b334 <RTC_WeekDayNum>
    ae1e:	4603      	mov	r3, r0
    ae20:	461a      	mov	r2, r3
    ae22:	68fb      	ldr	r3, [r7, #12]
    ae24:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
    ae26:	68fb      	ldr	r3, [r7, #12]
    ae28:	7b1a      	ldrb	r2, [r3, #12]
    ae2a:	68bb      	ldr	r3, [r7, #8]
    ae2c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
    ae2e:	68f8      	ldr	r0, [r7, #12]
    ae30:	f000 f883 	bl	af3a <RTC_ReadTimeCounter>
    ae34:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
    ae36:	69fb      	ldr	r3, [r7, #28]
    ae38:	4a26      	ldr	r2, [pc, #152]	; (aed4 <HAL_RTC_SetDate+0x160>)
    ae3a:	fba2 2303 	umull	r2, r3, r2, r3
    ae3e:	0adb      	lsrs	r3, r3, #11
    ae40:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
    ae42:	697b      	ldr	r3, [r7, #20]
    ae44:	2b18      	cmp	r3, #24
    ae46:	d93a      	bls.n	aebe <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
    ae48:	697b      	ldr	r3, [r7, #20]
    ae4a:	4a23      	ldr	r2, [pc, #140]	; (aed8 <HAL_RTC_SetDate+0x164>)
    ae4c:	fba2 2303 	umull	r2, r3, r2, r3
    ae50:	091b      	lsrs	r3, r3, #4
    ae52:	4a22      	ldr	r2, [pc, #136]	; (aedc <HAL_RTC_SetDate+0x168>)
    ae54:	fb02 f303 	mul.w	r3, r2, r3
    ae58:	69fa      	ldr	r2, [r7, #28]
    ae5a:	1ad3      	subs	r3, r2, r3
    ae5c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
    ae5e:	69f9      	ldr	r1, [r7, #28]
    ae60:	68f8      	ldr	r0, [r7, #12]
    ae62:	f000 f89a 	bl	af9a <RTC_WriteTimeCounter>
    ae66:	4603      	mov	r3, r0
    ae68:	2b00      	cmp	r3, #0
    ae6a:	d007      	beq.n	ae7c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
    ae6c:	68fb      	ldr	r3, [r7, #12]
    ae6e:	2204      	movs	r2, #4
    ae70:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
    ae72:	68fb      	ldr	r3, [r7, #12]
    ae74:	2200      	movs	r2, #0
    ae76:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
    ae78:	2301      	movs	r3, #1
    ae7a:	e027      	b.n	aecc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
    ae7c:	68f8      	ldr	r0, [r7, #12]
    ae7e:	f000 f8b3 	bl	afe8 <RTC_ReadAlarmCounter>
    ae82:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
    ae84:	69bb      	ldr	r3, [r7, #24]
    ae86:	f1b3 3fff 	cmp.w	r3, #4294967295
    ae8a:	d018      	beq.n	aebe <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
    ae8c:	69ba      	ldr	r2, [r7, #24]
    ae8e:	69fb      	ldr	r3, [r7, #28]
    ae90:	429a      	cmp	r2, r3
    ae92:	d214      	bcs.n	aebe <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
    ae94:	69bb      	ldr	r3, [r7, #24]
    ae96:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    ae9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    ae9e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
    aea0:	69b9      	ldr	r1, [r7, #24]
    aea2:	68f8      	ldr	r0, [r7, #12]
    aea4:	f000 f8b9 	bl	b01a <RTC_WriteAlarmCounter>
    aea8:	4603      	mov	r3, r0
    aeaa:	2b00      	cmp	r3, #0
    aeac:	d007      	beq.n	aebe <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
    aeae:	68fb      	ldr	r3, [r7, #12]
    aeb0:	2204      	movs	r2, #4
    aeb2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
    aeb4:	68fb      	ldr	r3, [r7, #12]
    aeb6:	2200      	movs	r2, #0
    aeb8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
    aeba:	2301      	movs	r3, #1
    aebc:	e006      	b.n	aecc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
    aebe:	68fb      	ldr	r3, [r7, #12]
    aec0:	2201      	movs	r2, #1
    aec2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
    aec4:	68fb      	ldr	r3, [r7, #12]
    aec6:	2200      	movs	r2, #0
    aec8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
    aeca:	2300      	movs	r3, #0
}
    aecc:	4618      	mov	r0, r3
    aece:	3720      	adds	r7, #32
    aed0:	46bd      	mov	sp, r7
    aed2:	bd80      	pop	{r7, pc}
    aed4:	91a2b3c5 	.word	0x91a2b3c5
    aed8:	aaaaaaab 	.word	0xaaaaaaab
    aedc:	00015180 	.word	0x00015180

0000aee0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
    aee0:	b580      	push	{r7, lr}
    aee2:	b084      	sub	sp, #16
    aee4:	af00      	add	r7, sp, #0
    aee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
    aee8:	2300      	movs	r3, #0
    aeea:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
    aeec:	687b      	ldr	r3, [r7, #4]
    aeee:	2b00      	cmp	r3, #0
    aef0:	d101      	bne.n	aef6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
    aef2:	2301      	movs	r3, #1
    aef4:	e01d      	b.n	af32 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
    aef6:	687b      	ldr	r3, [r7, #4]
    aef8:	681b      	ldr	r3, [r3, #0]
    aefa:	685a      	ldr	r2, [r3, #4]
    aefc:	687b      	ldr	r3, [r7, #4]
    aefe:	681b      	ldr	r3, [r3, #0]
    af00:	f022 0208 	bic.w	r2, r2, #8
    af04:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
    af06:	f7fd f959 	bl	81bc <HAL_GetTick>
    af0a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
    af0c:	e009      	b.n	af22 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
    af0e:	f7fd f955 	bl	81bc <HAL_GetTick>
    af12:	4602      	mov	r2, r0
    af14:	68fb      	ldr	r3, [r7, #12]
    af16:	1ad3      	subs	r3, r2, r3
    af18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    af1c:	d901      	bls.n	af22 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
    af1e:	2303      	movs	r3, #3
    af20:	e007      	b.n	af32 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
    af22:	687b      	ldr	r3, [r7, #4]
    af24:	681b      	ldr	r3, [r3, #0]
    af26:	685b      	ldr	r3, [r3, #4]
    af28:	f003 0308 	and.w	r3, r3, #8
    af2c:	2b00      	cmp	r3, #0
    af2e:	d0ee      	beq.n	af0e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
    af30:	2300      	movs	r3, #0
}
    af32:	4618      	mov	r0, r3
    af34:	3710      	adds	r7, #16
    af36:	46bd      	mov	sp, r7
    af38:	bd80      	pop	{r7, pc}

0000af3a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
    af3a:	b480      	push	{r7}
    af3c:	b087      	sub	sp, #28
    af3e:	af00      	add	r7, sp, #0
    af40:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
    af42:	2300      	movs	r3, #0
    af44:	827b      	strh	r3, [r7, #18]
    af46:	2300      	movs	r3, #0
    af48:	823b      	strh	r3, [r7, #16]
    af4a:	2300      	movs	r3, #0
    af4c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
    af4e:	2300      	movs	r3, #0
    af50:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
    af52:	687b      	ldr	r3, [r7, #4]
    af54:	681b      	ldr	r3, [r3, #0]
    af56:	699b      	ldr	r3, [r3, #24]
    af58:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
    af5a:	687b      	ldr	r3, [r7, #4]
    af5c:	681b      	ldr	r3, [r3, #0]
    af5e:	69db      	ldr	r3, [r3, #28]
    af60:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
    af62:	687b      	ldr	r3, [r7, #4]
    af64:	681b      	ldr	r3, [r3, #0]
    af66:	699b      	ldr	r3, [r3, #24]
    af68:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
    af6a:	8a7a      	ldrh	r2, [r7, #18]
    af6c:	8a3b      	ldrh	r3, [r7, #16]
    af6e:	429a      	cmp	r2, r3
    af70:	d008      	beq.n	af84 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
    af72:	8a3b      	ldrh	r3, [r7, #16]
    af74:	041a      	lsls	r2, r3, #16
    af76:	687b      	ldr	r3, [r7, #4]
    af78:	681b      	ldr	r3, [r3, #0]
    af7a:	69db      	ldr	r3, [r3, #28]
    af7c:	b29b      	uxth	r3, r3
    af7e:	4313      	orrs	r3, r2
    af80:	617b      	str	r3, [r7, #20]
    af82:	e004      	b.n	af8e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
    af84:	8a7b      	ldrh	r3, [r7, #18]
    af86:	041a      	lsls	r2, r3, #16
    af88:	89fb      	ldrh	r3, [r7, #14]
    af8a:	4313      	orrs	r3, r2
    af8c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
    af8e:	697b      	ldr	r3, [r7, #20]
}
    af90:	4618      	mov	r0, r3
    af92:	371c      	adds	r7, #28
    af94:	46bd      	mov	sp, r7
    af96:	bc80      	pop	{r7}
    af98:	4770      	bx	lr

0000af9a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
    af9a:	b580      	push	{r7, lr}
    af9c:	b084      	sub	sp, #16
    af9e:	af00      	add	r7, sp, #0
    afa0:	6078      	str	r0, [r7, #4]
    afa2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
    afa4:	2300      	movs	r3, #0
    afa6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
    afa8:	6878      	ldr	r0, [r7, #4]
    afaa:	f000 f85d 	bl	b068 <RTC_EnterInitMode>
    afae:	4603      	mov	r3, r0
    afb0:	2b00      	cmp	r3, #0
    afb2:	d002      	beq.n	afba <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
    afb4:	2301      	movs	r3, #1
    afb6:	73fb      	strb	r3, [r7, #15]
    afb8:	e011      	b.n	afde <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
    afba:	687b      	ldr	r3, [r7, #4]
    afbc:	681b      	ldr	r3, [r3, #0]
    afbe:	683a      	ldr	r2, [r7, #0]
    afc0:	0c12      	lsrs	r2, r2, #16
    afc2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
    afc4:	687b      	ldr	r3, [r7, #4]
    afc6:	681b      	ldr	r3, [r3, #0]
    afc8:	683a      	ldr	r2, [r7, #0]
    afca:	b292      	uxth	r2, r2
    afcc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
    afce:	6878      	ldr	r0, [r7, #4]
    afd0:	f000 f872 	bl	b0b8 <RTC_ExitInitMode>
    afd4:	4603      	mov	r3, r0
    afd6:	2b00      	cmp	r3, #0
    afd8:	d001      	beq.n	afde <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
    afda:	2301      	movs	r3, #1
    afdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
    afde:	7bfb      	ldrb	r3, [r7, #15]
}
    afe0:	4618      	mov	r0, r3
    afe2:	3710      	adds	r7, #16
    afe4:	46bd      	mov	sp, r7
    afe6:	bd80      	pop	{r7, pc}

0000afe8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
    afe8:	b480      	push	{r7}
    afea:	b085      	sub	sp, #20
    afec:	af00      	add	r7, sp, #0
    afee:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
    aff0:	2300      	movs	r3, #0
    aff2:	81fb      	strh	r3, [r7, #14]
    aff4:	2300      	movs	r3, #0
    aff6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
    aff8:	687b      	ldr	r3, [r7, #4]
    affa:	681b      	ldr	r3, [r3, #0]
    affc:	6a1b      	ldr	r3, [r3, #32]
    affe:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
    b000:	687b      	ldr	r3, [r7, #4]
    b002:	681b      	ldr	r3, [r3, #0]
    b004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b006:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
    b008:	89fb      	ldrh	r3, [r7, #14]
    b00a:	041a      	lsls	r2, r3, #16
    b00c:	89bb      	ldrh	r3, [r7, #12]
    b00e:	4313      	orrs	r3, r2
}
    b010:	4618      	mov	r0, r3
    b012:	3714      	adds	r7, #20
    b014:	46bd      	mov	sp, r7
    b016:	bc80      	pop	{r7}
    b018:	4770      	bx	lr

0000b01a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
    b01a:	b580      	push	{r7, lr}
    b01c:	b084      	sub	sp, #16
    b01e:	af00      	add	r7, sp, #0
    b020:	6078      	str	r0, [r7, #4]
    b022:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
    b024:	2300      	movs	r3, #0
    b026:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
    b028:	6878      	ldr	r0, [r7, #4]
    b02a:	f000 f81d 	bl	b068 <RTC_EnterInitMode>
    b02e:	4603      	mov	r3, r0
    b030:	2b00      	cmp	r3, #0
    b032:	d002      	beq.n	b03a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
    b034:	2301      	movs	r3, #1
    b036:	73fb      	strb	r3, [r7, #15]
    b038:	e011      	b.n	b05e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
    b03a:	687b      	ldr	r3, [r7, #4]
    b03c:	681b      	ldr	r3, [r3, #0]
    b03e:	683a      	ldr	r2, [r7, #0]
    b040:	0c12      	lsrs	r2, r2, #16
    b042:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
    b044:	687b      	ldr	r3, [r7, #4]
    b046:	681b      	ldr	r3, [r3, #0]
    b048:	683a      	ldr	r2, [r7, #0]
    b04a:	b292      	uxth	r2, r2
    b04c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
    b04e:	6878      	ldr	r0, [r7, #4]
    b050:	f000 f832 	bl	b0b8 <RTC_ExitInitMode>
    b054:	4603      	mov	r3, r0
    b056:	2b00      	cmp	r3, #0
    b058:	d001      	beq.n	b05e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
    b05a:	2301      	movs	r3, #1
    b05c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
    b05e:	7bfb      	ldrb	r3, [r7, #15]
}
    b060:	4618      	mov	r0, r3
    b062:	3710      	adds	r7, #16
    b064:	46bd      	mov	sp, r7
    b066:	bd80      	pop	{r7, pc}

0000b068 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
    b068:	b580      	push	{r7, lr}
    b06a:	b084      	sub	sp, #16
    b06c:	af00      	add	r7, sp, #0
    b06e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
    b070:	2300      	movs	r3, #0
    b072:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
    b074:	f7fd f8a2 	bl	81bc <HAL_GetTick>
    b078:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
    b07a:	e009      	b.n	b090 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
    b07c:	f7fd f89e 	bl	81bc <HAL_GetTick>
    b080:	4602      	mov	r2, r0
    b082:	68fb      	ldr	r3, [r7, #12]
    b084:	1ad3      	subs	r3, r2, r3
    b086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    b08a:	d901      	bls.n	b090 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
    b08c:	2303      	movs	r3, #3
    b08e:	e00f      	b.n	b0b0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	681b      	ldr	r3, [r3, #0]
    b094:	685b      	ldr	r3, [r3, #4]
    b096:	f003 0320 	and.w	r3, r3, #32
    b09a:	2b00      	cmp	r3, #0
    b09c:	d0ee      	beq.n	b07c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
    b09e:	687b      	ldr	r3, [r7, #4]
    b0a0:	681b      	ldr	r3, [r3, #0]
    b0a2:	685a      	ldr	r2, [r3, #4]
    b0a4:	687b      	ldr	r3, [r7, #4]
    b0a6:	681b      	ldr	r3, [r3, #0]
    b0a8:	f042 0210 	orr.w	r2, r2, #16
    b0ac:	605a      	str	r2, [r3, #4]


  return HAL_OK;
    b0ae:	2300      	movs	r3, #0
}
    b0b0:	4618      	mov	r0, r3
    b0b2:	3710      	adds	r7, #16
    b0b4:	46bd      	mov	sp, r7
    b0b6:	bd80      	pop	{r7, pc}

0000b0b8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
    b0b8:	b580      	push	{r7, lr}
    b0ba:	b084      	sub	sp, #16
    b0bc:	af00      	add	r7, sp, #0
    b0be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
    b0c0:	2300      	movs	r3, #0
    b0c2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
    b0c4:	687b      	ldr	r3, [r7, #4]
    b0c6:	681b      	ldr	r3, [r3, #0]
    b0c8:	685a      	ldr	r2, [r3, #4]
    b0ca:	687b      	ldr	r3, [r7, #4]
    b0cc:	681b      	ldr	r3, [r3, #0]
    b0ce:	f022 0210 	bic.w	r2, r2, #16
    b0d2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
    b0d4:	f7fd f872 	bl	81bc <HAL_GetTick>
    b0d8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
    b0da:	e009      	b.n	b0f0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
    b0dc:	f7fd f86e 	bl	81bc <HAL_GetTick>
    b0e0:	4602      	mov	r2, r0
    b0e2:	68fb      	ldr	r3, [r7, #12]
    b0e4:	1ad3      	subs	r3, r2, r3
    b0e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    b0ea:	d901      	bls.n	b0f0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
    b0ec:	2303      	movs	r3, #3
    b0ee:	e007      	b.n	b100 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
    b0f0:	687b      	ldr	r3, [r7, #4]
    b0f2:	681b      	ldr	r3, [r3, #0]
    b0f4:	685b      	ldr	r3, [r3, #4]
    b0f6:	f003 0320 	and.w	r3, r3, #32
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d0ee      	beq.n	b0dc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
    b0fe:	2300      	movs	r3, #0
}
    b100:	4618      	mov	r0, r3
    b102:	3710      	adds	r7, #16
    b104:	46bd      	mov	sp, r7
    b106:	bd80      	pop	{r7, pc}

0000b108 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
    b108:	b480      	push	{r7}
    b10a:	b085      	sub	sp, #20
    b10c:	af00      	add	r7, sp, #0
    b10e:	4603      	mov	r3, r0
    b110:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
    b112:	2300      	movs	r3, #0
    b114:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
    b116:	e005      	b.n	b124 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
    b118:	68fb      	ldr	r3, [r7, #12]
    b11a:	3301      	adds	r3, #1
    b11c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
    b11e:	79fb      	ldrb	r3, [r7, #7]
    b120:	3b0a      	subs	r3, #10
    b122:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
    b124:	79fb      	ldrb	r3, [r7, #7]
    b126:	2b09      	cmp	r3, #9
    b128:	d8f6      	bhi.n	b118 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
    b12a:	68fb      	ldr	r3, [r7, #12]
    b12c:	b2db      	uxtb	r3, r3
    b12e:	011b      	lsls	r3, r3, #4
    b130:	b2da      	uxtb	r2, r3
    b132:	79fb      	ldrb	r3, [r7, #7]
    b134:	4313      	orrs	r3, r2
    b136:	b2db      	uxtb	r3, r3
}
    b138:	4618      	mov	r0, r3
    b13a:	3714      	adds	r7, #20
    b13c:	46bd      	mov	sp, r7
    b13e:	bc80      	pop	{r7}
    b140:	4770      	bx	lr

0000b142 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
    b142:	b480      	push	{r7}
    b144:	b085      	sub	sp, #20
    b146:	af00      	add	r7, sp, #0
    b148:	4603      	mov	r3, r0
    b14a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
    b14c:	2300      	movs	r3, #0
    b14e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
    b150:	79fb      	ldrb	r3, [r7, #7]
    b152:	091b      	lsrs	r3, r3, #4
    b154:	b2db      	uxtb	r3, r3
    b156:	461a      	mov	r2, r3
    b158:	4613      	mov	r3, r2
    b15a:	009b      	lsls	r3, r3, #2
    b15c:	4413      	add	r3, r2
    b15e:	005b      	lsls	r3, r3, #1
    b160:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
    b162:	79fb      	ldrb	r3, [r7, #7]
    b164:	f003 030f 	and.w	r3, r3, #15
    b168:	b2da      	uxtb	r2, r3
    b16a:	68fb      	ldr	r3, [r7, #12]
    b16c:	b2db      	uxtb	r3, r3
    b16e:	4413      	add	r3, r2
    b170:	b2db      	uxtb	r3, r3
}
    b172:	4618      	mov	r0, r3
    b174:	3714      	adds	r7, #20
    b176:	46bd      	mov	sp, r7
    b178:	bc80      	pop	{r7}
    b17a:	4770      	bx	lr

0000b17c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
    b17c:	b580      	push	{r7, lr}
    b17e:	b086      	sub	sp, #24
    b180:	af00      	add	r7, sp, #0
    b182:	6078      	str	r0, [r7, #4]
    b184:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
    b186:	2300      	movs	r3, #0
    b188:	617b      	str	r3, [r7, #20]
    b18a:	2300      	movs	r3, #0
    b18c:	613b      	str	r3, [r7, #16]
    b18e:	2300      	movs	r3, #0
    b190:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
    b192:	2300      	movs	r3, #0
    b194:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
    b196:	687b      	ldr	r3, [r7, #4]
    b198:	7bdb      	ldrb	r3, [r3, #15]
    b19a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
    b19c:	687b      	ldr	r3, [r7, #4]
    b19e:	7b5b      	ldrb	r3, [r3, #13]
    b1a0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
    b1a2:	687b      	ldr	r3, [r7, #4]
    b1a4:	7b9b      	ldrb	r3, [r3, #14]
    b1a6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
    b1a8:	2300      	movs	r3, #0
    b1aa:	60bb      	str	r3, [r7, #8]
    b1ac:	e06f      	b.n	b28e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
    b1ae:	693b      	ldr	r3, [r7, #16]
    b1b0:	2b01      	cmp	r3, #1
    b1b2:	d011      	beq.n	b1d8 <RTC_DateUpdate+0x5c>
    b1b4:	693b      	ldr	r3, [r7, #16]
    b1b6:	2b03      	cmp	r3, #3
    b1b8:	d00e      	beq.n	b1d8 <RTC_DateUpdate+0x5c>
    b1ba:	693b      	ldr	r3, [r7, #16]
    b1bc:	2b05      	cmp	r3, #5
    b1be:	d00b      	beq.n	b1d8 <RTC_DateUpdate+0x5c>
    b1c0:	693b      	ldr	r3, [r7, #16]
    b1c2:	2b07      	cmp	r3, #7
    b1c4:	d008      	beq.n	b1d8 <RTC_DateUpdate+0x5c>
    b1c6:	693b      	ldr	r3, [r7, #16]
    b1c8:	2b08      	cmp	r3, #8
    b1ca:	d005      	beq.n	b1d8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
    b1cc:	693b      	ldr	r3, [r7, #16]
    b1ce:	2b0a      	cmp	r3, #10
    b1d0:	d002      	beq.n	b1d8 <RTC_DateUpdate+0x5c>
    b1d2:	693b      	ldr	r3, [r7, #16]
    b1d4:	2b0c      	cmp	r3, #12
    b1d6:	d117      	bne.n	b208 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
    b1d8:	68fb      	ldr	r3, [r7, #12]
    b1da:	2b1e      	cmp	r3, #30
    b1dc:	d803      	bhi.n	b1e6 <RTC_DateUpdate+0x6a>
      {
        day++;
    b1de:	68fb      	ldr	r3, [r7, #12]
    b1e0:	3301      	adds	r3, #1
    b1e2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
    b1e4:	e050      	b.n	b288 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
    b1e6:	693b      	ldr	r3, [r7, #16]
    b1e8:	2b0c      	cmp	r3, #12
    b1ea:	d005      	beq.n	b1f8 <RTC_DateUpdate+0x7c>
        {
          month++;
    b1ec:	693b      	ldr	r3, [r7, #16]
    b1ee:	3301      	adds	r3, #1
    b1f0:	613b      	str	r3, [r7, #16]
          day = 1U;
    b1f2:	2301      	movs	r3, #1
    b1f4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
    b1f6:	e047      	b.n	b288 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
    b1f8:	2301      	movs	r3, #1
    b1fa:	613b      	str	r3, [r7, #16]
          day = 1U;
    b1fc:	2301      	movs	r3, #1
    b1fe:	60fb      	str	r3, [r7, #12]
          year++;
    b200:	697b      	ldr	r3, [r7, #20]
    b202:	3301      	adds	r3, #1
    b204:	617b      	str	r3, [r7, #20]
      if (day < 31U)
    b206:	e03f      	b.n	b288 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
    b208:	693b      	ldr	r3, [r7, #16]
    b20a:	2b04      	cmp	r3, #4
    b20c:	d008      	beq.n	b220 <RTC_DateUpdate+0xa4>
    b20e:	693b      	ldr	r3, [r7, #16]
    b210:	2b06      	cmp	r3, #6
    b212:	d005      	beq.n	b220 <RTC_DateUpdate+0xa4>
    b214:	693b      	ldr	r3, [r7, #16]
    b216:	2b09      	cmp	r3, #9
    b218:	d002      	beq.n	b220 <RTC_DateUpdate+0xa4>
    b21a:	693b      	ldr	r3, [r7, #16]
    b21c:	2b0b      	cmp	r3, #11
    b21e:	d10c      	bne.n	b23a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
    b220:	68fb      	ldr	r3, [r7, #12]
    b222:	2b1d      	cmp	r3, #29
    b224:	d803      	bhi.n	b22e <RTC_DateUpdate+0xb2>
      {
        day++;
    b226:	68fb      	ldr	r3, [r7, #12]
    b228:	3301      	adds	r3, #1
    b22a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
    b22c:	e02c      	b.n	b288 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
    b22e:	693b      	ldr	r3, [r7, #16]
    b230:	3301      	adds	r3, #1
    b232:	613b      	str	r3, [r7, #16]
        day = 1U;
    b234:	2301      	movs	r3, #1
    b236:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
    b238:	e026      	b.n	b288 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
    b23a:	693b      	ldr	r3, [r7, #16]
    b23c:	2b02      	cmp	r3, #2
    b23e:	d123      	bne.n	b288 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
    b240:	68fb      	ldr	r3, [r7, #12]
    b242:	2b1b      	cmp	r3, #27
    b244:	d803      	bhi.n	b24e <RTC_DateUpdate+0xd2>
      {
        day++;
    b246:	68fb      	ldr	r3, [r7, #12]
    b248:	3301      	adds	r3, #1
    b24a:	60fb      	str	r3, [r7, #12]
    b24c:	e01c      	b.n	b288 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
    b24e:	68fb      	ldr	r3, [r7, #12]
    b250:	2b1c      	cmp	r3, #28
    b252:	d111      	bne.n	b278 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
    b254:	697b      	ldr	r3, [r7, #20]
    b256:	b29b      	uxth	r3, r3
    b258:	4618      	mov	r0, r3
    b25a:	f000 f839 	bl	b2d0 <RTC_IsLeapYear>
    b25e:	4603      	mov	r3, r0
    b260:	2b00      	cmp	r3, #0
    b262:	d003      	beq.n	b26c <RTC_DateUpdate+0xf0>
        {
          day++;
    b264:	68fb      	ldr	r3, [r7, #12]
    b266:	3301      	adds	r3, #1
    b268:	60fb      	str	r3, [r7, #12]
    b26a:	e00d      	b.n	b288 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
    b26c:	693b      	ldr	r3, [r7, #16]
    b26e:	3301      	adds	r3, #1
    b270:	613b      	str	r3, [r7, #16]
          day = 1U;
    b272:	2301      	movs	r3, #1
    b274:	60fb      	str	r3, [r7, #12]
    b276:	e007      	b.n	b288 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
    b278:	68fb      	ldr	r3, [r7, #12]
    b27a:	2b1d      	cmp	r3, #29
    b27c:	d104      	bne.n	b288 <RTC_DateUpdate+0x10c>
      {
        month++;
    b27e:	693b      	ldr	r3, [r7, #16]
    b280:	3301      	adds	r3, #1
    b282:	613b      	str	r3, [r7, #16]
        day = 1U;
    b284:	2301      	movs	r3, #1
    b286:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
    b288:	68bb      	ldr	r3, [r7, #8]
    b28a:	3301      	adds	r3, #1
    b28c:	60bb      	str	r3, [r7, #8]
    b28e:	68ba      	ldr	r2, [r7, #8]
    b290:	683b      	ldr	r3, [r7, #0]
    b292:	429a      	cmp	r2, r3
    b294:	d38b      	bcc.n	b1ae <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
    b296:	697b      	ldr	r3, [r7, #20]
    b298:	b2da      	uxtb	r2, r3
    b29a:	687b      	ldr	r3, [r7, #4]
    b29c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
    b29e:	693b      	ldr	r3, [r7, #16]
    b2a0:	b2da      	uxtb	r2, r3
    b2a2:	687b      	ldr	r3, [r7, #4]
    b2a4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
    b2a6:	68fb      	ldr	r3, [r7, #12]
    b2a8:	b2da      	uxtb	r2, r3
    b2aa:	687b      	ldr	r3, [r7, #4]
    b2ac:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
    b2ae:	693b      	ldr	r3, [r7, #16]
    b2b0:	b2db      	uxtb	r3, r3
    b2b2:	68fa      	ldr	r2, [r7, #12]
    b2b4:	b2d2      	uxtb	r2, r2
    b2b6:	4619      	mov	r1, r3
    b2b8:	6978      	ldr	r0, [r7, #20]
    b2ba:	f000 f83b 	bl	b334 <RTC_WeekDayNum>
    b2be:	4603      	mov	r3, r0
    b2c0:	461a      	mov	r2, r3
    b2c2:	687b      	ldr	r3, [r7, #4]
    b2c4:	731a      	strb	r2, [r3, #12]
}
    b2c6:	bf00      	nop
    b2c8:	3718      	adds	r7, #24
    b2ca:	46bd      	mov	sp, r7
    b2cc:	bd80      	pop	{r7, pc}
	...

0000b2d0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
    b2d0:	b480      	push	{r7}
    b2d2:	b083      	sub	sp, #12
    b2d4:	af00      	add	r7, sp, #0
    b2d6:	4603      	mov	r3, r0
    b2d8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
    b2da:	88fb      	ldrh	r3, [r7, #6]
    b2dc:	f003 0303 	and.w	r3, r3, #3
    b2e0:	b29b      	uxth	r3, r3
    b2e2:	2b00      	cmp	r3, #0
    b2e4:	d001      	beq.n	b2ea <RTC_IsLeapYear+0x1a>
  {
    return 0U;
    b2e6:	2300      	movs	r3, #0
    b2e8:	e01d      	b.n	b326 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
    b2ea:	88fb      	ldrh	r3, [r7, #6]
    b2ec:	4a10      	ldr	r2, [pc, #64]	; (b330 <RTC_IsLeapYear+0x60>)
    b2ee:	fba2 1203 	umull	r1, r2, r2, r3
    b2f2:	0952      	lsrs	r2, r2, #5
    b2f4:	2164      	movs	r1, #100	; 0x64
    b2f6:	fb01 f202 	mul.w	r2, r1, r2
    b2fa:	1a9b      	subs	r3, r3, r2
    b2fc:	b29b      	uxth	r3, r3
    b2fe:	2b00      	cmp	r3, #0
    b300:	d001      	beq.n	b306 <RTC_IsLeapYear+0x36>
  {
    return 1U;
    b302:	2301      	movs	r3, #1
    b304:	e00f      	b.n	b326 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
    b306:	88fb      	ldrh	r3, [r7, #6]
    b308:	4a09      	ldr	r2, [pc, #36]	; (b330 <RTC_IsLeapYear+0x60>)
    b30a:	fba2 1203 	umull	r1, r2, r2, r3
    b30e:	09d2      	lsrs	r2, r2, #7
    b310:	f44f 71c8 	mov.w	r1, #400	; 0x190
    b314:	fb01 f202 	mul.w	r2, r1, r2
    b318:	1a9b      	subs	r3, r3, r2
    b31a:	b29b      	uxth	r3, r3
    b31c:	2b00      	cmp	r3, #0
    b31e:	d101      	bne.n	b324 <RTC_IsLeapYear+0x54>
  {
    return 1U;
    b320:	2301      	movs	r3, #1
    b322:	e000      	b.n	b326 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
    b324:	2300      	movs	r3, #0
  }
}
    b326:	4618      	mov	r0, r3
    b328:	370c      	adds	r7, #12
    b32a:	46bd      	mov	sp, r7
    b32c:	bc80      	pop	{r7}
    b32e:	4770      	bx	lr
    b330:	51eb851f 	.word	0x51eb851f

0000b334 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
    b334:	b480      	push	{r7}
    b336:	b085      	sub	sp, #20
    b338:	af00      	add	r7, sp, #0
    b33a:	6078      	str	r0, [r7, #4]
    b33c:	460b      	mov	r3, r1
    b33e:	70fb      	strb	r3, [r7, #3]
    b340:	4613      	mov	r3, r2
    b342:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
    b344:	2300      	movs	r3, #0
    b346:	60bb      	str	r3, [r7, #8]
    b348:	2300      	movs	r3, #0
    b34a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
    b34c:	687b      	ldr	r3, [r7, #4]
    b34e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
    b352:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
    b354:	78fb      	ldrb	r3, [r7, #3]
    b356:	2b02      	cmp	r3, #2
    b358:	d82d      	bhi.n	b3b6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
    b35a:	78fa      	ldrb	r2, [r7, #3]
    b35c:	4613      	mov	r3, r2
    b35e:	005b      	lsls	r3, r3, #1
    b360:	4413      	add	r3, r2
    b362:	00db      	lsls	r3, r3, #3
    b364:	1a9b      	subs	r3, r3, r2
    b366:	4a2c      	ldr	r2, [pc, #176]	; (b418 <RTC_WeekDayNum+0xe4>)
    b368:	fba2 2303 	umull	r2, r3, r2, r3
    b36c:	085a      	lsrs	r2, r3, #1
    b36e:	78bb      	ldrb	r3, [r7, #2]
    b370:	441a      	add	r2, r3
    b372:	68bb      	ldr	r3, [r7, #8]
    b374:	441a      	add	r2, r3
    b376:	68bb      	ldr	r3, [r7, #8]
    b378:	3b01      	subs	r3, #1
    b37a:	089b      	lsrs	r3, r3, #2
    b37c:	441a      	add	r2, r3
    b37e:	68bb      	ldr	r3, [r7, #8]
    b380:	3b01      	subs	r3, #1
    b382:	4926      	ldr	r1, [pc, #152]	; (b41c <RTC_WeekDayNum+0xe8>)
    b384:	fba1 1303 	umull	r1, r3, r1, r3
    b388:	095b      	lsrs	r3, r3, #5
    b38a:	1ad2      	subs	r2, r2, r3
    b38c:	68bb      	ldr	r3, [r7, #8]
    b38e:	3b01      	subs	r3, #1
    b390:	4922      	ldr	r1, [pc, #136]	; (b41c <RTC_WeekDayNum+0xe8>)
    b392:	fba1 1303 	umull	r1, r3, r1, r3
    b396:	09db      	lsrs	r3, r3, #7
    b398:	4413      	add	r3, r2
    b39a:	1d1a      	adds	r2, r3, #4
    b39c:	4b20      	ldr	r3, [pc, #128]	; (b420 <RTC_WeekDayNum+0xec>)
    b39e:	fba3 1302 	umull	r1, r3, r3, r2
    b3a2:	1ad1      	subs	r1, r2, r3
    b3a4:	0849      	lsrs	r1, r1, #1
    b3a6:	440b      	add	r3, r1
    b3a8:	0899      	lsrs	r1, r3, #2
    b3aa:	460b      	mov	r3, r1
    b3ac:	00db      	lsls	r3, r3, #3
    b3ae:	1a5b      	subs	r3, r3, r1
    b3b0:	1ad3      	subs	r3, r2, r3
    b3b2:	60fb      	str	r3, [r7, #12]
    b3b4:	e029      	b.n	b40a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
    b3b6:	78fa      	ldrb	r2, [r7, #3]
    b3b8:	4613      	mov	r3, r2
    b3ba:	005b      	lsls	r3, r3, #1
    b3bc:	4413      	add	r3, r2
    b3be:	00db      	lsls	r3, r3, #3
    b3c0:	1a9b      	subs	r3, r3, r2
    b3c2:	4a15      	ldr	r2, [pc, #84]	; (b418 <RTC_WeekDayNum+0xe4>)
    b3c4:	fba2 2303 	umull	r2, r3, r2, r3
    b3c8:	085a      	lsrs	r2, r3, #1
    b3ca:	78bb      	ldrb	r3, [r7, #2]
    b3cc:	441a      	add	r2, r3
    b3ce:	68bb      	ldr	r3, [r7, #8]
    b3d0:	441a      	add	r2, r3
    b3d2:	68bb      	ldr	r3, [r7, #8]
    b3d4:	089b      	lsrs	r3, r3, #2
    b3d6:	441a      	add	r2, r3
    b3d8:	68bb      	ldr	r3, [r7, #8]
    b3da:	4910      	ldr	r1, [pc, #64]	; (b41c <RTC_WeekDayNum+0xe8>)
    b3dc:	fba1 1303 	umull	r1, r3, r1, r3
    b3e0:	095b      	lsrs	r3, r3, #5
    b3e2:	1ad2      	subs	r2, r2, r3
    b3e4:	68bb      	ldr	r3, [r7, #8]
    b3e6:	490d      	ldr	r1, [pc, #52]	; (b41c <RTC_WeekDayNum+0xe8>)
    b3e8:	fba1 1303 	umull	r1, r3, r1, r3
    b3ec:	09db      	lsrs	r3, r3, #7
    b3ee:	4413      	add	r3, r2
    b3f0:	1c9a      	adds	r2, r3, #2
    b3f2:	4b0b      	ldr	r3, [pc, #44]	; (b420 <RTC_WeekDayNum+0xec>)
    b3f4:	fba3 1302 	umull	r1, r3, r3, r2
    b3f8:	1ad1      	subs	r1, r2, r3
    b3fa:	0849      	lsrs	r1, r1, #1
    b3fc:	440b      	add	r3, r1
    b3fe:	0899      	lsrs	r1, r3, #2
    b400:	460b      	mov	r3, r1
    b402:	00db      	lsls	r3, r3, #3
    b404:	1a5b      	subs	r3, r3, r1
    b406:	1ad3      	subs	r3, r2, r3
    b408:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
    b40a:	68fb      	ldr	r3, [r7, #12]
    b40c:	b2db      	uxtb	r3, r3
}
    b40e:	4618      	mov	r0, r3
    b410:	3714      	adds	r7, #20
    b412:	46bd      	mov	sp, r7
    b414:	bc80      	pop	{r7}
    b416:	4770      	bx	lr
    b418:	38e38e39 	.word	0x38e38e39
    b41c:	51eb851f 	.word	0x51eb851f
    b420:	24924925 	.word	0x24924925

0000b424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
    b424:	b580      	push	{r7, lr}
    b426:	b082      	sub	sp, #8
    b428:	af00      	add	r7, sp, #0
    b42a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
    b42c:	687b      	ldr	r3, [r7, #4]
    b42e:	2b00      	cmp	r3, #0
    b430:	d101      	bne.n	b436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
    b432:	2301      	movs	r3, #1
    b434:	e053      	b.n	b4de <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    b436:	687b      	ldr	r3, [r7, #4]
    b438:	2200      	movs	r2, #0
    b43a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
    b43c:	687b      	ldr	r3, [r7, #4]
    b43e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
    b442:	b2db      	uxtb	r3, r3
    b444:	2b00      	cmp	r3, #0
    b446:	d106      	bne.n	b456 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
    b448:	687b      	ldr	r3, [r7, #4]
    b44a:	2200      	movs	r2, #0
    b44c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
    b450:	6878      	ldr	r0, [r7, #4]
    b452:	f002 fdc5 	bl	dfe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
    b456:	687b      	ldr	r3, [r7, #4]
    b458:	2202      	movs	r2, #2
    b45a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
    b45e:	687b      	ldr	r3, [r7, #4]
    b460:	681b      	ldr	r3, [r3, #0]
    b462:	681a      	ldr	r2, [r3, #0]
    b464:	687b      	ldr	r3, [r7, #4]
    b466:	681b      	ldr	r3, [r3, #0]
    b468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    b46c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
    b46e:	687b      	ldr	r3, [r7, #4]
    b470:	685a      	ldr	r2, [r3, #4]
    b472:	687b      	ldr	r3, [r7, #4]
    b474:	689b      	ldr	r3, [r3, #8]
    b476:	431a      	orrs	r2, r3
    b478:	687b      	ldr	r3, [r7, #4]
    b47a:	68db      	ldr	r3, [r3, #12]
    b47c:	431a      	orrs	r2, r3
    b47e:	687b      	ldr	r3, [r7, #4]
    b480:	691b      	ldr	r3, [r3, #16]
    b482:	431a      	orrs	r2, r3
    b484:	687b      	ldr	r3, [r7, #4]
    b486:	695b      	ldr	r3, [r3, #20]
    b488:	431a      	orrs	r2, r3
    b48a:	687b      	ldr	r3, [r7, #4]
    b48c:	699b      	ldr	r3, [r3, #24]
    b48e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    b492:	431a      	orrs	r2, r3
    b494:	687b      	ldr	r3, [r7, #4]
    b496:	69db      	ldr	r3, [r3, #28]
    b498:	431a      	orrs	r2, r3
    b49a:	687b      	ldr	r3, [r7, #4]
    b49c:	6a1b      	ldr	r3, [r3, #32]
    b49e:	ea42 0103 	orr.w	r1, r2, r3
    b4a2:	687b      	ldr	r3, [r7, #4]
    b4a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b4a6:	687b      	ldr	r3, [r7, #4]
    b4a8:	681b      	ldr	r3, [r3, #0]
    b4aa:	430a      	orrs	r2, r1
    b4ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
    b4ae:	687b      	ldr	r3, [r7, #4]
    b4b0:	699b      	ldr	r3, [r3, #24]
    b4b2:	0c1a      	lsrs	r2, r3, #16
    b4b4:	687b      	ldr	r3, [r7, #4]
    b4b6:	681b      	ldr	r3, [r3, #0]
    b4b8:	f002 0204 	and.w	r2, r2, #4
    b4bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
    b4be:	687b      	ldr	r3, [r7, #4]
    b4c0:	681b      	ldr	r3, [r3, #0]
    b4c2:	69da      	ldr	r2, [r3, #28]
    b4c4:	687b      	ldr	r3, [r7, #4]
    b4c6:	681b      	ldr	r3, [r3, #0]
    b4c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    b4cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
    b4ce:	687b      	ldr	r3, [r7, #4]
    b4d0:	2200      	movs	r2, #0
    b4d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
    b4d4:	687b      	ldr	r3, [r7, #4]
    b4d6:	2201      	movs	r2, #1
    b4d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
    b4dc:	2300      	movs	r3, #0
}
    b4de:	4618      	mov	r0, r3
    b4e0:	3708      	adds	r7, #8
    b4e2:	46bd      	mov	sp, r7
    b4e4:	bd80      	pop	{r7, pc}

0000b4e6 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
    b4e6:	b084      	sub	sp, #16
    b4e8:	b480      	push	{r7}
    b4ea:	b083      	sub	sp, #12
    b4ec:	af00      	add	r7, sp, #0
    b4ee:	6078      	str	r0, [r7, #4]
    b4f0:	f107 0014 	add.w	r0, r7, #20
    b4f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
    b4f8:	2300      	movs	r3, #0
}
    b4fa:	4618      	mov	r0, r3
    b4fc:	370c      	adds	r7, #12
    b4fe:	46bd      	mov	sp, r7
    b500:	bc80      	pop	{r7}
    b502:	b004      	add	sp, #16
    b504:	4770      	bx	lr

0000b506 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
    b506:	b480      	push	{r7}
    b508:	b085      	sub	sp, #20
    b50a:	af00      	add	r7, sp, #0
    b50c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
    b50e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
    b512:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
    b514:	687b      	ldr	r3, [r7, #4]
    b516:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    b51a:	b29a      	uxth	r2, r3
    b51c:	89fb      	ldrh	r3, [r7, #14]
    b51e:	4313      	orrs	r3, r2
    b520:	b29a      	uxth	r2, r3
    b522:	687b      	ldr	r3, [r7, #4]
    b524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
    b528:	2300      	movs	r3, #0
}
    b52a:	4618      	mov	r0, r3
    b52c:	3714      	adds	r7, #20
    b52e:	46bd      	mov	sp, r7
    b530:	bc80      	pop	{r7}
    b532:	4770      	bx	lr

0000b534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
    b534:	b480      	push	{r7}
    b536:	b085      	sub	sp, #20
    b538:	af00      	add	r7, sp, #0
    b53a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
    b53c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
    b540:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
    b542:	687b      	ldr	r3, [r7, #4]
    b544:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    b548:	b29b      	uxth	r3, r3
    b54a:	b21a      	sxth	r2, r3
    b54c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    b550:	43db      	mvns	r3, r3
    b552:	b21b      	sxth	r3, r3
    b554:	4013      	ands	r3, r2
    b556:	b21b      	sxth	r3, r3
    b558:	b29a      	uxth	r2, r3
    b55a:	687b      	ldr	r3, [r7, #4]
    b55c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
    b560:	2300      	movs	r3, #0
}
    b562:	4618      	mov	r0, r3
    b564:	3714      	adds	r7, #20
    b566:	46bd      	mov	sp, r7
    b568:	bc80      	pop	{r7}
    b56a:	4770      	bx	lr

0000b56c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
    b56c:	b480      	push	{r7}
    b56e:	b083      	sub	sp, #12
    b570:	af00      	add	r7, sp, #0
    b572:	6078      	str	r0, [r7, #4]
    b574:	460b      	mov	r3, r1
    b576:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
    b578:	2300      	movs	r3, #0
}
    b57a:	4618      	mov	r0, r3
    b57c:	370c      	adds	r7, #12
    b57e:	46bd      	mov	sp, r7
    b580:	bc80      	pop	{r7}
    b582:	4770      	bx	lr

0000b584 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
    b584:	b084      	sub	sp, #16
    b586:	b580      	push	{r7, lr}
    b588:	b082      	sub	sp, #8
    b58a:	af00      	add	r7, sp, #0
    b58c:	6078      	str	r0, [r7, #4]
    b58e:	f107 0014 	add.w	r0, r7, #20
    b592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
    b596:	687b      	ldr	r3, [r7, #4]
    b598:	2201      	movs	r2, #1
    b59a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
    b59e:	687b      	ldr	r3, [r7, #4]
    b5a0:	2200      	movs	r2, #0
    b5a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
    b5a6:	687b      	ldr	r3, [r7, #4]
    b5a8:	2200      	movs	r2, #0
    b5aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    b5ae:	687b      	ldr	r3, [r7, #4]
    b5b0:	2200      	movs	r2, #0
    b5b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
    b5b6:	6878      	ldr	r0, [r7, #4]
    b5b8:	f7ff ffa5 	bl	b506 <USB_EnableGlobalInt>

  return HAL_OK;
    b5bc:	2300      	movs	r3, #0
}
    b5be:	4618      	mov	r0, r3
    b5c0:	3708      	adds	r7, #8
    b5c2:	46bd      	mov	sp, r7
    b5c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    b5c8:	b004      	add	sp, #16
    b5ca:	4770      	bx	lr

0000b5cc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
    b5cc:	b490      	push	{r4, r7}
    b5ce:	b084      	sub	sp, #16
    b5d0:	af00      	add	r7, sp, #0
    b5d2:	6078      	str	r0, [r7, #4]
    b5d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
    b5d6:	2300      	movs	r3, #0
    b5d8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
    b5da:	687a      	ldr	r2, [r7, #4]
    b5dc:	683b      	ldr	r3, [r7, #0]
    b5de:	781b      	ldrb	r3, [r3, #0]
    b5e0:	009b      	lsls	r3, r3, #2
    b5e2:	4413      	add	r3, r2
    b5e4:	881b      	ldrh	r3, [r3, #0]
    b5e6:	b29b      	uxth	r3, r3
    b5e8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
    b5ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    b5f0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
    b5f2:	683b      	ldr	r3, [r7, #0]
    b5f4:	78db      	ldrb	r3, [r3, #3]
    b5f6:	2b03      	cmp	r3, #3
    b5f8:	d819      	bhi.n	b62e <USB_ActivateEndpoint+0x62>
    b5fa:	a201      	add	r2, pc, #4	; (adr r2, b600 <USB_ActivateEndpoint+0x34>)
    b5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b600:	0000b611 	.word	0x0000b611
    b604:	0000b625 	.word	0x0000b625
    b608:	0000b635 	.word	0x0000b635
    b60c:	0000b61b 	.word	0x0000b61b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
    b610:	89bb      	ldrh	r3, [r7, #12]
    b612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b616:	81bb      	strh	r3, [r7, #12]
      break;
    b618:	e00d      	b.n	b636 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
    b61a:	89bb      	ldrh	r3, [r7, #12]
    b61c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    b620:	81bb      	strh	r3, [r7, #12]
      break;
    b622:	e008      	b.n	b636 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
    b624:	89bb      	ldrh	r3, [r7, #12]
    b626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    b62a:	81bb      	strh	r3, [r7, #12]
      break;
    b62c:	e003      	b.n	b636 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
    b62e:	2301      	movs	r3, #1
    b630:	73fb      	strb	r3, [r7, #15]
      break;
    b632:	e000      	b.n	b636 <USB_ActivateEndpoint+0x6a>
      break;
    b634:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
    b636:	687a      	ldr	r2, [r7, #4]
    b638:	683b      	ldr	r3, [r7, #0]
    b63a:	781b      	ldrb	r3, [r3, #0]
    b63c:	009b      	lsls	r3, r3, #2
    b63e:	441a      	add	r2, r3
    b640:	89bb      	ldrh	r3, [r7, #12]
    b642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    b646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
    b64a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b64e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b652:	b29b      	uxth	r3, r3
    b654:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
    b656:	687a      	ldr	r2, [r7, #4]
    b658:	683b      	ldr	r3, [r7, #0]
    b65a:	781b      	ldrb	r3, [r3, #0]
    b65c:	009b      	lsls	r3, r3, #2
    b65e:	4413      	add	r3, r2
    b660:	881b      	ldrh	r3, [r3, #0]
    b662:	b29b      	uxth	r3, r3
    b664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    b668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    b66c:	b29a      	uxth	r2, r3
    b66e:	683b      	ldr	r3, [r7, #0]
    b670:	781b      	ldrb	r3, [r3, #0]
    b672:	b29b      	uxth	r3, r3
    b674:	4313      	orrs	r3, r2
    b676:	b29c      	uxth	r4, r3
    b678:	687a      	ldr	r2, [r7, #4]
    b67a:	683b      	ldr	r3, [r7, #0]
    b67c:	781b      	ldrb	r3, [r3, #0]
    b67e:	009b      	lsls	r3, r3, #2
    b680:	441a      	add	r2, r3
    b682:	4b8a      	ldr	r3, [pc, #552]	; (b8ac <USB_ActivateEndpoint+0x2e0>)
    b684:	4323      	orrs	r3, r4
    b686:	b29b      	uxth	r3, r3
    b688:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
    b68a:	683b      	ldr	r3, [r7, #0]
    b68c:	7b1b      	ldrb	r3, [r3, #12]
    b68e:	2b00      	cmp	r3, #0
    b690:	f040 8112 	bne.w	b8b8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
    b694:	683b      	ldr	r3, [r7, #0]
    b696:	785b      	ldrb	r3, [r3, #1]
    b698:	2b00      	cmp	r3, #0
    b69a:	d067      	beq.n	b76c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
    b69c:	687c      	ldr	r4, [r7, #4]
    b69e:	687b      	ldr	r3, [r7, #4]
    b6a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    b6a4:	b29b      	uxth	r3, r3
    b6a6:	441c      	add	r4, r3
    b6a8:	683b      	ldr	r3, [r7, #0]
    b6aa:	781b      	ldrb	r3, [r3, #0]
    b6ac:	011b      	lsls	r3, r3, #4
    b6ae:	4423      	add	r3, r4
    b6b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    b6b4:	461c      	mov	r4, r3
    b6b6:	683b      	ldr	r3, [r7, #0]
    b6b8:	88db      	ldrh	r3, [r3, #6]
    b6ba:	085b      	lsrs	r3, r3, #1
    b6bc:	b29b      	uxth	r3, r3
    b6be:	005b      	lsls	r3, r3, #1
    b6c0:	b29b      	uxth	r3, r3
    b6c2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
    b6c4:	687a      	ldr	r2, [r7, #4]
    b6c6:	683b      	ldr	r3, [r7, #0]
    b6c8:	781b      	ldrb	r3, [r3, #0]
    b6ca:	009b      	lsls	r3, r3, #2
    b6cc:	4413      	add	r3, r2
    b6ce:	881b      	ldrh	r3, [r3, #0]
    b6d0:	b29c      	uxth	r4, r3
    b6d2:	4623      	mov	r3, r4
    b6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b6d8:	2b00      	cmp	r3, #0
    b6da:	d014      	beq.n	b706 <USB_ActivateEndpoint+0x13a>
    b6dc:	687a      	ldr	r2, [r7, #4]
    b6de:	683b      	ldr	r3, [r7, #0]
    b6e0:	781b      	ldrb	r3, [r3, #0]
    b6e2:	009b      	lsls	r3, r3, #2
    b6e4:	4413      	add	r3, r2
    b6e6:	881b      	ldrh	r3, [r3, #0]
    b6e8:	b29b      	uxth	r3, r3
    b6ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    b6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    b6f2:	b29c      	uxth	r4, r3
    b6f4:	687a      	ldr	r2, [r7, #4]
    b6f6:	683b      	ldr	r3, [r7, #0]
    b6f8:	781b      	ldrb	r3, [r3, #0]
    b6fa:	009b      	lsls	r3, r3, #2
    b6fc:	441a      	add	r2, r3
    b6fe:	4b6c      	ldr	r3, [pc, #432]	; (b8b0 <USB_ActivateEndpoint+0x2e4>)
    b700:	4323      	orrs	r3, r4
    b702:	b29b      	uxth	r3, r3
    b704:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
    b706:	683b      	ldr	r3, [r7, #0]
    b708:	78db      	ldrb	r3, [r3, #3]
    b70a:	2b01      	cmp	r3, #1
    b70c:	d018      	beq.n	b740 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
    b70e:	687a      	ldr	r2, [r7, #4]
    b710:	683b      	ldr	r3, [r7, #0]
    b712:	781b      	ldrb	r3, [r3, #0]
    b714:	009b      	lsls	r3, r3, #2
    b716:	4413      	add	r3, r2
    b718:	881b      	ldrh	r3, [r3, #0]
    b71a:	b29b      	uxth	r3, r3
    b71c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    b720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    b724:	b29c      	uxth	r4, r3
    b726:	f084 0320 	eor.w	r3, r4, #32
    b72a:	b29c      	uxth	r4, r3
    b72c:	687a      	ldr	r2, [r7, #4]
    b72e:	683b      	ldr	r3, [r7, #0]
    b730:	781b      	ldrb	r3, [r3, #0]
    b732:	009b      	lsls	r3, r3, #2
    b734:	441a      	add	r2, r3
    b736:	4b5d      	ldr	r3, [pc, #372]	; (b8ac <USB_ActivateEndpoint+0x2e0>)
    b738:	4323      	orrs	r3, r4
    b73a:	b29b      	uxth	r3, r3
    b73c:	8013      	strh	r3, [r2, #0]
    b73e:	e22b      	b.n	bb98 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
    b740:	687a      	ldr	r2, [r7, #4]
    b742:	683b      	ldr	r3, [r7, #0]
    b744:	781b      	ldrb	r3, [r3, #0]
    b746:	009b      	lsls	r3, r3, #2
    b748:	4413      	add	r3, r2
    b74a:	881b      	ldrh	r3, [r3, #0]
    b74c:	b29b      	uxth	r3, r3
    b74e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    b752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    b756:	b29c      	uxth	r4, r3
    b758:	687a      	ldr	r2, [r7, #4]
    b75a:	683b      	ldr	r3, [r7, #0]
    b75c:	781b      	ldrb	r3, [r3, #0]
    b75e:	009b      	lsls	r3, r3, #2
    b760:	441a      	add	r2, r3
    b762:	4b52      	ldr	r3, [pc, #328]	; (b8ac <USB_ActivateEndpoint+0x2e0>)
    b764:	4323      	orrs	r3, r4
    b766:	b29b      	uxth	r3, r3
    b768:	8013      	strh	r3, [r2, #0]
    b76a:	e215      	b.n	bb98 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
    b76c:	687c      	ldr	r4, [r7, #4]
    b76e:	687b      	ldr	r3, [r7, #4]
    b770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    b774:	b29b      	uxth	r3, r3
    b776:	441c      	add	r4, r3
    b778:	683b      	ldr	r3, [r7, #0]
    b77a:	781b      	ldrb	r3, [r3, #0]
    b77c:	011b      	lsls	r3, r3, #4
    b77e:	4423      	add	r3, r4
    b780:	f503 6381 	add.w	r3, r3, #1032	; 0x408
    b784:	461c      	mov	r4, r3
    b786:	683b      	ldr	r3, [r7, #0]
    b788:	88db      	ldrh	r3, [r3, #6]
    b78a:	085b      	lsrs	r3, r3, #1
    b78c:	b29b      	uxth	r3, r3
    b78e:	005b      	lsls	r3, r3, #1
    b790:	b29b      	uxth	r3, r3
    b792:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
    b794:	687c      	ldr	r4, [r7, #4]
    b796:	687b      	ldr	r3, [r7, #4]
    b798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    b79c:	b29b      	uxth	r3, r3
    b79e:	441c      	add	r4, r3
    b7a0:	683b      	ldr	r3, [r7, #0]
    b7a2:	781b      	ldrb	r3, [r3, #0]
    b7a4:	011b      	lsls	r3, r3, #4
    b7a6:	4423      	add	r3, r4
    b7a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
    b7ac:	461c      	mov	r4, r3
    b7ae:	683b      	ldr	r3, [r7, #0]
    b7b0:	691b      	ldr	r3, [r3, #16]
    b7b2:	2b00      	cmp	r3, #0
    b7b4:	d10e      	bne.n	b7d4 <USB_ActivateEndpoint+0x208>
    b7b6:	8823      	ldrh	r3, [r4, #0]
    b7b8:	b29b      	uxth	r3, r3
    b7ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    b7be:	b29b      	uxth	r3, r3
    b7c0:	8023      	strh	r3, [r4, #0]
    b7c2:	8823      	ldrh	r3, [r4, #0]
    b7c4:	b29b      	uxth	r3, r3
    b7c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    b7ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    b7ce:	b29b      	uxth	r3, r3
    b7d0:	8023      	strh	r3, [r4, #0]
    b7d2:	e02d      	b.n	b830 <USB_ActivateEndpoint+0x264>
    b7d4:	683b      	ldr	r3, [r7, #0]
    b7d6:	691b      	ldr	r3, [r3, #16]
    b7d8:	2b3e      	cmp	r3, #62	; 0x3e
    b7da:	d812      	bhi.n	b802 <USB_ActivateEndpoint+0x236>
    b7dc:	683b      	ldr	r3, [r7, #0]
    b7de:	691b      	ldr	r3, [r3, #16]
    b7e0:	085b      	lsrs	r3, r3, #1
    b7e2:	60bb      	str	r3, [r7, #8]
    b7e4:	683b      	ldr	r3, [r7, #0]
    b7e6:	691b      	ldr	r3, [r3, #16]
    b7e8:	f003 0301 	and.w	r3, r3, #1
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	d002      	beq.n	b7f6 <USB_ActivateEndpoint+0x22a>
    b7f0:	68bb      	ldr	r3, [r7, #8]
    b7f2:	3301      	adds	r3, #1
    b7f4:	60bb      	str	r3, [r7, #8]
    b7f6:	68bb      	ldr	r3, [r7, #8]
    b7f8:	b29b      	uxth	r3, r3
    b7fa:	029b      	lsls	r3, r3, #10
    b7fc:	b29b      	uxth	r3, r3
    b7fe:	8023      	strh	r3, [r4, #0]
    b800:	e016      	b.n	b830 <USB_ActivateEndpoint+0x264>
    b802:	683b      	ldr	r3, [r7, #0]
    b804:	691b      	ldr	r3, [r3, #16]
    b806:	095b      	lsrs	r3, r3, #5
    b808:	60bb      	str	r3, [r7, #8]
    b80a:	683b      	ldr	r3, [r7, #0]
    b80c:	691b      	ldr	r3, [r3, #16]
    b80e:	f003 031f 	and.w	r3, r3, #31
    b812:	2b00      	cmp	r3, #0
    b814:	d102      	bne.n	b81c <USB_ActivateEndpoint+0x250>
    b816:	68bb      	ldr	r3, [r7, #8]
    b818:	3b01      	subs	r3, #1
    b81a:	60bb      	str	r3, [r7, #8]
    b81c:	68bb      	ldr	r3, [r7, #8]
    b81e:	b29b      	uxth	r3, r3
    b820:	029b      	lsls	r3, r3, #10
    b822:	b29b      	uxth	r3, r3
    b824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    b828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    b82c:	b29b      	uxth	r3, r3
    b82e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
    b830:	687a      	ldr	r2, [r7, #4]
    b832:	683b      	ldr	r3, [r7, #0]
    b834:	781b      	ldrb	r3, [r3, #0]
    b836:	009b      	lsls	r3, r3, #2
    b838:	4413      	add	r3, r2
    b83a:	881b      	ldrh	r3, [r3, #0]
    b83c:	b29c      	uxth	r4, r3
    b83e:	4623      	mov	r3, r4
    b840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b844:	2b00      	cmp	r3, #0
    b846:	d014      	beq.n	b872 <USB_ActivateEndpoint+0x2a6>
    b848:	687a      	ldr	r2, [r7, #4]
    b84a:	683b      	ldr	r3, [r7, #0]
    b84c:	781b      	ldrb	r3, [r3, #0]
    b84e:	009b      	lsls	r3, r3, #2
    b850:	4413      	add	r3, r2
    b852:	881b      	ldrh	r3, [r3, #0]
    b854:	b29b      	uxth	r3, r3
    b856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    b85a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    b85e:	b29c      	uxth	r4, r3
    b860:	687a      	ldr	r2, [r7, #4]
    b862:	683b      	ldr	r3, [r7, #0]
    b864:	781b      	ldrb	r3, [r3, #0]
    b866:	009b      	lsls	r3, r3, #2
    b868:	441a      	add	r2, r3
    b86a:	4b12      	ldr	r3, [pc, #72]	; (b8b4 <USB_ActivateEndpoint+0x2e8>)
    b86c:	4323      	orrs	r3, r4
    b86e:	b29b      	uxth	r3, r3
    b870:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
    b872:	687a      	ldr	r2, [r7, #4]
    b874:	683b      	ldr	r3, [r7, #0]
    b876:	781b      	ldrb	r3, [r3, #0]
    b878:	009b      	lsls	r3, r3, #2
    b87a:	4413      	add	r3, r2
    b87c:	881b      	ldrh	r3, [r3, #0]
    b87e:	b29b      	uxth	r3, r3
    b880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    b884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    b888:	b29c      	uxth	r4, r3
    b88a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
    b88e:	b29c      	uxth	r4, r3
    b890:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
    b894:	b29c      	uxth	r4, r3
    b896:	687a      	ldr	r2, [r7, #4]
    b898:	683b      	ldr	r3, [r7, #0]
    b89a:	781b      	ldrb	r3, [r3, #0]
    b89c:	009b      	lsls	r3, r3, #2
    b89e:	441a      	add	r2, r3
    b8a0:	4b02      	ldr	r3, [pc, #8]	; (b8ac <USB_ActivateEndpoint+0x2e0>)
    b8a2:	4323      	orrs	r3, r4
    b8a4:	b29b      	uxth	r3, r3
    b8a6:	8013      	strh	r3, [r2, #0]
    b8a8:	e176      	b.n	bb98 <USB_ActivateEndpoint+0x5cc>
    b8aa:	bf00      	nop
    b8ac:	ffff8080 	.word	0xffff8080
    b8b0:	ffff80c0 	.word	0xffff80c0
    b8b4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
    b8b8:	687a      	ldr	r2, [r7, #4]
    b8ba:	683b      	ldr	r3, [r7, #0]
    b8bc:	781b      	ldrb	r3, [r3, #0]
    b8be:	009b      	lsls	r3, r3, #2
    b8c0:	4413      	add	r3, r2
    b8c2:	881b      	ldrh	r3, [r3, #0]
    b8c4:	b29b      	uxth	r3, r3
    b8c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    b8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    b8ce:	b29c      	uxth	r4, r3
    b8d0:	687a      	ldr	r2, [r7, #4]
    b8d2:	683b      	ldr	r3, [r7, #0]
    b8d4:	781b      	ldrb	r3, [r3, #0]
    b8d6:	009b      	lsls	r3, r3, #2
    b8d8:	441a      	add	r2, r3
    b8da:	4b96      	ldr	r3, [pc, #600]	; (bb34 <USB_ActivateEndpoint+0x568>)
    b8dc:	4323      	orrs	r3, r4
    b8de:	b29b      	uxth	r3, r3
    b8e0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
    b8e2:	687c      	ldr	r4, [r7, #4]
    b8e4:	687b      	ldr	r3, [r7, #4]
    b8e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    b8ea:	b29b      	uxth	r3, r3
    b8ec:	441c      	add	r4, r3
    b8ee:	683b      	ldr	r3, [r7, #0]
    b8f0:	781b      	ldrb	r3, [r3, #0]
    b8f2:	011b      	lsls	r3, r3, #4
    b8f4:	4423      	add	r3, r4
    b8f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    b8fa:	461c      	mov	r4, r3
    b8fc:	683b      	ldr	r3, [r7, #0]
    b8fe:	891b      	ldrh	r3, [r3, #8]
    b900:	085b      	lsrs	r3, r3, #1
    b902:	b29b      	uxth	r3, r3
    b904:	005b      	lsls	r3, r3, #1
    b906:	b29b      	uxth	r3, r3
    b908:	8023      	strh	r3, [r4, #0]
    b90a:	687c      	ldr	r4, [r7, #4]
    b90c:	687b      	ldr	r3, [r7, #4]
    b90e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    b912:	b29b      	uxth	r3, r3
    b914:	441c      	add	r4, r3
    b916:	683b      	ldr	r3, [r7, #0]
    b918:	781b      	ldrb	r3, [r3, #0]
    b91a:	011b      	lsls	r3, r3, #4
    b91c:	4423      	add	r3, r4
    b91e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
    b922:	461c      	mov	r4, r3
    b924:	683b      	ldr	r3, [r7, #0]
    b926:	895b      	ldrh	r3, [r3, #10]
    b928:	085b      	lsrs	r3, r3, #1
    b92a:	b29b      	uxth	r3, r3
    b92c:	005b      	lsls	r3, r3, #1
    b92e:	b29b      	uxth	r3, r3
    b930:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
    b932:	683b      	ldr	r3, [r7, #0]
    b934:	785b      	ldrb	r3, [r3, #1]
    b936:	2b00      	cmp	r3, #0
    b938:	f040 8088 	bne.w	ba4c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
    b93c:	687a      	ldr	r2, [r7, #4]
    b93e:	683b      	ldr	r3, [r7, #0]
    b940:	781b      	ldrb	r3, [r3, #0]
    b942:	009b      	lsls	r3, r3, #2
    b944:	4413      	add	r3, r2
    b946:	881b      	ldrh	r3, [r3, #0]
    b948:	b29c      	uxth	r4, r3
    b94a:	4623      	mov	r3, r4
    b94c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b950:	2b00      	cmp	r3, #0
    b952:	d014      	beq.n	b97e <USB_ActivateEndpoint+0x3b2>
    b954:	687a      	ldr	r2, [r7, #4]
    b956:	683b      	ldr	r3, [r7, #0]
    b958:	781b      	ldrb	r3, [r3, #0]
    b95a:	009b      	lsls	r3, r3, #2
    b95c:	4413      	add	r3, r2
    b95e:	881b      	ldrh	r3, [r3, #0]
    b960:	b29b      	uxth	r3, r3
    b962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    b966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    b96a:	b29c      	uxth	r4, r3
    b96c:	687a      	ldr	r2, [r7, #4]
    b96e:	683b      	ldr	r3, [r7, #0]
    b970:	781b      	ldrb	r3, [r3, #0]
    b972:	009b      	lsls	r3, r3, #2
    b974:	441a      	add	r2, r3
    b976:	4b70      	ldr	r3, [pc, #448]	; (bb38 <USB_ActivateEndpoint+0x56c>)
    b978:	4323      	orrs	r3, r4
    b97a:	b29b      	uxth	r3, r3
    b97c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
    b97e:	687a      	ldr	r2, [r7, #4]
    b980:	683b      	ldr	r3, [r7, #0]
    b982:	781b      	ldrb	r3, [r3, #0]
    b984:	009b      	lsls	r3, r3, #2
    b986:	4413      	add	r3, r2
    b988:	881b      	ldrh	r3, [r3, #0]
    b98a:	b29c      	uxth	r4, r3
    b98c:	4623      	mov	r3, r4
    b98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b992:	2b00      	cmp	r3, #0
    b994:	d014      	beq.n	b9c0 <USB_ActivateEndpoint+0x3f4>
    b996:	687a      	ldr	r2, [r7, #4]
    b998:	683b      	ldr	r3, [r7, #0]
    b99a:	781b      	ldrb	r3, [r3, #0]
    b99c:	009b      	lsls	r3, r3, #2
    b99e:	4413      	add	r3, r2
    b9a0:	881b      	ldrh	r3, [r3, #0]
    b9a2:	b29b      	uxth	r3, r3
    b9a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    b9a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    b9ac:	b29c      	uxth	r4, r3
    b9ae:	687a      	ldr	r2, [r7, #4]
    b9b0:	683b      	ldr	r3, [r7, #0]
    b9b2:	781b      	ldrb	r3, [r3, #0]
    b9b4:	009b      	lsls	r3, r3, #2
    b9b6:	441a      	add	r2, r3
    b9b8:	4b60      	ldr	r3, [pc, #384]	; (bb3c <USB_ActivateEndpoint+0x570>)
    b9ba:	4323      	orrs	r3, r4
    b9bc:	b29b      	uxth	r3, r3
    b9be:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
    b9c0:	687a      	ldr	r2, [r7, #4]
    b9c2:	683b      	ldr	r3, [r7, #0]
    b9c4:	781b      	ldrb	r3, [r3, #0]
    b9c6:	009b      	lsls	r3, r3, #2
    b9c8:	4413      	add	r3, r2
    b9ca:	881b      	ldrh	r3, [r3, #0]
    b9cc:	b29b      	uxth	r3, r3
    b9ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    b9d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    b9d6:	b29c      	uxth	r4, r3
    b9d8:	687a      	ldr	r2, [r7, #4]
    b9da:	683b      	ldr	r3, [r7, #0]
    b9dc:	781b      	ldrb	r3, [r3, #0]
    b9de:	009b      	lsls	r3, r3, #2
    b9e0:	441a      	add	r2, r3
    b9e2:	4b56      	ldr	r3, [pc, #344]	; (bb3c <USB_ActivateEndpoint+0x570>)
    b9e4:	4323      	orrs	r3, r4
    b9e6:	b29b      	uxth	r3, r3
    b9e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
    b9ea:	687a      	ldr	r2, [r7, #4]
    b9ec:	683b      	ldr	r3, [r7, #0]
    b9ee:	781b      	ldrb	r3, [r3, #0]
    b9f0:	009b      	lsls	r3, r3, #2
    b9f2:	4413      	add	r3, r2
    b9f4:	881b      	ldrh	r3, [r3, #0]
    b9f6:	b29b      	uxth	r3, r3
    b9f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    b9fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    ba00:	b29c      	uxth	r4, r3
    ba02:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
    ba06:	b29c      	uxth	r4, r3
    ba08:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
    ba0c:	b29c      	uxth	r4, r3
    ba0e:	687a      	ldr	r2, [r7, #4]
    ba10:	683b      	ldr	r3, [r7, #0]
    ba12:	781b      	ldrb	r3, [r3, #0]
    ba14:	009b      	lsls	r3, r3, #2
    ba16:	441a      	add	r2, r3
    ba18:	4b49      	ldr	r3, [pc, #292]	; (bb40 <USB_ActivateEndpoint+0x574>)
    ba1a:	4323      	orrs	r3, r4
    ba1c:	b29b      	uxth	r3, r3
    ba1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
    ba20:	687a      	ldr	r2, [r7, #4]
    ba22:	683b      	ldr	r3, [r7, #0]
    ba24:	781b      	ldrb	r3, [r3, #0]
    ba26:	009b      	lsls	r3, r3, #2
    ba28:	4413      	add	r3, r2
    ba2a:	881b      	ldrh	r3, [r3, #0]
    ba2c:	b29b      	uxth	r3, r3
    ba2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    ba32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    ba36:	b29c      	uxth	r4, r3
    ba38:	687a      	ldr	r2, [r7, #4]
    ba3a:	683b      	ldr	r3, [r7, #0]
    ba3c:	781b      	ldrb	r3, [r3, #0]
    ba3e:	009b      	lsls	r3, r3, #2
    ba40:	441a      	add	r2, r3
    ba42:	4b3f      	ldr	r3, [pc, #252]	; (bb40 <USB_ActivateEndpoint+0x574>)
    ba44:	4323      	orrs	r3, r4
    ba46:	b29b      	uxth	r3, r3
    ba48:	8013      	strh	r3, [r2, #0]
    ba4a:	e0a5      	b.n	bb98 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
    ba4c:	687a      	ldr	r2, [r7, #4]
    ba4e:	683b      	ldr	r3, [r7, #0]
    ba50:	781b      	ldrb	r3, [r3, #0]
    ba52:	009b      	lsls	r3, r3, #2
    ba54:	4413      	add	r3, r2
    ba56:	881b      	ldrh	r3, [r3, #0]
    ba58:	b29c      	uxth	r4, r3
    ba5a:	4623      	mov	r3, r4
    ba5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    ba60:	2b00      	cmp	r3, #0
    ba62:	d014      	beq.n	ba8e <USB_ActivateEndpoint+0x4c2>
    ba64:	687a      	ldr	r2, [r7, #4]
    ba66:	683b      	ldr	r3, [r7, #0]
    ba68:	781b      	ldrb	r3, [r3, #0]
    ba6a:	009b      	lsls	r3, r3, #2
    ba6c:	4413      	add	r3, r2
    ba6e:	881b      	ldrh	r3, [r3, #0]
    ba70:	b29b      	uxth	r3, r3
    ba72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    ba76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    ba7a:	b29c      	uxth	r4, r3
    ba7c:	687a      	ldr	r2, [r7, #4]
    ba7e:	683b      	ldr	r3, [r7, #0]
    ba80:	781b      	ldrb	r3, [r3, #0]
    ba82:	009b      	lsls	r3, r3, #2
    ba84:	441a      	add	r2, r3
    ba86:	4b2c      	ldr	r3, [pc, #176]	; (bb38 <USB_ActivateEndpoint+0x56c>)
    ba88:	4323      	orrs	r3, r4
    ba8a:	b29b      	uxth	r3, r3
    ba8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
    ba8e:	687a      	ldr	r2, [r7, #4]
    ba90:	683b      	ldr	r3, [r7, #0]
    ba92:	781b      	ldrb	r3, [r3, #0]
    ba94:	009b      	lsls	r3, r3, #2
    ba96:	4413      	add	r3, r2
    ba98:	881b      	ldrh	r3, [r3, #0]
    ba9a:	b29c      	uxth	r4, r3
    ba9c:	4623      	mov	r3, r4
    ba9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    baa2:	2b00      	cmp	r3, #0
    baa4:	d014      	beq.n	bad0 <USB_ActivateEndpoint+0x504>
    baa6:	687a      	ldr	r2, [r7, #4]
    baa8:	683b      	ldr	r3, [r7, #0]
    baaa:	781b      	ldrb	r3, [r3, #0]
    baac:	009b      	lsls	r3, r3, #2
    baae:	4413      	add	r3, r2
    bab0:	881b      	ldrh	r3, [r3, #0]
    bab2:	b29b      	uxth	r3, r3
    bab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    babc:	b29c      	uxth	r4, r3
    babe:	687a      	ldr	r2, [r7, #4]
    bac0:	683b      	ldr	r3, [r7, #0]
    bac2:	781b      	ldrb	r3, [r3, #0]
    bac4:	009b      	lsls	r3, r3, #2
    bac6:	441a      	add	r2, r3
    bac8:	4b1c      	ldr	r3, [pc, #112]	; (bb3c <USB_ActivateEndpoint+0x570>)
    baca:	4323      	orrs	r3, r4
    bacc:	b29b      	uxth	r3, r3
    bace:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
    bad0:	687a      	ldr	r2, [r7, #4]
    bad2:	683b      	ldr	r3, [r7, #0]
    bad4:	781b      	ldrb	r3, [r3, #0]
    bad6:	009b      	lsls	r3, r3, #2
    bad8:	4413      	add	r3, r2
    bada:	881b      	ldrh	r3, [r3, #0]
    badc:	b29b      	uxth	r3, r3
    bade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bae6:	b29c      	uxth	r4, r3
    bae8:	687a      	ldr	r2, [r7, #4]
    baea:	683b      	ldr	r3, [r7, #0]
    baec:	781b      	ldrb	r3, [r3, #0]
    baee:	009b      	lsls	r3, r3, #2
    baf0:	441a      	add	r2, r3
    baf2:	4b11      	ldr	r3, [pc, #68]	; (bb38 <USB_ActivateEndpoint+0x56c>)
    baf4:	4323      	orrs	r3, r4
    baf6:	b29b      	uxth	r3, r3
    baf8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
    bafa:	683b      	ldr	r3, [r7, #0]
    bafc:	78db      	ldrb	r3, [r3, #3]
    bafe:	2b01      	cmp	r3, #1
    bb00:	d020      	beq.n	bb44 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
    bb02:	687a      	ldr	r2, [r7, #4]
    bb04:	683b      	ldr	r3, [r7, #0]
    bb06:	781b      	ldrb	r3, [r3, #0]
    bb08:	009b      	lsls	r3, r3, #2
    bb0a:	4413      	add	r3, r2
    bb0c:	881b      	ldrh	r3, [r3, #0]
    bb0e:	b29b      	uxth	r3, r3
    bb10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bb14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    bb18:	b29c      	uxth	r4, r3
    bb1a:	f084 0320 	eor.w	r3, r4, #32
    bb1e:	b29c      	uxth	r4, r3
    bb20:	687a      	ldr	r2, [r7, #4]
    bb22:	683b      	ldr	r3, [r7, #0]
    bb24:	781b      	ldrb	r3, [r3, #0]
    bb26:	009b      	lsls	r3, r3, #2
    bb28:	441a      	add	r2, r3
    bb2a:	4b05      	ldr	r3, [pc, #20]	; (bb40 <USB_ActivateEndpoint+0x574>)
    bb2c:	4323      	orrs	r3, r4
    bb2e:	b29b      	uxth	r3, r3
    bb30:	8013      	strh	r3, [r2, #0]
    bb32:	e01c      	b.n	bb6e <USB_ActivateEndpoint+0x5a2>
    bb34:	ffff8180 	.word	0xffff8180
    bb38:	ffffc080 	.word	0xffffc080
    bb3c:	ffff80c0 	.word	0xffff80c0
    bb40:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
    bb44:	687a      	ldr	r2, [r7, #4]
    bb46:	683b      	ldr	r3, [r7, #0]
    bb48:	781b      	ldrb	r3, [r3, #0]
    bb4a:	009b      	lsls	r3, r3, #2
    bb4c:	4413      	add	r3, r2
    bb4e:	881b      	ldrh	r3, [r3, #0]
    bb50:	b29b      	uxth	r3, r3
    bb52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bb56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    bb5a:	b29c      	uxth	r4, r3
    bb5c:	687a      	ldr	r2, [r7, #4]
    bb5e:	683b      	ldr	r3, [r7, #0]
    bb60:	781b      	ldrb	r3, [r3, #0]
    bb62:	009b      	lsls	r3, r3, #2
    bb64:	441a      	add	r2, r3
    bb66:	4b0f      	ldr	r3, [pc, #60]	; (bba4 <USB_ActivateEndpoint+0x5d8>)
    bb68:	4323      	orrs	r3, r4
    bb6a:	b29b      	uxth	r3, r3
    bb6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    bb6e:	687a      	ldr	r2, [r7, #4]
    bb70:	683b      	ldr	r3, [r7, #0]
    bb72:	781b      	ldrb	r3, [r3, #0]
    bb74:	009b      	lsls	r3, r3, #2
    bb76:	4413      	add	r3, r2
    bb78:	881b      	ldrh	r3, [r3, #0]
    bb7a:	b29b      	uxth	r3, r3
    bb7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    bb80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bb84:	b29c      	uxth	r4, r3
    bb86:	687a      	ldr	r2, [r7, #4]
    bb88:	683b      	ldr	r3, [r7, #0]
    bb8a:	781b      	ldrb	r3, [r3, #0]
    bb8c:	009b      	lsls	r3, r3, #2
    bb8e:	441a      	add	r2, r3
    bb90:	4b04      	ldr	r3, [pc, #16]	; (bba4 <USB_ActivateEndpoint+0x5d8>)
    bb92:	4323      	orrs	r3, r4
    bb94:	b29b      	uxth	r3, r3
    bb96:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
    bb98:	7bfb      	ldrb	r3, [r7, #15]
}
    bb9a:	4618      	mov	r0, r3
    bb9c:	3710      	adds	r7, #16
    bb9e:	46bd      	mov	sp, r7
    bba0:	bc90      	pop	{r4, r7}
    bba2:	4770      	bx	lr
    bba4:	ffff8080 	.word	0xffff8080

0000bba8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
    bba8:	b490      	push	{r4, r7}
    bbaa:	b082      	sub	sp, #8
    bbac:	af00      	add	r7, sp, #0
    bbae:	6078      	str	r0, [r7, #4]
    bbb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
    bbb2:	683b      	ldr	r3, [r7, #0]
    bbb4:	7b1b      	ldrb	r3, [r3, #12]
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	d171      	bne.n	bc9e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
    bbba:	683b      	ldr	r3, [r7, #0]
    bbbc:	785b      	ldrb	r3, [r3, #1]
    bbbe:	2b00      	cmp	r3, #0
    bbc0:	d036      	beq.n	bc30 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
    bbc2:	687a      	ldr	r2, [r7, #4]
    bbc4:	683b      	ldr	r3, [r7, #0]
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	009b      	lsls	r3, r3, #2
    bbca:	4413      	add	r3, r2
    bbcc:	881b      	ldrh	r3, [r3, #0]
    bbce:	b29c      	uxth	r4, r3
    bbd0:	4623      	mov	r3, r4
    bbd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d014      	beq.n	bc04 <USB_DeactivateEndpoint+0x5c>
    bbda:	687a      	ldr	r2, [r7, #4]
    bbdc:	683b      	ldr	r3, [r7, #0]
    bbde:	781b      	ldrb	r3, [r3, #0]
    bbe0:	009b      	lsls	r3, r3, #2
    bbe2:	4413      	add	r3, r2
    bbe4:	881b      	ldrh	r3, [r3, #0]
    bbe6:	b29b      	uxth	r3, r3
    bbe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bbec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bbf0:	b29c      	uxth	r4, r3
    bbf2:	687a      	ldr	r2, [r7, #4]
    bbf4:	683b      	ldr	r3, [r7, #0]
    bbf6:	781b      	ldrb	r3, [r3, #0]
    bbf8:	009b      	lsls	r3, r3, #2
    bbfa:	441a      	add	r2, r3
    bbfc:	4b6b      	ldr	r3, [pc, #428]	; (bdac <USB_DeactivateEndpoint+0x204>)
    bbfe:	4323      	orrs	r3, r4
    bc00:	b29b      	uxth	r3, r3
    bc02:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
    bc04:	687a      	ldr	r2, [r7, #4]
    bc06:	683b      	ldr	r3, [r7, #0]
    bc08:	781b      	ldrb	r3, [r3, #0]
    bc0a:	009b      	lsls	r3, r3, #2
    bc0c:	4413      	add	r3, r2
    bc0e:	881b      	ldrh	r3, [r3, #0]
    bc10:	b29b      	uxth	r3, r3
    bc12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bc16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    bc1a:	b29c      	uxth	r4, r3
    bc1c:	687a      	ldr	r2, [r7, #4]
    bc1e:	683b      	ldr	r3, [r7, #0]
    bc20:	781b      	ldrb	r3, [r3, #0]
    bc22:	009b      	lsls	r3, r3, #2
    bc24:	441a      	add	r2, r3
    bc26:	4b62      	ldr	r3, [pc, #392]	; (bdb0 <USB_DeactivateEndpoint+0x208>)
    bc28:	4323      	orrs	r3, r4
    bc2a:	b29b      	uxth	r3, r3
    bc2c:	8013      	strh	r3, [r2, #0]
    bc2e:	e144      	b.n	beba <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
    bc30:	687a      	ldr	r2, [r7, #4]
    bc32:	683b      	ldr	r3, [r7, #0]
    bc34:	781b      	ldrb	r3, [r3, #0]
    bc36:	009b      	lsls	r3, r3, #2
    bc38:	4413      	add	r3, r2
    bc3a:	881b      	ldrh	r3, [r3, #0]
    bc3c:	b29c      	uxth	r4, r3
    bc3e:	4623      	mov	r3, r4
    bc40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    bc44:	2b00      	cmp	r3, #0
    bc46:	d014      	beq.n	bc72 <USB_DeactivateEndpoint+0xca>
    bc48:	687a      	ldr	r2, [r7, #4]
    bc4a:	683b      	ldr	r3, [r7, #0]
    bc4c:	781b      	ldrb	r3, [r3, #0]
    bc4e:	009b      	lsls	r3, r3, #2
    bc50:	4413      	add	r3, r2
    bc52:	881b      	ldrh	r3, [r3, #0]
    bc54:	b29b      	uxth	r3, r3
    bc56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bc5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bc5e:	b29c      	uxth	r4, r3
    bc60:	687a      	ldr	r2, [r7, #4]
    bc62:	683b      	ldr	r3, [r7, #0]
    bc64:	781b      	ldrb	r3, [r3, #0]
    bc66:	009b      	lsls	r3, r3, #2
    bc68:	441a      	add	r2, r3
    bc6a:	4b52      	ldr	r3, [pc, #328]	; (bdb4 <USB_DeactivateEndpoint+0x20c>)
    bc6c:	4323      	orrs	r3, r4
    bc6e:	b29b      	uxth	r3, r3
    bc70:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    bc72:	687a      	ldr	r2, [r7, #4]
    bc74:	683b      	ldr	r3, [r7, #0]
    bc76:	781b      	ldrb	r3, [r3, #0]
    bc78:	009b      	lsls	r3, r3, #2
    bc7a:	4413      	add	r3, r2
    bc7c:	881b      	ldrh	r3, [r3, #0]
    bc7e:	b29b      	uxth	r3, r3
    bc80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    bc84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bc88:	b29c      	uxth	r4, r3
    bc8a:	687a      	ldr	r2, [r7, #4]
    bc8c:	683b      	ldr	r3, [r7, #0]
    bc8e:	781b      	ldrb	r3, [r3, #0]
    bc90:	009b      	lsls	r3, r3, #2
    bc92:	441a      	add	r2, r3
    bc94:	4b46      	ldr	r3, [pc, #280]	; (bdb0 <USB_DeactivateEndpoint+0x208>)
    bc96:	4323      	orrs	r3, r4
    bc98:	b29b      	uxth	r3, r3
    bc9a:	8013      	strh	r3, [r2, #0]
    bc9c:	e10d      	b.n	beba <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
    bc9e:	683b      	ldr	r3, [r7, #0]
    bca0:	785b      	ldrb	r3, [r3, #1]
    bca2:	2b00      	cmp	r3, #0
    bca4:	f040 8088 	bne.w	bdb8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
    bca8:	687a      	ldr	r2, [r7, #4]
    bcaa:	683b      	ldr	r3, [r7, #0]
    bcac:	781b      	ldrb	r3, [r3, #0]
    bcae:	009b      	lsls	r3, r3, #2
    bcb0:	4413      	add	r3, r2
    bcb2:	881b      	ldrh	r3, [r3, #0]
    bcb4:	b29c      	uxth	r4, r3
    bcb6:	4623      	mov	r3, r4
    bcb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    bcbc:	2b00      	cmp	r3, #0
    bcbe:	d014      	beq.n	bcea <USB_DeactivateEndpoint+0x142>
    bcc0:	687a      	ldr	r2, [r7, #4]
    bcc2:	683b      	ldr	r3, [r7, #0]
    bcc4:	781b      	ldrb	r3, [r3, #0]
    bcc6:	009b      	lsls	r3, r3, #2
    bcc8:	4413      	add	r3, r2
    bcca:	881b      	ldrh	r3, [r3, #0]
    bccc:	b29b      	uxth	r3, r3
    bcce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bcd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bcd6:	b29c      	uxth	r4, r3
    bcd8:	687a      	ldr	r2, [r7, #4]
    bcda:	683b      	ldr	r3, [r7, #0]
    bcdc:	781b      	ldrb	r3, [r3, #0]
    bcde:	009b      	lsls	r3, r3, #2
    bce0:	441a      	add	r2, r3
    bce2:	4b34      	ldr	r3, [pc, #208]	; (bdb4 <USB_DeactivateEndpoint+0x20c>)
    bce4:	4323      	orrs	r3, r4
    bce6:	b29b      	uxth	r3, r3
    bce8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
    bcea:	687a      	ldr	r2, [r7, #4]
    bcec:	683b      	ldr	r3, [r7, #0]
    bcee:	781b      	ldrb	r3, [r3, #0]
    bcf0:	009b      	lsls	r3, r3, #2
    bcf2:	4413      	add	r3, r2
    bcf4:	881b      	ldrh	r3, [r3, #0]
    bcf6:	b29c      	uxth	r4, r3
    bcf8:	4623      	mov	r3, r4
    bcfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bcfe:	2b00      	cmp	r3, #0
    bd00:	d014      	beq.n	bd2c <USB_DeactivateEndpoint+0x184>
    bd02:	687a      	ldr	r2, [r7, #4]
    bd04:	683b      	ldr	r3, [r7, #0]
    bd06:	781b      	ldrb	r3, [r3, #0]
    bd08:	009b      	lsls	r3, r3, #2
    bd0a:	4413      	add	r3, r2
    bd0c:	881b      	ldrh	r3, [r3, #0]
    bd0e:	b29b      	uxth	r3, r3
    bd10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bd14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bd18:	b29c      	uxth	r4, r3
    bd1a:	687a      	ldr	r2, [r7, #4]
    bd1c:	683b      	ldr	r3, [r7, #0]
    bd1e:	781b      	ldrb	r3, [r3, #0]
    bd20:	009b      	lsls	r3, r3, #2
    bd22:	441a      	add	r2, r3
    bd24:	4b21      	ldr	r3, [pc, #132]	; (bdac <USB_DeactivateEndpoint+0x204>)
    bd26:	4323      	orrs	r3, r4
    bd28:	b29b      	uxth	r3, r3
    bd2a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
    bd2c:	687a      	ldr	r2, [r7, #4]
    bd2e:	683b      	ldr	r3, [r7, #0]
    bd30:	781b      	ldrb	r3, [r3, #0]
    bd32:	009b      	lsls	r3, r3, #2
    bd34:	4413      	add	r3, r2
    bd36:	881b      	ldrh	r3, [r3, #0]
    bd38:	b29b      	uxth	r3, r3
    bd3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bd3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bd42:	b29c      	uxth	r4, r3
    bd44:	687a      	ldr	r2, [r7, #4]
    bd46:	683b      	ldr	r3, [r7, #0]
    bd48:	781b      	ldrb	r3, [r3, #0]
    bd4a:	009b      	lsls	r3, r3, #2
    bd4c:	441a      	add	r2, r3
    bd4e:	4b17      	ldr	r3, [pc, #92]	; (bdac <USB_DeactivateEndpoint+0x204>)
    bd50:	4323      	orrs	r3, r4
    bd52:	b29b      	uxth	r3, r3
    bd54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    bd56:	687a      	ldr	r2, [r7, #4]
    bd58:	683b      	ldr	r3, [r7, #0]
    bd5a:	781b      	ldrb	r3, [r3, #0]
    bd5c:	009b      	lsls	r3, r3, #2
    bd5e:	4413      	add	r3, r2
    bd60:	881b      	ldrh	r3, [r3, #0]
    bd62:	b29b      	uxth	r3, r3
    bd64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    bd68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bd6c:	b29c      	uxth	r4, r3
    bd6e:	687a      	ldr	r2, [r7, #4]
    bd70:	683b      	ldr	r3, [r7, #0]
    bd72:	781b      	ldrb	r3, [r3, #0]
    bd74:	009b      	lsls	r3, r3, #2
    bd76:	441a      	add	r2, r3
    bd78:	4b0d      	ldr	r3, [pc, #52]	; (bdb0 <USB_DeactivateEndpoint+0x208>)
    bd7a:	4323      	orrs	r3, r4
    bd7c:	b29b      	uxth	r3, r3
    bd7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
    bd80:	687a      	ldr	r2, [r7, #4]
    bd82:	683b      	ldr	r3, [r7, #0]
    bd84:	781b      	ldrb	r3, [r3, #0]
    bd86:	009b      	lsls	r3, r3, #2
    bd88:	4413      	add	r3, r2
    bd8a:	881b      	ldrh	r3, [r3, #0]
    bd8c:	b29b      	uxth	r3, r3
    bd8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bd92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    bd96:	b29c      	uxth	r4, r3
    bd98:	687a      	ldr	r2, [r7, #4]
    bd9a:	683b      	ldr	r3, [r7, #0]
    bd9c:	781b      	ldrb	r3, [r3, #0]
    bd9e:	009b      	lsls	r3, r3, #2
    bda0:	441a      	add	r2, r3
    bda2:	4b03      	ldr	r3, [pc, #12]	; (bdb0 <USB_DeactivateEndpoint+0x208>)
    bda4:	4323      	orrs	r3, r4
    bda6:	b29b      	uxth	r3, r3
    bda8:	8013      	strh	r3, [r2, #0]
    bdaa:	e086      	b.n	beba <USB_DeactivateEndpoint+0x312>
    bdac:	ffff80c0 	.word	0xffff80c0
    bdb0:	ffff8080 	.word	0xffff8080
    bdb4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
    bdb8:	687a      	ldr	r2, [r7, #4]
    bdba:	683b      	ldr	r3, [r7, #0]
    bdbc:	781b      	ldrb	r3, [r3, #0]
    bdbe:	009b      	lsls	r3, r3, #2
    bdc0:	4413      	add	r3, r2
    bdc2:	881b      	ldrh	r3, [r3, #0]
    bdc4:	b29c      	uxth	r4, r3
    bdc6:	4623      	mov	r3, r4
    bdc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    bdcc:	2b00      	cmp	r3, #0
    bdce:	d014      	beq.n	bdfa <USB_DeactivateEndpoint+0x252>
    bdd0:	687a      	ldr	r2, [r7, #4]
    bdd2:	683b      	ldr	r3, [r7, #0]
    bdd4:	781b      	ldrb	r3, [r3, #0]
    bdd6:	009b      	lsls	r3, r3, #2
    bdd8:	4413      	add	r3, r2
    bdda:	881b      	ldrh	r3, [r3, #0]
    bddc:	b29b      	uxth	r3, r3
    bdde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    bde2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bde6:	b29c      	uxth	r4, r3
    bde8:	687a      	ldr	r2, [r7, #4]
    bdea:	683b      	ldr	r3, [r7, #0]
    bdec:	781b      	ldrb	r3, [r3, #0]
    bdee:	009b      	lsls	r3, r3, #2
    bdf0:	441a      	add	r2, r3
    bdf2:	4b35      	ldr	r3, [pc, #212]	; (bec8 <USB_DeactivateEndpoint+0x320>)
    bdf4:	4323      	orrs	r3, r4
    bdf6:	b29b      	uxth	r3, r3
    bdf8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
    bdfa:	687a      	ldr	r2, [r7, #4]
    bdfc:	683b      	ldr	r3, [r7, #0]
    bdfe:	781b      	ldrb	r3, [r3, #0]
    be00:	009b      	lsls	r3, r3, #2
    be02:	4413      	add	r3, r2
    be04:	881b      	ldrh	r3, [r3, #0]
    be06:	b29c      	uxth	r4, r3
    be08:	4623      	mov	r3, r4
    be0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    be0e:	2b00      	cmp	r3, #0
    be10:	d014      	beq.n	be3c <USB_DeactivateEndpoint+0x294>
    be12:	687a      	ldr	r2, [r7, #4]
    be14:	683b      	ldr	r3, [r7, #0]
    be16:	781b      	ldrb	r3, [r3, #0]
    be18:	009b      	lsls	r3, r3, #2
    be1a:	4413      	add	r3, r2
    be1c:	881b      	ldrh	r3, [r3, #0]
    be1e:	b29b      	uxth	r3, r3
    be20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    be24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    be28:	b29c      	uxth	r4, r3
    be2a:	687a      	ldr	r2, [r7, #4]
    be2c:	683b      	ldr	r3, [r7, #0]
    be2e:	781b      	ldrb	r3, [r3, #0]
    be30:	009b      	lsls	r3, r3, #2
    be32:	441a      	add	r2, r3
    be34:	4b25      	ldr	r3, [pc, #148]	; (becc <USB_DeactivateEndpoint+0x324>)
    be36:	4323      	orrs	r3, r4
    be38:	b29b      	uxth	r3, r3
    be3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
    be3c:	687a      	ldr	r2, [r7, #4]
    be3e:	683b      	ldr	r3, [r7, #0]
    be40:	781b      	ldrb	r3, [r3, #0]
    be42:	009b      	lsls	r3, r3, #2
    be44:	4413      	add	r3, r2
    be46:	881b      	ldrh	r3, [r3, #0]
    be48:	b29b      	uxth	r3, r3
    be4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    be4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    be52:	b29c      	uxth	r4, r3
    be54:	687a      	ldr	r2, [r7, #4]
    be56:	683b      	ldr	r3, [r7, #0]
    be58:	781b      	ldrb	r3, [r3, #0]
    be5a:	009b      	lsls	r3, r3, #2
    be5c:	441a      	add	r2, r3
    be5e:	4b1a      	ldr	r3, [pc, #104]	; (bec8 <USB_DeactivateEndpoint+0x320>)
    be60:	4323      	orrs	r3, r4
    be62:	b29b      	uxth	r3, r3
    be64:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
    be66:	687a      	ldr	r2, [r7, #4]
    be68:	683b      	ldr	r3, [r7, #0]
    be6a:	781b      	ldrb	r3, [r3, #0]
    be6c:	009b      	lsls	r3, r3, #2
    be6e:	4413      	add	r3, r2
    be70:	881b      	ldrh	r3, [r3, #0]
    be72:	b29b      	uxth	r3, r3
    be74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    be78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    be7c:	b29c      	uxth	r4, r3
    be7e:	687a      	ldr	r2, [r7, #4]
    be80:	683b      	ldr	r3, [r7, #0]
    be82:	781b      	ldrb	r3, [r3, #0]
    be84:	009b      	lsls	r3, r3, #2
    be86:	441a      	add	r2, r3
    be88:	4b11      	ldr	r3, [pc, #68]	; (bed0 <USB_DeactivateEndpoint+0x328>)
    be8a:	4323      	orrs	r3, r4
    be8c:	b29b      	uxth	r3, r3
    be8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    be90:	687a      	ldr	r2, [r7, #4]
    be92:	683b      	ldr	r3, [r7, #0]
    be94:	781b      	ldrb	r3, [r3, #0]
    be96:	009b      	lsls	r3, r3, #2
    be98:	4413      	add	r3, r2
    be9a:	881b      	ldrh	r3, [r3, #0]
    be9c:	b29b      	uxth	r3, r3
    be9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    bea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    bea6:	b29c      	uxth	r4, r3
    bea8:	687a      	ldr	r2, [r7, #4]
    beaa:	683b      	ldr	r3, [r7, #0]
    beac:	781b      	ldrb	r3, [r3, #0]
    beae:	009b      	lsls	r3, r3, #2
    beb0:	441a      	add	r2, r3
    beb2:	4b07      	ldr	r3, [pc, #28]	; (bed0 <USB_DeactivateEndpoint+0x328>)
    beb4:	4323      	orrs	r3, r4
    beb6:	b29b      	uxth	r3, r3
    beb8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
    beba:	2300      	movs	r3, #0
}
    bebc:	4618      	mov	r0, r3
    bebe:	3708      	adds	r7, #8
    bec0:	46bd      	mov	sp, r7
    bec2:	bc90      	pop	{r4, r7}
    bec4:	4770      	bx	lr
    bec6:	bf00      	nop
    bec8:	ffffc080 	.word	0xffffc080
    becc:	ffff80c0 	.word	0xffff80c0
    bed0:	ffff8080 	.word	0xffff8080

0000bed4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
    bed4:	b590      	push	{r4, r7, lr}
    bed6:	b08d      	sub	sp, #52	; 0x34
    bed8:	af00      	add	r7, sp, #0
    beda:	6078      	str	r0, [r7, #4]
    bedc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
    bede:	683b      	ldr	r3, [r7, #0]
    bee0:	785b      	ldrb	r3, [r3, #1]
    bee2:	2b01      	cmp	r3, #1
    bee4:	f040 8160 	bne.w	c1a8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    bee8:	683b      	ldr	r3, [r7, #0]
    beea:	699a      	ldr	r2, [r3, #24]
    beec:	683b      	ldr	r3, [r7, #0]
    beee:	691b      	ldr	r3, [r3, #16]
    bef0:	429a      	cmp	r2, r3
    bef2:	d909      	bls.n	bf08 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
    bef4:	683b      	ldr	r3, [r7, #0]
    bef6:	691b      	ldr	r3, [r3, #16]
    bef8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
    befa:	683b      	ldr	r3, [r7, #0]
    befc:	699a      	ldr	r2, [r3, #24]
    befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bf00:	1ad2      	subs	r2, r2, r3
    bf02:	683b      	ldr	r3, [r7, #0]
    bf04:	619a      	str	r2, [r3, #24]
    bf06:	e005      	b.n	bf14 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
    bf08:	683b      	ldr	r3, [r7, #0]
    bf0a:	699b      	ldr	r3, [r3, #24]
    bf0c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
    bf0e:	683b      	ldr	r3, [r7, #0]
    bf10:	2200      	movs	r2, #0
    bf12:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
    bf14:	683b      	ldr	r3, [r7, #0]
    bf16:	7b1b      	ldrb	r3, [r3, #12]
    bf18:	2b00      	cmp	r3, #0
    bf1a:	d119      	bne.n	bf50 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
    bf1c:	683b      	ldr	r3, [r7, #0]
    bf1e:	6959      	ldr	r1, [r3, #20]
    bf20:	683b      	ldr	r3, [r7, #0]
    bf22:	88da      	ldrh	r2, [r3, #6]
    bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bf26:	b29b      	uxth	r3, r3
    bf28:	6878      	ldr	r0, [r7, #4]
    bf2a:	f000 faec 	bl	c506 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
    bf2e:	687c      	ldr	r4, [r7, #4]
    bf30:	687b      	ldr	r3, [r7, #4]
    bf32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    bf36:	b29b      	uxth	r3, r3
    bf38:	441c      	add	r4, r3
    bf3a:	683b      	ldr	r3, [r7, #0]
    bf3c:	781b      	ldrb	r3, [r3, #0]
    bf3e:	011b      	lsls	r3, r3, #4
    bf40:	4423      	add	r3, r4
    bf42:	f203 4304 	addw	r3, r3, #1028	; 0x404
    bf46:	461c      	mov	r4, r3
    bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bf4a:	b29b      	uxth	r3, r3
    bf4c:	8023      	strh	r3, [r4, #0]
    bf4e:	e10f      	b.n	c170 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
    bf50:	687a      	ldr	r2, [r7, #4]
    bf52:	683b      	ldr	r3, [r7, #0]
    bf54:	781b      	ldrb	r3, [r3, #0]
    bf56:	009b      	lsls	r3, r3, #2
    bf58:	4413      	add	r3, r2
    bf5a:	881b      	ldrh	r3, [r3, #0]
    bf5c:	b29b      	uxth	r3, r3
    bf5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bf62:	2b00      	cmp	r3, #0
    bf64:	d065      	beq.n	c032 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
    bf66:	687c      	ldr	r4, [r7, #4]
    bf68:	683b      	ldr	r3, [r7, #0]
    bf6a:	785b      	ldrb	r3, [r3, #1]
    bf6c:	2b00      	cmp	r3, #0
    bf6e:	d148      	bne.n	c002 <USB_EPStartXfer+0x12e>
    bf70:	687c      	ldr	r4, [r7, #4]
    bf72:	687b      	ldr	r3, [r7, #4]
    bf74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    bf78:	b29b      	uxth	r3, r3
    bf7a:	441c      	add	r4, r3
    bf7c:	683b      	ldr	r3, [r7, #0]
    bf7e:	781b      	ldrb	r3, [r3, #0]
    bf80:	011b      	lsls	r3, r3, #4
    bf82:	4423      	add	r3, r4
    bf84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
    bf88:	461c      	mov	r4, r3
    bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	d10e      	bne.n	bfae <USB_EPStartXfer+0xda>
    bf90:	8823      	ldrh	r3, [r4, #0]
    bf92:	b29b      	uxth	r3, r3
    bf94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    bf98:	b29b      	uxth	r3, r3
    bf9a:	8023      	strh	r3, [r4, #0]
    bf9c:	8823      	ldrh	r3, [r4, #0]
    bf9e:	b29b      	uxth	r3, r3
    bfa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    bfa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    bfa8:	b29b      	uxth	r3, r3
    bfaa:	8023      	strh	r3, [r4, #0]
    bfac:	e03d      	b.n	c02a <USB_EPStartXfer+0x156>
    bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bfb0:	2b3e      	cmp	r3, #62	; 0x3e
    bfb2:	d810      	bhi.n	bfd6 <USB_EPStartXfer+0x102>
    bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bfb6:	085b      	lsrs	r3, r3, #1
    bfb8:	627b      	str	r3, [r7, #36]	; 0x24
    bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bfbc:	f003 0301 	and.w	r3, r3, #1
    bfc0:	2b00      	cmp	r3, #0
    bfc2:	d002      	beq.n	bfca <USB_EPStartXfer+0xf6>
    bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bfc6:	3301      	adds	r3, #1
    bfc8:	627b      	str	r3, [r7, #36]	; 0x24
    bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bfcc:	b29b      	uxth	r3, r3
    bfce:	029b      	lsls	r3, r3, #10
    bfd0:	b29b      	uxth	r3, r3
    bfd2:	8023      	strh	r3, [r4, #0]
    bfd4:	e029      	b.n	c02a <USB_EPStartXfer+0x156>
    bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bfd8:	095b      	lsrs	r3, r3, #5
    bfda:	627b      	str	r3, [r7, #36]	; 0x24
    bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bfde:	f003 031f 	and.w	r3, r3, #31
    bfe2:	2b00      	cmp	r3, #0
    bfe4:	d102      	bne.n	bfec <USB_EPStartXfer+0x118>
    bfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bfe8:	3b01      	subs	r3, #1
    bfea:	627b      	str	r3, [r7, #36]	; 0x24
    bfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bfee:	b29b      	uxth	r3, r3
    bff0:	029b      	lsls	r3, r3, #10
    bff2:	b29b      	uxth	r3, r3
    bff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    bff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    bffc:	b29b      	uxth	r3, r3
    bffe:	8023      	strh	r3, [r4, #0]
    c000:	e013      	b.n	c02a <USB_EPStartXfer+0x156>
    c002:	683b      	ldr	r3, [r7, #0]
    c004:	785b      	ldrb	r3, [r3, #1]
    c006:	2b01      	cmp	r3, #1
    c008:	d10f      	bne.n	c02a <USB_EPStartXfer+0x156>
    c00a:	687b      	ldr	r3, [r7, #4]
    c00c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    c010:	b29b      	uxth	r3, r3
    c012:	441c      	add	r4, r3
    c014:	683b      	ldr	r3, [r7, #0]
    c016:	781b      	ldrb	r3, [r3, #0]
    c018:	011b      	lsls	r3, r3, #4
    c01a:	4423      	add	r3, r4
    c01c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
    c020:	60fb      	str	r3, [r7, #12]
    c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c024:	b29a      	uxth	r2, r3
    c026:	68fb      	ldr	r3, [r7, #12]
    c028:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
    c02a:	683b      	ldr	r3, [r7, #0]
    c02c:	895b      	ldrh	r3, [r3, #10]
    c02e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    c030:	e063      	b.n	c0fa <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
    c032:	683b      	ldr	r3, [r7, #0]
    c034:	785b      	ldrb	r3, [r3, #1]
    c036:	2b00      	cmp	r3, #0
    c038:	d148      	bne.n	c0cc <USB_EPStartXfer+0x1f8>
    c03a:	687c      	ldr	r4, [r7, #4]
    c03c:	687b      	ldr	r3, [r7, #4]
    c03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    c042:	b29b      	uxth	r3, r3
    c044:	441c      	add	r4, r3
    c046:	683b      	ldr	r3, [r7, #0]
    c048:	781b      	ldrb	r3, [r3, #0]
    c04a:	011b      	lsls	r3, r3, #4
    c04c:	4423      	add	r3, r4
    c04e:	f203 4304 	addw	r3, r3, #1028	; 0x404
    c052:	461c      	mov	r4, r3
    c054:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c056:	2b00      	cmp	r3, #0
    c058:	d10e      	bne.n	c078 <USB_EPStartXfer+0x1a4>
    c05a:	8823      	ldrh	r3, [r4, #0]
    c05c:	b29b      	uxth	r3, r3
    c05e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    c062:	b29b      	uxth	r3, r3
    c064:	8023      	strh	r3, [r4, #0]
    c066:	8823      	ldrh	r3, [r4, #0]
    c068:	b29b      	uxth	r3, r3
    c06a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    c06e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    c072:	b29b      	uxth	r3, r3
    c074:	8023      	strh	r3, [r4, #0]
    c076:	e03d      	b.n	c0f4 <USB_EPStartXfer+0x220>
    c078:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c07a:	2b3e      	cmp	r3, #62	; 0x3e
    c07c:	d810      	bhi.n	c0a0 <USB_EPStartXfer+0x1cc>
    c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c080:	085b      	lsrs	r3, r3, #1
    c082:	623b      	str	r3, [r7, #32]
    c084:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c086:	f003 0301 	and.w	r3, r3, #1
    c08a:	2b00      	cmp	r3, #0
    c08c:	d002      	beq.n	c094 <USB_EPStartXfer+0x1c0>
    c08e:	6a3b      	ldr	r3, [r7, #32]
    c090:	3301      	adds	r3, #1
    c092:	623b      	str	r3, [r7, #32]
    c094:	6a3b      	ldr	r3, [r7, #32]
    c096:	b29b      	uxth	r3, r3
    c098:	029b      	lsls	r3, r3, #10
    c09a:	b29b      	uxth	r3, r3
    c09c:	8023      	strh	r3, [r4, #0]
    c09e:	e029      	b.n	c0f4 <USB_EPStartXfer+0x220>
    c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0a2:	095b      	lsrs	r3, r3, #5
    c0a4:	623b      	str	r3, [r7, #32]
    c0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0a8:	f003 031f 	and.w	r3, r3, #31
    c0ac:	2b00      	cmp	r3, #0
    c0ae:	d102      	bne.n	c0b6 <USB_EPStartXfer+0x1e2>
    c0b0:	6a3b      	ldr	r3, [r7, #32]
    c0b2:	3b01      	subs	r3, #1
    c0b4:	623b      	str	r3, [r7, #32]
    c0b6:	6a3b      	ldr	r3, [r7, #32]
    c0b8:	b29b      	uxth	r3, r3
    c0ba:	029b      	lsls	r3, r3, #10
    c0bc:	b29b      	uxth	r3, r3
    c0be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    c0c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    c0c6:	b29b      	uxth	r3, r3
    c0c8:	8023      	strh	r3, [r4, #0]
    c0ca:	e013      	b.n	c0f4 <USB_EPStartXfer+0x220>
    c0cc:	683b      	ldr	r3, [r7, #0]
    c0ce:	785b      	ldrb	r3, [r3, #1]
    c0d0:	2b01      	cmp	r3, #1
    c0d2:	d10f      	bne.n	c0f4 <USB_EPStartXfer+0x220>
    c0d4:	687c      	ldr	r4, [r7, #4]
    c0d6:	687b      	ldr	r3, [r7, #4]
    c0d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    c0dc:	b29b      	uxth	r3, r3
    c0de:	441c      	add	r4, r3
    c0e0:	683b      	ldr	r3, [r7, #0]
    c0e2:	781b      	ldrb	r3, [r3, #0]
    c0e4:	011b      	lsls	r3, r3, #4
    c0e6:	4423      	add	r3, r4
    c0e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
    c0ec:	461c      	mov	r4, r3
    c0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0f0:	b29b      	uxth	r3, r3
    c0f2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
    c0f4:	683b      	ldr	r3, [r7, #0]
    c0f6:	891b      	ldrh	r3, [r3, #8]
    c0f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
    c0fa:	683b      	ldr	r3, [r7, #0]
    c0fc:	6959      	ldr	r1, [r3, #20]
    c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c100:	b29b      	uxth	r3, r3
    c102:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
    c104:	6878      	ldr	r0, [r7, #4]
    c106:	f000 f9fe 	bl	c506 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
    c10a:	683b      	ldr	r3, [r7, #0]
    c10c:	785b      	ldrb	r3, [r3, #1]
    c10e:	2b00      	cmp	r3, #0
    c110:	d115      	bne.n	c13e <USB_EPStartXfer+0x26a>
    c112:	687a      	ldr	r2, [r7, #4]
    c114:	683b      	ldr	r3, [r7, #0]
    c116:	781b      	ldrb	r3, [r3, #0]
    c118:	009b      	lsls	r3, r3, #2
    c11a:	4413      	add	r3, r2
    c11c:	881b      	ldrh	r3, [r3, #0]
    c11e:	b29b      	uxth	r3, r3
    c120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    c124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    c128:	b29c      	uxth	r4, r3
    c12a:	687a      	ldr	r2, [r7, #4]
    c12c:	683b      	ldr	r3, [r7, #0]
    c12e:	781b      	ldrb	r3, [r3, #0]
    c130:	009b      	lsls	r3, r3, #2
    c132:	441a      	add	r2, r3
    c134:	4b9a      	ldr	r3, [pc, #616]	; (c3a0 <USB_EPStartXfer+0x4cc>)
    c136:	4323      	orrs	r3, r4
    c138:	b29b      	uxth	r3, r3
    c13a:	8013      	strh	r3, [r2, #0]
    c13c:	e018      	b.n	c170 <USB_EPStartXfer+0x29c>
    c13e:	683b      	ldr	r3, [r7, #0]
    c140:	785b      	ldrb	r3, [r3, #1]
    c142:	2b01      	cmp	r3, #1
    c144:	d114      	bne.n	c170 <USB_EPStartXfer+0x29c>
    c146:	687a      	ldr	r2, [r7, #4]
    c148:	683b      	ldr	r3, [r7, #0]
    c14a:	781b      	ldrb	r3, [r3, #0]
    c14c:	009b      	lsls	r3, r3, #2
    c14e:	4413      	add	r3, r2
    c150:	881b      	ldrh	r3, [r3, #0]
    c152:	b29b      	uxth	r3, r3
    c154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    c158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    c15c:	b29c      	uxth	r4, r3
    c15e:	687a      	ldr	r2, [r7, #4]
    c160:	683b      	ldr	r3, [r7, #0]
    c162:	781b      	ldrb	r3, [r3, #0]
    c164:	009b      	lsls	r3, r3, #2
    c166:	441a      	add	r2, r3
    c168:	4b8e      	ldr	r3, [pc, #568]	; (c3a4 <USB_EPStartXfer+0x4d0>)
    c16a:	4323      	orrs	r3, r4
    c16c:	b29b      	uxth	r3, r3
    c16e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
    c170:	687a      	ldr	r2, [r7, #4]
    c172:	683b      	ldr	r3, [r7, #0]
    c174:	781b      	ldrb	r3, [r3, #0]
    c176:	009b      	lsls	r3, r3, #2
    c178:	4413      	add	r3, r2
    c17a:	881b      	ldrh	r3, [r3, #0]
    c17c:	b29b      	uxth	r3, r3
    c17e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    c182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    c186:	b29c      	uxth	r4, r3
    c188:	f084 0310 	eor.w	r3, r4, #16
    c18c:	b29c      	uxth	r4, r3
    c18e:	f084 0320 	eor.w	r3, r4, #32
    c192:	b29c      	uxth	r4, r3
    c194:	687a      	ldr	r2, [r7, #4]
    c196:	683b      	ldr	r3, [r7, #0]
    c198:	781b      	ldrb	r3, [r3, #0]
    c19a:	009b      	lsls	r3, r3, #2
    c19c:	441a      	add	r2, r3
    c19e:	4b82      	ldr	r3, [pc, #520]	; (c3a8 <USB_EPStartXfer+0x4d4>)
    c1a0:	4323      	orrs	r3, r4
    c1a2:	b29b      	uxth	r3, r3
    c1a4:	8013      	strh	r3, [r2, #0]
    c1a6:	e146      	b.n	c436 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
    c1a8:	683b      	ldr	r3, [r7, #0]
    c1aa:	699a      	ldr	r2, [r3, #24]
    c1ac:	683b      	ldr	r3, [r7, #0]
    c1ae:	691b      	ldr	r3, [r3, #16]
    c1b0:	429a      	cmp	r2, r3
    c1b2:	d909      	bls.n	c1c8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
    c1b4:	683b      	ldr	r3, [r7, #0]
    c1b6:	691b      	ldr	r3, [r3, #16]
    c1b8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
    c1ba:	683b      	ldr	r3, [r7, #0]
    c1bc:	699a      	ldr	r2, [r3, #24]
    c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c1c0:	1ad2      	subs	r2, r2, r3
    c1c2:	683b      	ldr	r3, [r7, #0]
    c1c4:	619a      	str	r2, [r3, #24]
    c1c6:	e005      	b.n	c1d4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
    c1c8:	683b      	ldr	r3, [r7, #0]
    c1ca:	699b      	ldr	r3, [r3, #24]
    c1cc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
    c1ce:	683b      	ldr	r3, [r7, #0]
    c1d0:	2200      	movs	r2, #0
    c1d2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
    c1d4:	683b      	ldr	r3, [r7, #0]
    c1d6:	7b1b      	ldrb	r3, [r3, #12]
    c1d8:	2b00      	cmp	r3, #0
    c1da:	d148      	bne.n	c26e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
    c1dc:	687c      	ldr	r4, [r7, #4]
    c1de:	687b      	ldr	r3, [r7, #4]
    c1e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    c1e4:	b29b      	uxth	r3, r3
    c1e6:	441c      	add	r4, r3
    c1e8:	683b      	ldr	r3, [r7, #0]
    c1ea:	781b      	ldrb	r3, [r3, #0]
    c1ec:	011b      	lsls	r3, r3, #4
    c1ee:	4423      	add	r3, r4
    c1f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
    c1f4:	461c      	mov	r4, r3
    c1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c1f8:	2b00      	cmp	r3, #0
    c1fa:	d10e      	bne.n	c21a <USB_EPStartXfer+0x346>
    c1fc:	8823      	ldrh	r3, [r4, #0]
    c1fe:	b29b      	uxth	r3, r3
    c200:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    c204:	b29b      	uxth	r3, r3
    c206:	8023      	strh	r3, [r4, #0]
    c208:	8823      	ldrh	r3, [r4, #0]
    c20a:	b29b      	uxth	r3, r3
    c20c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    c210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    c214:	b29b      	uxth	r3, r3
    c216:	8023      	strh	r3, [r4, #0]
    c218:	e0f2      	b.n	c400 <USB_EPStartXfer+0x52c>
    c21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c21c:	2b3e      	cmp	r3, #62	; 0x3e
    c21e:	d810      	bhi.n	c242 <USB_EPStartXfer+0x36e>
    c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c222:	085b      	lsrs	r3, r3, #1
    c224:	61fb      	str	r3, [r7, #28]
    c226:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c228:	f003 0301 	and.w	r3, r3, #1
    c22c:	2b00      	cmp	r3, #0
    c22e:	d002      	beq.n	c236 <USB_EPStartXfer+0x362>
    c230:	69fb      	ldr	r3, [r7, #28]
    c232:	3301      	adds	r3, #1
    c234:	61fb      	str	r3, [r7, #28]
    c236:	69fb      	ldr	r3, [r7, #28]
    c238:	b29b      	uxth	r3, r3
    c23a:	029b      	lsls	r3, r3, #10
    c23c:	b29b      	uxth	r3, r3
    c23e:	8023      	strh	r3, [r4, #0]
    c240:	e0de      	b.n	c400 <USB_EPStartXfer+0x52c>
    c242:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c244:	095b      	lsrs	r3, r3, #5
    c246:	61fb      	str	r3, [r7, #28]
    c248:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c24a:	f003 031f 	and.w	r3, r3, #31
    c24e:	2b00      	cmp	r3, #0
    c250:	d102      	bne.n	c258 <USB_EPStartXfer+0x384>
    c252:	69fb      	ldr	r3, [r7, #28]
    c254:	3b01      	subs	r3, #1
    c256:	61fb      	str	r3, [r7, #28]
    c258:	69fb      	ldr	r3, [r7, #28]
    c25a:	b29b      	uxth	r3, r3
    c25c:	029b      	lsls	r3, r3, #10
    c25e:	b29b      	uxth	r3, r3
    c260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    c264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    c268:	b29b      	uxth	r3, r3
    c26a:	8023      	strh	r3, [r4, #0]
    c26c:	e0c8      	b.n	c400 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
    c26e:	683b      	ldr	r3, [r7, #0]
    c270:	785b      	ldrb	r3, [r3, #1]
    c272:	2b00      	cmp	r3, #0
    c274:	d148      	bne.n	c308 <USB_EPStartXfer+0x434>
    c276:	687c      	ldr	r4, [r7, #4]
    c278:	687b      	ldr	r3, [r7, #4]
    c27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    c27e:	b29b      	uxth	r3, r3
    c280:	441c      	add	r4, r3
    c282:	683b      	ldr	r3, [r7, #0]
    c284:	781b      	ldrb	r3, [r3, #0]
    c286:	011b      	lsls	r3, r3, #4
    c288:	4423      	add	r3, r4
    c28a:	f203 4304 	addw	r3, r3, #1028	; 0x404
    c28e:	461c      	mov	r4, r3
    c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c292:	2b00      	cmp	r3, #0
    c294:	d10e      	bne.n	c2b4 <USB_EPStartXfer+0x3e0>
    c296:	8823      	ldrh	r3, [r4, #0]
    c298:	b29b      	uxth	r3, r3
    c29a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    c29e:	b29b      	uxth	r3, r3
    c2a0:	8023      	strh	r3, [r4, #0]
    c2a2:	8823      	ldrh	r3, [r4, #0]
    c2a4:	b29b      	uxth	r3, r3
    c2a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    c2aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    c2ae:	b29b      	uxth	r3, r3
    c2b0:	8023      	strh	r3, [r4, #0]
    c2b2:	e03d      	b.n	c330 <USB_EPStartXfer+0x45c>
    c2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2b6:	2b3e      	cmp	r3, #62	; 0x3e
    c2b8:	d810      	bhi.n	c2dc <USB_EPStartXfer+0x408>
    c2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2bc:	085b      	lsrs	r3, r3, #1
    c2be:	61bb      	str	r3, [r7, #24]
    c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2c2:	f003 0301 	and.w	r3, r3, #1
    c2c6:	2b00      	cmp	r3, #0
    c2c8:	d002      	beq.n	c2d0 <USB_EPStartXfer+0x3fc>
    c2ca:	69bb      	ldr	r3, [r7, #24]
    c2cc:	3301      	adds	r3, #1
    c2ce:	61bb      	str	r3, [r7, #24]
    c2d0:	69bb      	ldr	r3, [r7, #24]
    c2d2:	b29b      	uxth	r3, r3
    c2d4:	029b      	lsls	r3, r3, #10
    c2d6:	b29b      	uxth	r3, r3
    c2d8:	8023      	strh	r3, [r4, #0]
    c2da:	e029      	b.n	c330 <USB_EPStartXfer+0x45c>
    c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2de:	095b      	lsrs	r3, r3, #5
    c2e0:	61bb      	str	r3, [r7, #24]
    c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2e4:	f003 031f 	and.w	r3, r3, #31
    c2e8:	2b00      	cmp	r3, #0
    c2ea:	d102      	bne.n	c2f2 <USB_EPStartXfer+0x41e>
    c2ec:	69bb      	ldr	r3, [r7, #24]
    c2ee:	3b01      	subs	r3, #1
    c2f0:	61bb      	str	r3, [r7, #24]
    c2f2:	69bb      	ldr	r3, [r7, #24]
    c2f4:	b29b      	uxth	r3, r3
    c2f6:	029b      	lsls	r3, r3, #10
    c2f8:	b29b      	uxth	r3, r3
    c2fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    c2fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    c302:	b29b      	uxth	r3, r3
    c304:	8023      	strh	r3, [r4, #0]
    c306:	e013      	b.n	c330 <USB_EPStartXfer+0x45c>
    c308:	683b      	ldr	r3, [r7, #0]
    c30a:	785b      	ldrb	r3, [r3, #1]
    c30c:	2b01      	cmp	r3, #1
    c30e:	d10f      	bne.n	c330 <USB_EPStartXfer+0x45c>
    c310:	687c      	ldr	r4, [r7, #4]
    c312:	687b      	ldr	r3, [r7, #4]
    c314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    c318:	b29b      	uxth	r3, r3
    c31a:	441c      	add	r4, r3
    c31c:	683b      	ldr	r3, [r7, #0]
    c31e:	781b      	ldrb	r3, [r3, #0]
    c320:	011b      	lsls	r3, r3, #4
    c322:	4423      	add	r3, r4
    c324:	f203 4304 	addw	r3, r3, #1028	; 0x404
    c328:	461c      	mov	r4, r3
    c32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c32c:	b29b      	uxth	r3, r3
    c32e:	8023      	strh	r3, [r4, #0]
    c330:	687c      	ldr	r4, [r7, #4]
    c332:	683b      	ldr	r3, [r7, #0]
    c334:	785b      	ldrb	r3, [r3, #1]
    c336:	2b00      	cmp	r3, #0
    c338:	d14e      	bne.n	c3d8 <USB_EPStartXfer+0x504>
    c33a:	687c      	ldr	r4, [r7, #4]
    c33c:	687b      	ldr	r3, [r7, #4]
    c33e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    c342:	b29b      	uxth	r3, r3
    c344:	441c      	add	r4, r3
    c346:	683b      	ldr	r3, [r7, #0]
    c348:	781b      	ldrb	r3, [r3, #0]
    c34a:	011b      	lsls	r3, r3, #4
    c34c:	4423      	add	r3, r4
    c34e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
    c352:	461c      	mov	r4, r3
    c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c356:	2b00      	cmp	r3, #0
    c358:	d10e      	bne.n	c378 <USB_EPStartXfer+0x4a4>
    c35a:	8823      	ldrh	r3, [r4, #0]
    c35c:	b29b      	uxth	r3, r3
    c35e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    c362:	b29b      	uxth	r3, r3
    c364:	8023      	strh	r3, [r4, #0]
    c366:	8823      	ldrh	r3, [r4, #0]
    c368:	b29b      	uxth	r3, r3
    c36a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    c36e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    c372:	b29b      	uxth	r3, r3
    c374:	8023      	strh	r3, [r4, #0]
    c376:	e043      	b.n	c400 <USB_EPStartXfer+0x52c>
    c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c37a:	2b3e      	cmp	r3, #62	; 0x3e
    c37c:	d816      	bhi.n	c3ac <USB_EPStartXfer+0x4d8>
    c37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c380:	085b      	lsrs	r3, r3, #1
    c382:	617b      	str	r3, [r7, #20]
    c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c386:	f003 0301 	and.w	r3, r3, #1
    c38a:	2b00      	cmp	r3, #0
    c38c:	d002      	beq.n	c394 <USB_EPStartXfer+0x4c0>
    c38e:	697b      	ldr	r3, [r7, #20]
    c390:	3301      	adds	r3, #1
    c392:	617b      	str	r3, [r7, #20]
    c394:	697b      	ldr	r3, [r7, #20]
    c396:	b29b      	uxth	r3, r3
    c398:	029b      	lsls	r3, r3, #10
    c39a:	b29b      	uxth	r3, r3
    c39c:	8023      	strh	r3, [r4, #0]
    c39e:	e02f      	b.n	c400 <USB_EPStartXfer+0x52c>
    c3a0:	ffff80c0 	.word	0xffff80c0
    c3a4:	ffffc080 	.word	0xffffc080
    c3a8:	ffff8080 	.word	0xffff8080
    c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3ae:	095b      	lsrs	r3, r3, #5
    c3b0:	617b      	str	r3, [r7, #20]
    c3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3b4:	f003 031f 	and.w	r3, r3, #31
    c3b8:	2b00      	cmp	r3, #0
    c3ba:	d102      	bne.n	c3c2 <USB_EPStartXfer+0x4ee>
    c3bc:	697b      	ldr	r3, [r7, #20]
    c3be:	3b01      	subs	r3, #1
    c3c0:	617b      	str	r3, [r7, #20]
    c3c2:	697b      	ldr	r3, [r7, #20]
    c3c4:	b29b      	uxth	r3, r3
    c3c6:	029b      	lsls	r3, r3, #10
    c3c8:	b29b      	uxth	r3, r3
    c3ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    c3ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    c3d2:	b29b      	uxth	r3, r3
    c3d4:	8023      	strh	r3, [r4, #0]
    c3d6:	e013      	b.n	c400 <USB_EPStartXfer+0x52c>
    c3d8:	683b      	ldr	r3, [r7, #0]
    c3da:	785b      	ldrb	r3, [r3, #1]
    c3dc:	2b01      	cmp	r3, #1
    c3de:	d10f      	bne.n	c400 <USB_EPStartXfer+0x52c>
    c3e0:	687b      	ldr	r3, [r7, #4]
    c3e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
    c3e6:	b29b      	uxth	r3, r3
    c3e8:	441c      	add	r4, r3
    c3ea:	683b      	ldr	r3, [r7, #0]
    c3ec:	781b      	ldrb	r3, [r3, #0]
    c3ee:	011b      	lsls	r3, r3, #4
    c3f0:	4423      	add	r3, r4
    c3f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
    c3f6:	613b      	str	r3, [r7, #16]
    c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3fa:	b29a      	uxth	r2, r3
    c3fc:	693b      	ldr	r3, [r7, #16]
    c3fe:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
    c400:	687a      	ldr	r2, [r7, #4]
    c402:	683b      	ldr	r3, [r7, #0]
    c404:	781b      	ldrb	r3, [r3, #0]
    c406:	009b      	lsls	r3, r3, #2
    c408:	4413      	add	r3, r2
    c40a:	881b      	ldrh	r3, [r3, #0]
    c40c:	b29b      	uxth	r3, r3
    c40e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    c412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    c416:	b29c      	uxth	r4, r3
    c418:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
    c41c:	b29c      	uxth	r4, r3
    c41e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
    c422:	b29c      	uxth	r4, r3
    c424:	687a      	ldr	r2, [r7, #4]
    c426:	683b      	ldr	r3, [r7, #0]
    c428:	781b      	ldrb	r3, [r3, #0]
    c42a:	009b      	lsls	r3, r3, #2
    c42c:	441a      	add	r2, r3
    c42e:	4b04      	ldr	r3, [pc, #16]	; (c440 <USB_EPStartXfer+0x56c>)
    c430:	4323      	orrs	r3, r4
    c432:	b29b      	uxth	r3, r3
    c434:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
    c436:	2300      	movs	r3, #0
}
    c438:	4618      	mov	r0, r3
    c43a:	3734      	adds	r7, #52	; 0x34
    c43c:	46bd      	mov	sp, r7
    c43e:	bd90      	pop	{r4, r7, pc}
    c440:	ffff8080 	.word	0xffff8080

0000c444 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
    c444:	b490      	push	{r4, r7}
    c446:	b082      	sub	sp, #8
    c448:	af00      	add	r7, sp, #0
    c44a:	6078      	str	r0, [r7, #4]
    c44c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
    c44e:	683b      	ldr	r3, [r7, #0]
    c450:	785b      	ldrb	r3, [r3, #1]
    c452:	2b00      	cmp	r3, #0
    c454:	d018      	beq.n	c488 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
    c456:	687a      	ldr	r2, [r7, #4]
    c458:	683b      	ldr	r3, [r7, #0]
    c45a:	781b      	ldrb	r3, [r3, #0]
    c45c:	009b      	lsls	r3, r3, #2
    c45e:	4413      	add	r3, r2
    c460:	881b      	ldrh	r3, [r3, #0]
    c462:	b29b      	uxth	r3, r3
    c464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    c468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    c46c:	b29c      	uxth	r4, r3
    c46e:	f084 0310 	eor.w	r3, r4, #16
    c472:	b29c      	uxth	r4, r3
    c474:	687a      	ldr	r2, [r7, #4]
    c476:	683b      	ldr	r3, [r7, #0]
    c478:	781b      	ldrb	r3, [r3, #0]
    c47a:	009b      	lsls	r3, r3, #2
    c47c:	441a      	add	r2, r3
    c47e:	4b11      	ldr	r3, [pc, #68]	; (c4c4 <USB_EPSetStall+0x80>)
    c480:	4323      	orrs	r3, r4
    c482:	b29b      	uxth	r3, r3
    c484:	8013      	strh	r3, [r2, #0]
    c486:	e017      	b.n	c4b8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
    c488:	687a      	ldr	r2, [r7, #4]
    c48a:	683b      	ldr	r3, [r7, #0]
    c48c:	781b      	ldrb	r3, [r3, #0]
    c48e:	009b      	lsls	r3, r3, #2
    c490:	4413      	add	r3, r2
    c492:	881b      	ldrh	r3, [r3, #0]
    c494:	b29b      	uxth	r3, r3
    c496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    c49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    c49e:	b29c      	uxth	r4, r3
    c4a0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
    c4a4:	b29c      	uxth	r4, r3
    c4a6:	687a      	ldr	r2, [r7, #4]
    c4a8:	683b      	ldr	r3, [r7, #0]
    c4aa:	781b      	ldrb	r3, [r3, #0]
    c4ac:	009b      	lsls	r3, r3, #2
    c4ae:	441a      	add	r2, r3
    c4b0:	4b04      	ldr	r3, [pc, #16]	; (c4c4 <USB_EPSetStall+0x80>)
    c4b2:	4323      	orrs	r3, r4
    c4b4:	b29b      	uxth	r3, r3
    c4b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
    c4b8:	2300      	movs	r3, #0
}
    c4ba:	4618      	mov	r0, r3
    c4bc:	3708      	adds	r7, #8
    c4be:	46bd      	mov	sp, r7
    c4c0:	bc90      	pop	{r4, r7}
    c4c2:	4770      	bx	lr
    c4c4:	ffff8080 	.word	0xffff8080

0000c4c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
    c4c8:	b480      	push	{r7}
    c4ca:	b083      	sub	sp, #12
    c4cc:	af00      	add	r7, sp, #0
    c4ce:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
    c4d0:	2300      	movs	r3, #0
}
    c4d2:	4618      	mov	r0, r3
    c4d4:	370c      	adds	r7, #12
    c4d6:	46bd      	mov	sp, r7
    c4d8:	bc80      	pop	{r7}
    c4da:	4770      	bx	lr

0000c4dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
    c4dc:	b480      	push	{r7}
    c4de:	b083      	sub	sp, #12
    c4e0:	af00      	add	r7, sp, #0
    c4e2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
    c4e4:	2300      	movs	r3, #0
}
    c4e6:	4618      	mov	r0, r3
    c4e8:	370c      	adds	r7, #12
    c4ea:	46bd      	mov	sp, r7
    c4ec:	bc80      	pop	{r7}
    c4ee:	4770      	bx	lr

0000c4f0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
    c4f0:	b480      	push	{r7}
    c4f2:	b083      	sub	sp, #12
    c4f4:	af00      	add	r7, sp, #0
    c4f6:	6078      	str	r0, [r7, #4]
    c4f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
    c4fa:	2300      	movs	r3, #0
}
    c4fc:	4618      	mov	r0, r3
    c4fe:	370c      	adds	r7, #12
    c500:	46bd      	mov	sp, r7
    c502:	bc80      	pop	{r7}
    c504:	4770      	bx	lr

0000c506 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
    c506:	b480      	push	{r7}
    c508:	b08d      	sub	sp, #52	; 0x34
    c50a:	af00      	add	r7, sp, #0
    c50c:	60f8      	str	r0, [r7, #12]
    c50e:	60b9      	str	r1, [r7, #8]
    c510:	4611      	mov	r1, r2
    c512:	461a      	mov	r2, r3
    c514:	460b      	mov	r3, r1
    c516:	80fb      	strh	r3, [r7, #6]
    c518:	4613      	mov	r3, r2
    c51a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
    c51c:	88bb      	ldrh	r3, [r7, #4]
    c51e:	3301      	adds	r3, #1
    c520:	085b      	lsrs	r3, r3, #1
    c522:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
    c524:	68fb      	ldr	r3, [r7, #12]
    c526:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
    c528:	68bb      	ldr	r3, [r7, #8]
    c52a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
    c52c:	88fb      	ldrh	r3, [r7, #6]
    c52e:	005a      	lsls	r2, r3, #1
    c530:	69fb      	ldr	r3, [r7, #28]
    c532:	4413      	add	r3, r2
    c534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    c538:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
    c53a:	6a3b      	ldr	r3, [r7, #32]
    c53c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c53e:	e01e      	b.n	c57e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
    c540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c542:	781b      	ldrb	r3, [r3, #0]
    c544:	61bb      	str	r3, [r7, #24]
    pBuf++;
    c546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c548:	3301      	adds	r3, #1
    c54a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    c54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c54e:	781b      	ldrb	r3, [r3, #0]
    c550:	b29b      	uxth	r3, r3
    c552:	021b      	lsls	r3, r3, #8
    c554:	b29b      	uxth	r3, r3
    c556:	461a      	mov	r2, r3
    c558:	69bb      	ldr	r3, [r7, #24]
    c55a:	4313      	orrs	r3, r2
    c55c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
    c55e:	697b      	ldr	r3, [r7, #20]
    c560:	b29a      	uxth	r2, r3
    c562:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c564:	801a      	strh	r2, [r3, #0]
    pdwVal++;
    c566:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c568:	3302      	adds	r3, #2
    c56a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
    c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c56e:	3302      	adds	r3, #2
    c570:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
    c572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c574:	3301      	adds	r3, #1
    c576:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
    c578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c57a:	3b01      	subs	r3, #1
    c57c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c580:	2b00      	cmp	r3, #0
    c582:	d1dd      	bne.n	c540 <USB_WritePMA+0x3a>
  }
}
    c584:	bf00      	nop
    c586:	3734      	adds	r7, #52	; 0x34
    c588:	46bd      	mov	sp, r7
    c58a:	bc80      	pop	{r7}
    c58c:	4770      	bx	lr

0000c58e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
    c58e:	b580      	push	{r7, lr}
    c590:	b084      	sub	sp, #16
    c592:	af00      	add	r7, sp, #0
    c594:	6078      	str	r0, [r7, #4]
    c596:	460b      	mov	r3, r1
    c598:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
    c59a:	2300      	movs	r3, #0
    c59c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
    c59e:	687b      	ldr	r3, [r7, #4]
    c5a0:	7c1b      	ldrb	r3, [r3, #16]
    c5a2:	2b00      	cmp	r3, #0
    c5a4:	d115      	bne.n	c5d2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
    c5a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    c5aa:	2202      	movs	r2, #2
    c5ac:	2181      	movs	r1, #129	; 0x81
    c5ae:	6878      	ldr	r0, [r7, #4]
    c5b0:	f002 fb8d 	bl	ecce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
    c5b4:	687b      	ldr	r3, [r7, #4]
    c5b6:	2201      	movs	r2, #1
    c5b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
    c5ba:	f44f 7300 	mov.w	r3, #512	; 0x200
    c5be:	2202      	movs	r2, #2
    c5c0:	2101      	movs	r1, #1
    c5c2:	6878      	ldr	r0, [r7, #4]
    c5c4:	f002 fb83 	bl	ecce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
    c5c8:	687b      	ldr	r3, [r7, #4]
    c5ca:	2201      	movs	r2, #1
    c5cc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    c5d0:	e012      	b.n	c5f8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
    c5d2:	2340      	movs	r3, #64	; 0x40
    c5d4:	2202      	movs	r2, #2
    c5d6:	2181      	movs	r1, #129	; 0x81
    c5d8:	6878      	ldr	r0, [r7, #4]
    c5da:	f002 fb78 	bl	ecce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
    c5de:	687b      	ldr	r3, [r7, #4]
    c5e0:	2201      	movs	r2, #1
    c5e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
    c5e4:	2340      	movs	r3, #64	; 0x40
    c5e6:	2202      	movs	r2, #2
    c5e8:	2101      	movs	r1, #1
    c5ea:	6878      	ldr	r0, [r7, #4]
    c5ec:	f002 fb6f 	bl	ecce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
    c5f0:	687b      	ldr	r3, [r7, #4]
    c5f2:	2201      	movs	r2, #1
    c5f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
    c5f8:	2308      	movs	r3, #8
    c5fa:	2203      	movs	r2, #3
    c5fc:	2182      	movs	r1, #130	; 0x82
    c5fe:	6878      	ldr	r0, [r7, #4]
    c600:	f002 fb65 	bl	ecce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
    c604:	687b      	ldr	r3, [r7, #4]
    c606:	2201      	movs	r2, #1
    c608:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
    c60a:	f44f 7007 	mov.w	r0, #540	; 0x21c
    c60e:	f002 fc1b 	bl	ee48 <USBD_static_malloc>
    c612:	4602      	mov	r2, r0
    c614:	687b      	ldr	r3, [r7, #4]
    c616:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
    c61a:	687b      	ldr	r3, [r7, #4]
    c61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    c620:	2b00      	cmp	r3, #0
    c622:	d102      	bne.n	c62a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
    c624:	2301      	movs	r3, #1
    c626:	73fb      	strb	r3, [r7, #15]
    c628:	e026      	b.n	c678 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
    c62a:	687b      	ldr	r3, [r7, #4]
    c62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    c630:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    c632:	687b      	ldr	r3, [r7, #4]
    c634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
    c638:	681b      	ldr	r3, [r3, #0]
    c63a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
    c63c:	68bb      	ldr	r3, [r7, #8]
    c63e:	2200      	movs	r2, #0
    c640:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
    c644:	68bb      	ldr	r3, [r7, #8]
    c646:	2200      	movs	r2, #0
    c648:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
    c64c:	687b      	ldr	r3, [r7, #4]
    c64e:	7c1b      	ldrb	r3, [r3, #16]
    c650:	2b00      	cmp	r3, #0
    c652:	d109      	bne.n	c668 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
    c654:	68bb      	ldr	r3, [r7, #8]
    c656:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    c65a:	f44f 7300 	mov.w	r3, #512	; 0x200
    c65e:	2101      	movs	r1, #1
    c660:	6878      	ldr	r0, [r7, #4]
    c662:	f002 fbbb 	bl	eddc <USBD_LL_PrepareReceive>
    c666:	e007      	b.n	c678 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
    c668:	68bb      	ldr	r3, [r7, #8]
    c66a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    c66e:	2340      	movs	r3, #64	; 0x40
    c670:	2101      	movs	r1, #1
    c672:	6878      	ldr	r0, [r7, #4]
    c674:	f002 fbb2 	bl	eddc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
    c678:	7bfb      	ldrb	r3, [r7, #15]
}
    c67a:	4618      	mov	r0, r3
    c67c:	3710      	adds	r7, #16
    c67e:	46bd      	mov	sp, r7
    c680:	bd80      	pop	{r7, pc}

0000c682 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
    c682:	b580      	push	{r7, lr}
    c684:	b084      	sub	sp, #16
    c686:	af00      	add	r7, sp, #0
    c688:	6078      	str	r0, [r7, #4]
    c68a:	460b      	mov	r3, r1
    c68c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
    c68e:	2300      	movs	r3, #0
    c690:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
    c692:	2181      	movs	r1, #129	; 0x81
    c694:	6878      	ldr	r0, [r7, #4]
    c696:	f002 fb40 	bl	ed1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
    c69a:	687b      	ldr	r3, [r7, #4]
    c69c:	2200      	movs	r2, #0
    c69e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
    c6a0:	2101      	movs	r1, #1
    c6a2:	6878      	ldr	r0, [r7, #4]
    c6a4:	f002 fb39 	bl	ed1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
    c6a8:	687b      	ldr	r3, [r7, #4]
    c6aa:	2200      	movs	r2, #0
    c6ac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
    c6b0:	2182      	movs	r1, #130	; 0x82
    c6b2:	6878      	ldr	r0, [r7, #4]
    c6b4:	f002 fb31 	bl	ed1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
    c6b8:	687b      	ldr	r3, [r7, #4]
    c6ba:	2200      	movs	r2, #0
    c6bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
    c6be:	687b      	ldr	r3, [r7, #4]
    c6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    c6c4:	2b00      	cmp	r3, #0
    c6c6:	d00e      	beq.n	c6e6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
    c6c8:	687b      	ldr	r3, [r7, #4]
    c6ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
    c6ce:	685b      	ldr	r3, [r3, #4]
    c6d0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
    c6d2:	687b      	ldr	r3, [r7, #4]
    c6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    c6d8:	4618      	mov	r0, r3
    c6da:	f002 fbc1 	bl	ee60 <USBD_static_free>
    pdev->pClassData = NULL;
    c6de:	687b      	ldr	r3, [r7, #4]
    c6e0:	2200      	movs	r2, #0
    c6e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
    c6e6:	7bfb      	ldrb	r3, [r7, #15]
}
    c6e8:	4618      	mov	r0, r3
    c6ea:	3710      	adds	r7, #16
    c6ec:	46bd      	mov	sp, r7
    c6ee:	bd80      	pop	{r7, pc}

0000c6f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
    c6f0:	b580      	push	{r7, lr}
    c6f2:	b086      	sub	sp, #24
    c6f4:	af00      	add	r7, sp, #0
    c6f6:	6078      	str	r0, [r7, #4]
    c6f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
    c6fa:	687b      	ldr	r3, [r7, #4]
    c6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    c700:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
    c702:	2300      	movs	r3, #0
    c704:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
    c706:	2300      	movs	r3, #0
    c708:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
    c70a:	2300      	movs	r3, #0
    c70c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
    c70e:	683b      	ldr	r3, [r7, #0]
    c710:	781b      	ldrb	r3, [r3, #0]
    c712:	f003 0360 	and.w	r3, r3, #96	; 0x60
    c716:	2b00      	cmp	r3, #0
    c718:	d039      	beq.n	c78e <USBD_CDC_Setup+0x9e>
    c71a:	2b20      	cmp	r3, #32
    c71c:	d17c      	bne.n	c818 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
    c71e:	683b      	ldr	r3, [r7, #0]
    c720:	88db      	ldrh	r3, [r3, #6]
    c722:	2b00      	cmp	r3, #0
    c724:	d029      	beq.n	c77a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
    c726:	683b      	ldr	r3, [r7, #0]
    c728:	781b      	ldrb	r3, [r3, #0]
    c72a:	b25b      	sxtb	r3, r3
    c72c:	2b00      	cmp	r3, #0
    c72e:	da11      	bge.n	c754 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
    c730:	687b      	ldr	r3, [r7, #4]
    c732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
    c736:	689b      	ldr	r3, [r3, #8]
    c738:	683a      	ldr	r2, [r7, #0]
    c73a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
    c73c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
    c73e:	683a      	ldr	r2, [r7, #0]
    c740:	88d2      	ldrh	r2, [r2, #6]
    c742:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
    c744:	6939      	ldr	r1, [r7, #16]
    c746:	683b      	ldr	r3, [r7, #0]
    c748:	88db      	ldrh	r3, [r3, #6]
    c74a:	461a      	mov	r2, r3
    c74c:	6878      	ldr	r0, [r7, #4]
    c74e:	f000 fac3 	bl	ccd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
    c752:	e068      	b.n	c826 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
    c754:	683b      	ldr	r3, [r7, #0]
    c756:	785a      	ldrb	r2, [r3, #1]
    c758:	693b      	ldr	r3, [r7, #16]
    c75a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
    c75e:	683b      	ldr	r3, [r7, #0]
    c760:	88db      	ldrh	r3, [r3, #6]
    c762:	b2da      	uxtb	r2, r3
    c764:	693b      	ldr	r3, [r7, #16]
    c766:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
    c76a:	6939      	ldr	r1, [r7, #16]
    c76c:	683b      	ldr	r3, [r7, #0]
    c76e:	88db      	ldrh	r3, [r3, #6]
    c770:	461a      	mov	r2, r3
    c772:	6878      	ldr	r0, [r7, #4]
    c774:	f000 facc 	bl	cd10 <USBD_CtlPrepareRx>
      break;
    c778:	e055      	b.n	c826 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
    c77a:	687b      	ldr	r3, [r7, #4]
    c77c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
    c780:	689b      	ldr	r3, [r3, #8]
    c782:	683a      	ldr	r2, [r7, #0]
    c784:	7850      	ldrb	r0, [r2, #1]
    c786:	2200      	movs	r2, #0
    c788:	6839      	ldr	r1, [r7, #0]
    c78a:	4798      	blx	r3
      break;
    c78c:	e04b      	b.n	c826 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
    c78e:	683b      	ldr	r3, [r7, #0]
    c790:	785b      	ldrb	r3, [r3, #1]
    c792:	2b0a      	cmp	r3, #10
    c794:	d017      	beq.n	c7c6 <USBD_CDC_Setup+0xd6>
    c796:	2b0b      	cmp	r3, #11
    c798:	d029      	beq.n	c7ee <USBD_CDC_Setup+0xfe>
    c79a:	2b00      	cmp	r3, #0
    c79c:	d133      	bne.n	c806 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
    c79e:	687b      	ldr	r3, [r7, #4]
    c7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
    c7a4:	2b03      	cmp	r3, #3
    c7a6:	d107      	bne.n	c7b8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
    c7a8:	f107 030c 	add.w	r3, r7, #12
    c7ac:	2202      	movs	r2, #2
    c7ae:	4619      	mov	r1, r3
    c7b0:	6878      	ldr	r0, [r7, #4]
    c7b2:	f000 fa91 	bl	ccd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
    c7b6:	e02e      	b.n	c816 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
    c7b8:	6839      	ldr	r1, [r7, #0]
    c7ba:	6878      	ldr	r0, [r7, #4]
    c7bc:	f000 fa22 	bl	cc04 <USBD_CtlError>
            ret = USBD_FAIL;
    c7c0:	2302      	movs	r3, #2
    c7c2:	75fb      	strb	r3, [r7, #23]
          break;
    c7c4:	e027      	b.n	c816 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
    c7c6:	687b      	ldr	r3, [r7, #4]
    c7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
    c7cc:	2b03      	cmp	r3, #3
    c7ce:	d107      	bne.n	c7e0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
    c7d0:	f107 030f 	add.w	r3, r7, #15
    c7d4:	2201      	movs	r2, #1
    c7d6:	4619      	mov	r1, r3
    c7d8:	6878      	ldr	r0, [r7, #4]
    c7da:	f000 fa7d 	bl	ccd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
    c7de:	e01a      	b.n	c816 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
    c7e0:	6839      	ldr	r1, [r7, #0]
    c7e2:	6878      	ldr	r0, [r7, #4]
    c7e4:	f000 fa0e 	bl	cc04 <USBD_CtlError>
            ret = USBD_FAIL;
    c7e8:	2302      	movs	r3, #2
    c7ea:	75fb      	strb	r3, [r7, #23]
          break;
    c7ec:	e013      	b.n	c816 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
    c7ee:	687b      	ldr	r3, [r7, #4]
    c7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
    c7f4:	2b03      	cmp	r3, #3
    c7f6:	d00d      	beq.n	c814 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
    c7f8:	6839      	ldr	r1, [r7, #0]
    c7fa:	6878      	ldr	r0, [r7, #4]
    c7fc:	f000 fa02 	bl	cc04 <USBD_CtlError>
            ret = USBD_FAIL;
    c800:	2302      	movs	r3, #2
    c802:	75fb      	strb	r3, [r7, #23]
          }
          break;
    c804:	e006      	b.n	c814 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
    c806:	6839      	ldr	r1, [r7, #0]
    c808:	6878      	ldr	r0, [r7, #4]
    c80a:	f000 f9fb 	bl	cc04 <USBD_CtlError>
          ret = USBD_FAIL;
    c80e:	2302      	movs	r3, #2
    c810:	75fb      	strb	r3, [r7, #23]
          break;
    c812:	e000      	b.n	c816 <USBD_CDC_Setup+0x126>
          break;
    c814:	bf00      	nop
      }
      break;
    c816:	e006      	b.n	c826 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
    c818:	6839      	ldr	r1, [r7, #0]
    c81a:	6878      	ldr	r0, [r7, #4]
    c81c:	f000 f9f2 	bl	cc04 <USBD_CtlError>
      ret = USBD_FAIL;
    c820:	2302      	movs	r3, #2
    c822:	75fb      	strb	r3, [r7, #23]
      break;
    c824:	bf00      	nop
  }

  return ret;
    c826:	7dfb      	ldrb	r3, [r7, #23]
}
    c828:	4618      	mov	r0, r3
    c82a:	3718      	adds	r7, #24
    c82c:	46bd      	mov	sp, r7
    c82e:	bd80      	pop	{r7, pc}

0000c830 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
    c830:	b580      	push	{r7, lr}
    c832:	b084      	sub	sp, #16
    c834:	af00      	add	r7, sp, #0
    c836:	6078      	str	r0, [r7, #4]
    c838:	460b      	mov	r3, r1
    c83a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
    c83c:	687b      	ldr	r3, [r7, #4]
    c83e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    c842:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
    c844:	687b      	ldr	r3, [r7, #4]
    c846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    c84a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
    c84c:	687b      	ldr	r3, [r7, #4]
    c84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    c852:	2b00      	cmp	r3, #0
    c854:	d037      	beq.n	c8c6 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
    c856:	78fa      	ldrb	r2, [r7, #3]
    c858:	6879      	ldr	r1, [r7, #4]
    c85a:	4613      	mov	r3, r2
    c85c:	009b      	lsls	r3, r3, #2
    c85e:	4413      	add	r3, r2
    c860:	009b      	lsls	r3, r3, #2
    c862:	440b      	add	r3, r1
    c864:	331c      	adds	r3, #28
    c866:	681b      	ldr	r3, [r3, #0]
    c868:	2b00      	cmp	r3, #0
    c86a:	d026      	beq.n	c8ba <USBD_CDC_DataIn+0x8a>
    c86c:	78fa      	ldrb	r2, [r7, #3]
    c86e:	6879      	ldr	r1, [r7, #4]
    c870:	4613      	mov	r3, r2
    c872:	009b      	lsls	r3, r3, #2
    c874:	4413      	add	r3, r2
    c876:	009b      	lsls	r3, r3, #2
    c878:	440b      	add	r3, r1
    c87a:	331c      	adds	r3, #28
    c87c:	681b      	ldr	r3, [r3, #0]
    c87e:	78fa      	ldrb	r2, [r7, #3]
    c880:	68b9      	ldr	r1, [r7, #8]
    c882:	0152      	lsls	r2, r2, #5
    c884:	440a      	add	r2, r1
    c886:	3238      	adds	r2, #56	; 0x38
    c888:	6812      	ldr	r2, [r2, #0]
    c88a:	fbb3 f1f2 	udiv	r1, r3, r2
    c88e:	fb02 f201 	mul.w	r2, r2, r1
    c892:	1a9b      	subs	r3, r3, r2
    c894:	2b00      	cmp	r3, #0
    c896:	d110      	bne.n	c8ba <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
    c898:	78fa      	ldrb	r2, [r7, #3]
    c89a:	6879      	ldr	r1, [r7, #4]
    c89c:	4613      	mov	r3, r2
    c89e:	009b      	lsls	r3, r3, #2
    c8a0:	4413      	add	r3, r2
    c8a2:	009b      	lsls	r3, r3, #2
    c8a4:	440b      	add	r3, r1
    c8a6:	331c      	adds	r3, #28
    c8a8:	2200      	movs	r2, #0
    c8aa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
    c8ac:	78f9      	ldrb	r1, [r7, #3]
    c8ae:	2300      	movs	r3, #0
    c8b0:	2200      	movs	r2, #0
    c8b2:	6878      	ldr	r0, [r7, #4]
    c8b4:	f002 fa6f 	bl	ed96 <USBD_LL_Transmit>
    c8b8:	e003      	b.n	c8c2 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
    c8ba:	68fb      	ldr	r3, [r7, #12]
    c8bc:	2200      	movs	r2, #0
    c8be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
    c8c2:	2300      	movs	r3, #0
    c8c4:	e000      	b.n	c8c8 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
    c8c6:	2302      	movs	r3, #2
  }
}
    c8c8:	4618      	mov	r0, r3
    c8ca:	3710      	adds	r7, #16
    c8cc:	46bd      	mov	sp, r7
    c8ce:	bd80      	pop	{r7, pc}

0000c8d0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
    c8d0:	b580      	push	{r7, lr}
    c8d2:	b084      	sub	sp, #16
    c8d4:	af00      	add	r7, sp, #0
    c8d6:	6078      	str	r0, [r7, #4]
    c8d8:	460b      	mov	r3, r1
    c8da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
    c8dc:	687b      	ldr	r3, [r7, #4]
    c8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    c8e2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
    c8e4:	78fb      	ldrb	r3, [r7, #3]
    c8e6:	4619      	mov	r1, r3
    c8e8:	6878      	ldr	r0, [r7, #4]
    c8ea:	f002 fa9a 	bl	ee22 <USBD_LL_GetRxDataSize>
    c8ee:	4602      	mov	r2, r0
    c8f0:	68fb      	ldr	r3, [r7, #12]
    c8f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
    c8f6:	687b      	ldr	r3, [r7, #4]
    c8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d00d      	beq.n	c91c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
    c900:	687b      	ldr	r3, [r7, #4]
    c902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
    c906:	68db      	ldr	r3, [r3, #12]
    c908:	68fa      	ldr	r2, [r7, #12]
    c90a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    c90e:	68fa      	ldr	r2, [r7, #12]
    c910:	f502 7203 	add.w	r2, r2, #524	; 0x20c
    c914:	4611      	mov	r1, r2
    c916:	4798      	blx	r3

    return USBD_OK;
    c918:	2300      	movs	r3, #0
    c91a:	e000      	b.n	c91e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
    c91c:	2302      	movs	r3, #2
  }
}
    c91e:	4618      	mov	r0, r3
    c920:	3710      	adds	r7, #16
    c922:	46bd      	mov	sp, r7
    c924:	bd80      	pop	{r7, pc}

0000c926 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
    c926:	b580      	push	{r7, lr}
    c928:	b084      	sub	sp, #16
    c92a:	af00      	add	r7, sp, #0
    c92c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
    c92e:	687b      	ldr	r3, [r7, #4]
    c930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    c934:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
    c936:	687b      	ldr	r3, [r7, #4]
    c938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
    c93c:	2b00      	cmp	r3, #0
    c93e:	d015      	beq.n	c96c <USBD_CDC_EP0_RxReady+0x46>
    c940:	68fb      	ldr	r3, [r7, #12]
    c942:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
    c946:	2bff      	cmp	r3, #255	; 0xff
    c948:	d010      	beq.n	c96c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
    c94a:	687b      	ldr	r3, [r7, #4]
    c94c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
    c950:	689b      	ldr	r3, [r3, #8]
    c952:	68fa      	ldr	r2, [r7, #12]
    c954:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
    c958:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
    c95a:	68fa      	ldr	r2, [r7, #12]
    c95c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
    c960:	b292      	uxth	r2, r2
    c962:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
    c964:	68fb      	ldr	r3, [r7, #12]
    c966:	22ff      	movs	r2, #255	; 0xff
    c968:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
    c96c:	2300      	movs	r3, #0
}
    c96e:	4618      	mov	r0, r3
    c970:	3710      	adds	r7, #16
    c972:	46bd      	mov	sp, r7
    c974:	bd80      	pop	{r7, pc}
	...

0000c978 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
    c978:	b480      	push	{r7}
    c97a:	b083      	sub	sp, #12
    c97c:	af00      	add	r7, sp, #0
    c97e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
    c980:	687b      	ldr	r3, [r7, #4]
    c982:	2243      	movs	r2, #67	; 0x43
    c984:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
    c986:	4b03      	ldr	r3, [pc, #12]	; (c994 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
    c988:	4618      	mov	r0, r3
    c98a:	370c      	adds	r7, #12
    c98c:	46bd      	mov	sp, r7
    c98e:	bc80      	pop	{r7}
    c990:	4770      	bx	lr
    c992:	bf00      	nop
    c994:	00025244 	.word	0x00025244

0000c998 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
    c998:	b480      	push	{r7}
    c99a:	b083      	sub	sp, #12
    c99c:	af00      	add	r7, sp, #0
    c99e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
    c9a0:	687b      	ldr	r3, [r7, #4]
    c9a2:	2243      	movs	r2, #67	; 0x43
    c9a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
    c9a6:	4b03      	ldr	r3, [pc, #12]	; (c9b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
    c9a8:	4618      	mov	r0, r3
    c9aa:	370c      	adds	r7, #12
    c9ac:	46bd      	mov	sp, r7
    c9ae:	bc80      	pop	{r7}
    c9b0:	4770      	bx	lr
    c9b2:	bf00      	nop
    c9b4:	00025200 	.word	0x00025200

0000c9b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
    c9b8:	b480      	push	{r7}
    c9ba:	b083      	sub	sp, #12
    c9bc:	af00      	add	r7, sp, #0
    c9be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
    c9c0:	687b      	ldr	r3, [r7, #4]
    c9c2:	2243      	movs	r2, #67	; 0x43
    c9c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
    c9c6:	4b03      	ldr	r3, [pc, #12]	; (c9d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
    c9c8:	4618      	mov	r0, r3
    c9ca:	370c      	adds	r7, #12
    c9cc:	46bd      	mov	sp, r7
    c9ce:	bc80      	pop	{r7}
    c9d0:	4770      	bx	lr
    c9d2:	bf00      	nop
    c9d4:	00025288 	.word	0x00025288

0000c9d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
    c9d8:	b480      	push	{r7}
    c9da:	b083      	sub	sp, #12
    c9dc:	af00      	add	r7, sp, #0
    c9de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
    c9e0:	687b      	ldr	r3, [r7, #4]
    c9e2:	220a      	movs	r2, #10
    c9e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
    c9e6:	4b03      	ldr	r3, [pc, #12]	; (c9f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
    c9e8:	4618      	mov	r0, r3
    c9ea:	370c      	adds	r7, #12
    c9ec:	46bd      	mov	sp, r7
    c9ee:	bc80      	pop	{r7}
    c9f0:	4770      	bx	lr
    c9f2:	bf00      	nop
    c9f4:	000251bc 	.word	0x000251bc

0000c9f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
    c9f8:	b480      	push	{r7}
    c9fa:	b085      	sub	sp, #20
    c9fc:	af00      	add	r7, sp, #0
    c9fe:	6078      	str	r0, [r7, #4]
    ca00:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
    ca02:	2302      	movs	r3, #2
    ca04:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
    ca06:	683b      	ldr	r3, [r7, #0]
    ca08:	2b00      	cmp	r3, #0
    ca0a:	d005      	beq.n	ca18 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
    ca0c:	687b      	ldr	r3, [r7, #4]
    ca0e:	683a      	ldr	r2, [r7, #0]
    ca10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
    ca14:	2300      	movs	r3, #0
    ca16:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
    ca18:	7bfb      	ldrb	r3, [r7, #15]
}
    ca1a:	4618      	mov	r0, r3
    ca1c:	3714      	adds	r7, #20
    ca1e:	46bd      	mov	sp, r7
    ca20:	bc80      	pop	{r7}
    ca22:	4770      	bx	lr

0000ca24 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
    ca24:	b480      	push	{r7}
    ca26:	b087      	sub	sp, #28
    ca28:	af00      	add	r7, sp, #0
    ca2a:	60f8      	str	r0, [r7, #12]
    ca2c:	60b9      	str	r1, [r7, #8]
    ca2e:	4613      	mov	r3, r2
    ca30:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
    ca32:	68fb      	ldr	r3, [r7, #12]
    ca34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    ca38:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
    ca3a:	697b      	ldr	r3, [r7, #20]
    ca3c:	68ba      	ldr	r2, [r7, #8]
    ca3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
    ca42:	88fa      	ldrh	r2, [r7, #6]
    ca44:	697b      	ldr	r3, [r7, #20]
    ca46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
    ca4a:	2300      	movs	r3, #0
}
    ca4c:	4618      	mov	r0, r3
    ca4e:	371c      	adds	r7, #28
    ca50:	46bd      	mov	sp, r7
    ca52:	bc80      	pop	{r7}
    ca54:	4770      	bx	lr

0000ca56 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
    ca56:	b480      	push	{r7}
    ca58:	b085      	sub	sp, #20
    ca5a:	af00      	add	r7, sp, #0
    ca5c:	6078      	str	r0, [r7, #4]
    ca5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
    ca60:	687b      	ldr	r3, [r7, #4]
    ca62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    ca66:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
    ca68:	68fb      	ldr	r3, [r7, #12]
    ca6a:	683a      	ldr	r2, [r7, #0]
    ca6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
    ca70:	2300      	movs	r3, #0
}
    ca72:	4618      	mov	r0, r3
    ca74:	3714      	adds	r7, #20
    ca76:	46bd      	mov	sp, r7
    ca78:	bc80      	pop	{r7}
    ca7a:	4770      	bx	lr

0000ca7c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
    ca7c:	b580      	push	{r7, lr}
    ca7e:	b084      	sub	sp, #16
    ca80:	af00      	add	r7, sp, #0
    ca82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
    ca84:	687b      	ldr	r3, [r7, #4]
    ca86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    ca8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
    ca8c:	687b      	ldr	r3, [r7, #4]
    ca8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    ca92:	2b00      	cmp	r3, #0
    ca94:	d01c      	beq.n	cad0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
    ca96:	68fb      	ldr	r3, [r7, #12]
    ca98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
    ca9c:	2b00      	cmp	r3, #0
    ca9e:	d115      	bne.n	cacc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
    caa0:	68fb      	ldr	r3, [r7, #12]
    caa2:	2201      	movs	r2, #1
    caa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
    caa8:	68fb      	ldr	r3, [r7, #12]
    caaa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
    caae:	687b      	ldr	r3, [r7, #4]
    cab0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
    cab2:	68fb      	ldr	r3, [r7, #12]
    cab4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
    cab8:	68fb      	ldr	r3, [r7, #12]
    caba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
    cabe:	b29b      	uxth	r3, r3
    cac0:	2181      	movs	r1, #129	; 0x81
    cac2:	6878      	ldr	r0, [r7, #4]
    cac4:	f002 f967 	bl	ed96 <USBD_LL_Transmit>

      return USBD_OK;
    cac8:	2300      	movs	r3, #0
    caca:	e002      	b.n	cad2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
    cacc:	2301      	movs	r3, #1
    cace:	e000      	b.n	cad2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
    cad0:	2302      	movs	r3, #2
  }
}
    cad2:	4618      	mov	r0, r3
    cad4:	3710      	adds	r7, #16
    cad6:	46bd      	mov	sp, r7
    cad8:	bd80      	pop	{r7, pc}

0000cada <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
    cada:	b580      	push	{r7, lr}
    cadc:	b084      	sub	sp, #16
    cade:	af00      	add	r7, sp, #0
    cae0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
    cae2:	687b      	ldr	r3, [r7, #4]
    cae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    cae8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
    caea:	687b      	ldr	r3, [r7, #4]
    caec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    caf0:	2b00      	cmp	r3, #0
    caf2:	d017      	beq.n	cb24 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
    caf4:	687b      	ldr	r3, [r7, #4]
    caf6:	7c1b      	ldrb	r3, [r3, #16]
    caf8:	2b00      	cmp	r3, #0
    cafa:	d109      	bne.n	cb10 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
    cafc:	68fb      	ldr	r3, [r7, #12]
    cafe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cb02:	f44f 7300 	mov.w	r3, #512	; 0x200
    cb06:	2101      	movs	r1, #1
    cb08:	6878      	ldr	r0, [r7, #4]
    cb0a:	f002 f967 	bl	eddc <USBD_LL_PrepareReceive>
    cb0e:	e007      	b.n	cb20 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
    cb10:	68fb      	ldr	r3, [r7, #12]
    cb12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
    cb16:	2340      	movs	r3, #64	; 0x40
    cb18:	2101      	movs	r1, #1
    cb1a:	6878      	ldr	r0, [r7, #4]
    cb1c:	f002 f95e 	bl	eddc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
    cb20:	2300      	movs	r3, #0
    cb22:	e000      	b.n	cb26 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
    cb24:	2302      	movs	r3, #2
  }
}
    cb26:	4618      	mov	r0, r3
    cb28:	3710      	adds	r7, #16
    cb2a:	46bd      	mov	sp, r7
    cb2c:	bd80      	pop	{r7, pc}
	...

0000cb30 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
    cb30:	b580      	push	{r7, lr}
    cb32:	b084      	sub	sp, #16
    cb34:	af00      	add	r7, sp, #0
    cb36:	60f8      	str	r0, [r7, #12]
    cb38:	60b9      	str	r1, [r7, #8]
    cb3a:	4613      	mov	r3, r2
    cb3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
    cb3e:	68fb      	ldr	r3, [r7, #12]
    cb40:	2b00      	cmp	r3, #0
    cb42:	d10a      	bne.n	cb5a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
    cb44:	4814      	ldr	r0, [pc, #80]	; (cb98 <USBD_Init+0x68>)
    cb46:	f003 f93b 	bl	fdc0 <iprintf>
    cb4a:	4814      	ldr	r0, [pc, #80]	; (cb9c <USBD_Init+0x6c>)
    cb4c:	f003 f938 	bl	fdc0 <iprintf>
    cb50:	200a      	movs	r0, #10
    cb52:	f003 f94d 	bl	fdf0 <putchar>
#endif
    return USBD_FAIL;
    cb56:	2302      	movs	r3, #2
    cb58:	e01a      	b.n	cb90 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
    cb5a:	68fb      	ldr	r3, [r7, #12]
    cb5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    cb60:	2b00      	cmp	r3, #0
    cb62:	d003      	beq.n	cb6c <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
    cb64:	68fb      	ldr	r3, [r7, #12]
    cb66:	2200      	movs	r2, #0
    cb68:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
    cb6c:	68bb      	ldr	r3, [r7, #8]
    cb6e:	2b00      	cmp	r3, #0
    cb70:	d003      	beq.n	cb7a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
    cb72:	68fb      	ldr	r3, [r7, #12]
    cb74:	68ba      	ldr	r2, [r7, #8]
    cb76:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
    cb7a:	68fb      	ldr	r3, [r7, #12]
    cb7c:	2201      	movs	r2, #1
    cb7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
    cb82:	68fb      	ldr	r3, [r7, #12]
    cb84:	79fa      	ldrb	r2, [r7, #7]
    cb86:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
    cb88:	68f8      	ldr	r0, [r7, #12]
    cb8a:	f002 f82b 	bl	ebe4 <USBD_LL_Init>

  return USBD_OK;
    cb8e:	2300      	movs	r3, #0
}
    cb90:	4618      	mov	r0, r3
    cb92:	3710      	adds	r7, #16
    cb94:	46bd      	mov	sp, r7
    cb96:	bd80      	pop	{r7, pc}
    cb98:	00014478 	.word	0x00014478
    cb9c:	00014480 	.word	0x00014480

0000cba0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
    cba0:	b580      	push	{r7, lr}
    cba2:	b084      	sub	sp, #16
    cba4:	af00      	add	r7, sp, #0
    cba6:	6078      	str	r0, [r7, #4]
    cba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
    cbaa:	2300      	movs	r3, #0
    cbac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
    cbae:	683b      	ldr	r3, [r7, #0]
    cbb0:	2b00      	cmp	r3, #0
    cbb2:	d006      	beq.n	cbc2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    cbb4:	687b      	ldr	r3, [r7, #4]
    cbb6:	683a      	ldr	r2, [r7, #0]
    cbb8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
    cbbc:	2300      	movs	r3, #0
    cbbe:	73fb      	strb	r3, [r7, #15]
    cbc0:	e00a      	b.n	cbd8 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
    cbc2:	4808      	ldr	r0, [pc, #32]	; (cbe4 <USBD_RegisterClass+0x44>)
    cbc4:	f003 f8fc 	bl	fdc0 <iprintf>
    cbc8:	4807      	ldr	r0, [pc, #28]	; (cbe8 <USBD_RegisterClass+0x48>)
    cbca:	f003 f8f9 	bl	fdc0 <iprintf>
    cbce:	200a      	movs	r0, #10
    cbd0:	f003 f90e 	bl	fdf0 <putchar>
#endif
    status = USBD_FAIL;
    cbd4:	2302      	movs	r3, #2
    cbd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
    cbd8:	7bfb      	ldrb	r3, [r7, #15]
}
    cbda:	4618      	mov	r0, r3
    cbdc:	3710      	adds	r7, #16
    cbde:	46bd      	mov	sp, r7
    cbe0:	bd80      	pop	{r7, pc}
    cbe2:	bf00      	nop
    cbe4:	00014478 	.word	0x00014478
    cbe8:	00014498 	.word	0x00014498

0000cbec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
    cbec:	b580      	push	{r7, lr}
    cbee:	b082      	sub	sp, #8
    cbf0:	af00      	add	r7, sp, #0
    cbf2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
    cbf4:	6878      	ldr	r0, [r7, #4]
    cbf6:	f002 f84f 	bl	ec98 <USBD_LL_Start>

  return USBD_OK;
    cbfa:	2300      	movs	r3, #0
}
    cbfc:	4618      	mov	r0, r3
    cbfe:	3708      	adds	r7, #8
    cc00:	46bd      	mov	sp, r7
    cc02:	bd80      	pop	{r7, pc}

0000cc04 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
    cc04:	b580      	push	{r7, lr}
    cc06:	b082      	sub	sp, #8
    cc08:	af00      	add	r7, sp, #0
    cc0a:	6078      	str	r0, [r7, #4]
    cc0c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
    cc0e:	2180      	movs	r1, #128	; 0x80
    cc10:	6878      	ldr	r0, [r7, #4]
    cc12:	f002 f8a1 	bl	ed58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
    cc16:	2100      	movs	r1, #0
    cc18:	6878      	ldr	r0, [r7, #4]
    cc1a:	f002 f89d 	bl	ed58 <USBD_LL_StallEP>
}
    cc1e:	bf00      	nop
    cc20:	3708      	adds	r7, #8
    cc22:	46bd      	mov	sp, r7
    cc24:	bd80      	pop	{r7, pc}

0000cc26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
    cc26:	b580      	push	{r7, lr}
    cc28:	b086      	sub	sp, #24
    cc2a:	af00      	add	r7, sp, #0
    cc2c:	60f8      	str	r0, [r7, #12]
    cc2e:	60b9      	str	r1, [r7, #8]
    cc30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
    cc32:	2300      	movs	r3, #0
    cc34:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
    cc36:	68fb      	ldr	r3, [r7, #12]
    cc38:	2b00      	cmp	r3, #0
    cc3a:	d032      	beq.n	cca2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
    cc3c:	68f8      	ldr	r0, [r7, #12]
    cc3e:	f000 f834 	bl	ccaa <USBD_GetLen>
    cc42:	4603      	mov	r3, r0
    cc44:	3301      	adds	r3, #1
    cc46:	b29b      	uxth	r3, r3
    cc48:	005b      	lsls	r3, r3, #1
    cc4a:	b29a      	uxth	r2, r3
    cc4c:	687b      	ldr	r3, [r7, #4]
    cc4e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
    cc50:	7dfb      	ldrb	r3, [r7, #23]
    cc52:	1c5a      	adds	r2, r3, #1
    cc54:	75fa      	strb	r2, [r7, #23]
    cc56:	461a      	mov	r2, r3
    cc58:	68bb      	ldr	r3, [r7, #8]
    cc5a:	4413      	add	r3, r2
    cc5c:	687a      	ldr	r2, [r7, #4]
    cc5e:	7812      	ldrb	r2, [r2, #0]
    cc60:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
    cc62:	7dfb      	ldrb	r3, [r7, #23]
    cc64:	1c5a      	adds	r2, r3, #1
    cc66:	75fa      	strb	r2, [r7, #23]
    cc68:	461a      	mov	r2, r3
    cc6a:	68bb      	ldr	r3, [r7, #8]
    cc6c:	4413      	add	r3, r2
    cc6e:	2203      	movs	r2, #3
    cc70:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
    cc72:	e012      	b.n	cc9a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
    cc74:	68fb      	ldr	r3, [r7, #12]
    cc76:	1c5a      	adds	r2, r3, #1
    cc78:	60fa      	str	r2, [r7, #12]
    cc7a:	7dfa      	ldrb	r2, [r7, #23]
    cc7c:	1c51      	adds	r1, r2, #1
    cc7e:	75f9      	strb	r1, [r7, #23]
    cc80:	4611      	mov	r1, r2
    cc82:	68ba      	ldr	r2, [r7, #8]
    cc84:	440a      	add	r2, r1
    cc86:	781b      	ldrb	r3, [r3, #0]
    cc88:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
    cc8a:	7dfb      	ldrb	r3, [r7, #23]
    cc8c:	1c5a      	adds	r2, r3, #1
    cc8e:	75fa      	strb	r2, [r7, #23]
    cc90:	461a      	mov	r2, r3
    cc92:	68bb      	ldr	r3, [r7, #8]
    cc94:	4413      	add	r3, r2
    cc96:	2200      	movs	r2, #0
    cc98:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
    cc9a:	68fb      	ldr	r3, [r7, #12]
    cc9c:	781b      	ldrb	r3, [r3, #0]
    cc9e:	2b00      	cmp	r3, #0
    cca0:	d1e8      	bne.n	cc74 <USBD_GetString+0x4e>
    }
  }
}
    cca2:	bf00      	nop
    cca4:	3718      	adds	r7, #24
    cca6:	46bd      	mov	sp, r7
    cca8:	bd80      	pop	{r7, pc}

0000ccaa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    ccaa:	b480      	push	{r7}
    ccac:	b085      	sub	sp, #20
    ccae:	af00      	add	r7, sp, #0
    ccb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
    ccb2:	2300      	movs	r3, #0
    ccb4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
    ccb6:	e005      	b.n	ccc4 <USBD_GetLen+0x1a>
  {
    len++;
    ccb8:	7bfb      	ldrb	r3, [r7, #15]
    ccba:	3301      	adds	r3, #1
    ccbc:	73fb      	strb	r3, [r7, #15]
    buf++;
    ccbe:	687b      	ldr	r3, [r7, #4]
    ccc0:	3301      	adds	r3, #1
    ccc2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
    ccc4:	687b      	ldr	r3, [r7, #4]
    ccc6:	781b      	ldrb	r3, [r3, #0]
    ccc8:	2b00      	cmp	r3, #0
    ccca:	d1f5      	bne.n	ccb8 <USBD_GetLen+0xe>
  }

  return len;
    cccc:	7bfb      	ldrb	r3, [r7, #15]
}
    ccce:	4618      	mov	r0, r3
    ccd0:	3714      	adds	r7, #20
    ccd2:	46bd      	mov	sp, r7
    ccd4:	bc80      	pop	{r7}
    ccd6:	4770      	bx	lr

0000ccd8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
    ccd8:	b580      	push	{r7, lr}
    ccda:	b084      	sub	sp, #16
    ccdc:	af00      	add	r7, sp, #0
    ccde:	60f8      	str	r0, [r7, #12]
    cce0:	60b9      	str	r1, [r7, #8]
    cce2:	4613      	mov	r3, r2
    cce4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
    cce6:	68fb      	ldr	r3, [r7, #12]
    cce8:	2202      	movs	r2, #2
    ccea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
    ccee:	88fa      	ldrh	r2, [r7, #6]
    ccf0:	68fb      	ldr	r3, [r7, #12]
    ccf2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
    ccf4:	88fa      	ldrh	r2, [r7, #6]
    ccf6:	68fb      	ldr	r3, [r7, #12]
    ccf8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
    ccfa:	88fb      	ldrh	r3, [r7, #6]
    ccfc:	68ba      	ldr	r2, [r7, #8]
    ccfe:	2100      	movs	r1, #0
    cd00:	68f8      	ldr	r0, [r7, #12]
    cd02:	f002 f848 	bl	ed96 <USBD_LL_Transmit>

  return USBD_OK;
    cd06:	2300      	movs	r3, #0
}
    cd08:	4618      	mov	r0, r3
    cd0a:	3710      	adds	r7, #16
    cd0c:	46bd      	mov	sp, r7
    cd0e:	bd80      	pop	{r7, pc}

0000cd10 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
    cd10:	b580      	push	{r7, lr}
    cd12:	b084      	sub	sp, #16
    cd14:	af00      	add	r7, sp, #0
    cd16:	60f8      	str	r0, [r7, #12]
    cd18:	60b9      	str	r1, [r7, #8]
    cd1a:	4613      	mov	r3, r2
    cd1c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
    cd1e:	68fb      	ldr	r3, [r7, #12]
    cd20:	2203      	movs	r2, #3
    cd22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
    cd26:	88fa      	ldrh	r2, [r7, #6]
    cd28:	68fb      	ldr	r3, [r7, #12]
    cd2a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
    cd2e:	88fa      	ldrh	r2, [r7, #6]
    cd30:	68fb      	ldr	r3, [r7, #12]
    cd32:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
    cd36:	88fb      	ldrh	r3, [r7, #6]
    cd38:	68ba      	ldr	r2, [r7, #8]
    cd3a:	2100      	movs	r1, #0
    cd3c:	68f8      	ldr	r0, [r7, #12]
    cd3e:	f002 f84d 	bl	eddc <USBD_LL_PrepareReceive>

  return USBD_OK;
    cd42:	2300      	movs	r3, #0
}
    cd44:	4618      	mov	r0, r3
    cd46:	3710      	adds	r7, #16
    cd48:	46bd      	mov	sp, r7
    cd4a:	bd80      	pop	{r7, pc}

0000cd4c <Adafruit_GFX>:
#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

int Adafruit_GFX(int16_t w, int16_t h)
{
    cd4c:	b480      	push	{r7}
    cd4e:	b083      	sub	sp, #12
    cd50:	af00      	add	r7, sp, #0
    cd52:	4603      	mov	r3, r0
    cd54:	460a      	mov	r2, r1
    cd56:	80fb      	strh	r3, [r7, #6]
    cd58:	4613      	mov	r3, r2
    cd5a:	80bb      	strh	r3, [r7, #4]
  _width    = WIDTH;
    cd5c:	4b17      	ldr	r3, [pc, #92]	; (cdbc <Adafruit_GFX+0x70>)
    cd5e:	f9b3 2000 	ldrsh.w	r2, [r3]
    cd62:	4b17      	ldr	r3, [pc, #92]	; (cdc0 <Adafruit_GFX+0x74>)
    cd64:	801a      	strh	r2, [r3, #0]
  _height   = HEIGHT;
    cd66:	4b17      	ldr	r3, [pc, #92]	; (cdc4 <Adafruit_GFX+0x78>)
    cd68:	f9b3 2000 	ldrsh.w	r2, [r3]
    cd6c:	4b16      	ldr	r3, [pc, #88]	; (cdc8 <Adafruit_GFX+0x7c>)
    cd6e:	801a      	strh	r2, [r3, #0]
  rotation  = 0;
    cd70:	4b16      	ldr	r3, [pc, #88]	; (cdcc <Adafruit_GFX+0x80>)
    cd72:	2200      	movs	r2, #0
    cd74:	701a      	strb	r2, [r3, #0]
  cursor_y  = cursor_x    = 0;
    cd76:	4b16      	ldr	r3, [pc, #88]	; (cdd0 <Adafruit_GFX+0x84>)
    cd78:	2200      	movs	r2, #0
    cd7a:	801a      	strh	r2, [r3, #0]
    cd7c:	4b14      	ldr	r3, [pc, #80]	; (cdd0 <Adafruit_GFX+0x84>)
    cd7e:	f9b3 2000 	ldrsh.w	r2, [r3]
    cd82:	4b14      	ldr	r3, [pc, #80]	; (cdd4 <Adafruit_GFX+0x88>)
    cd84:	801a      	strh	r2, [r3, #0]
  textsize  = 1;
    cd86:	4b14      	ldr	r3, [pc, #80]	; (cdd8 <Adafruit_GFX+0x8c>)
    cd88:	2201      	movs	r2, #1
    cd8a:	701a      	strb	r2, [r3, #0]
  textcolor = textbgcolor = 0xFFFF;
    cd8c:	4b13      	ldr	r3, [pc, #76]	; (cddc <Adafruit_GFX+0x90>)
    cd8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cd92:	801a      	strh	r2, [r3, #0]
    cd94:	4b11      	ldr	r3, [pc, #68]	; (cddc <Adafruit_GFX+0x90>)
    cd96:	881a      	ldrh	r2, [r3, #0]
    cd98:	4b11      	ldr	r3, [pc, #68]	; (cde0 <Adafruit_GFX+0x94>)
    cd9a:	801a      	strh	r2, [r3, #0]
  wrap      = 1;
    cd9c:	4b11      	ldr	r3, [pc, #68]	; (cde4 <Adafruit_GFX+0x98>)
    cd9e:	2201      	movs	r2, #1
    cda0:	601a      	str	r2, [r3, #0]
  _cp437    = 0;
    cda2:	4b11      	ldr	r3, [pc, #68]	; (cde8 <Adafruit_GFX+0x9c>)
    cda4:	2200      	movs	r2, #0
    cda6:	601a      	str	r2, [r3, #0]
  gfxFont   = 0;
    cda8:	4b10      	ldr	r3, [pc, #64]	; (cdec <Adafruit_GFX+0xa0>)
    cdaa:	2200      	movs	r2, #0
    cdac:	601a      	str	r2, [r3, #0]

	return 0;
    cdae:	2300      	movs	r3, #0
}
    cdb0:	4618      	mov	r0, r3
    cdb2:	370c      	adds	r7, #12
    cdb4:	46bd      	mov	sp, r7
    cdb6:	bc80      	pop	{r7}
    cdb8:	4770      	bx	lr
    cdba:	bf00      	nop
    cdbc:	000252d4 	.word	0x000252d4
    cdc0:	00025b80 	.word	0x00025b80
    cdc4:	000252d8 	.word	0x000252d8
    cdc8:	00025b8a 	.word	0x00025b8a
    cdcc:	00025c98 	.word	0x00025c98
    cdd0:	00025b82 	.word	0x00025b82
    cdd4:	00025b74 	.word	0x00025b74
    cdd8:	00025b88 	.word	0x00025b88
    cddc:	00025b8c 	.word	0x00025b8c
    cde0:	00025b8e 	.word	0x00025b8e
    cde4:	00025b84 	.word	0x00025b84
    cde8:	00025b7c 	.word	0x00025b7c
    cdec:	00025b78 	.word	0x00025b78

0000cdf0 <fillCircle>:
    }
  }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
    cdf0:	b590      	push	{r4, r7, lr}
    cdf2:	b085      	sub	sp, #20
    cdf4:	af02      	add	r7, sp, #8
    cdf6:	4604      	mov	r4, r0
    cdf8:	4608      	mov	r0, r1
    cdfa:	4611      	mov	r1, r2
    cdfc:	461a      	mov	r2, r3
    cdfe:	4623      	mov	r3, r4
    ce00:	80fb      	strh	r3, [r7, #6]
    ce02:	4603      	mov	r3, r0
    ce04:	80bb      	strh	r3, [r7, #4]
    ce06:	460b      	mov	r3, r1
    ce08:	807b      	strh	r3, [r7, #2]
    ce0a:	4613      	mov	r3, r2
    ce0c:	803b      	strh	r3, [r7, #0]
  drawFastVLine(x0, y0-r, 2*r+1, color);
    ce0e:	88ba      	ldrh	r2, [r7, #4]
    ce10:	887b      	ldrh	r3, [r7, #2]
    ce12:	1ad3      	subs	r3, r2, r3
    ce14:	b29b      	uxth	r3, r3
    ce16:	b219      	sxth	r1, r3
    ce18:	887b      	ldrh	r3, [r7, #2]
    ce1a:	005b      	lsls	r3, r3, #1
    ce1c:	b29b      	uxth	r3, r3
    ce1e:	3301      	adds	r3, #1
    ce20:	b29b      	uxth	r3, r3
    ce22:	b21a      	sxth	r2, r3
    ce24:	883b      	ldrh	r3, [r7, #0]
    ce26:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
    ce2a:	f001 fb75 	bl	e518 <drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
    ce2e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    ce32:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    ce36:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
    ce3a:	883b      	ldrh	r3, [r7, #0]
    ce3c:	9301      	str	r3, [sp, #4]
    ce3e:	2300      	movs	r3, #0
    ce40:	9300      	str	r3, [sp, #0]
    ce42:	2303      	movs	r3, #3
    ce44:	f000 f804 	bl	ce50 <fillCircleHelper>
}
    ce48:	bf00      	nop
    ce4a:	370c      	adds	r7, #12
    ce4c:	46bd      	mov	sp, r7
    ce4e:	bd90      	pop	{r4, r7, pc}

0000ce50 <fillCircleHelper>:

// Used to do circles and roundrects
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
    ce50:	b590      	push	{r4, r7, lr}
    ce52:	b087      	sub	sp, #28
    ce54:	af00      	add	r7, sp, #0
    ce56:	4604      	mov	r4, r0
    ce58:	4608      	mov	r0, r1
    ce5a:	4611      	mov	r1, r2
    ce5c:	461a      	mov	r2, r3
    ce5e:	4623      	mov	r3, r4
    ce60:	80fb      	strh	r3, [r7, #6]
    ce62:	4603      	mov	r3, r0
    ce64:	80bb      	strh	r3, [r7, #4]
    ce66:	460b      	mov	r3, r1
    ce68:	807b      	strh	r3, [r7, #2]
    ce6a:	4613      	mov	r3, r2
    ce6c:	707b      	strb	r3, [r7, #1]

  int16_t f     = 1 - r;
    ce6e:	887b      	ldrh	r3, [r7, #2]
    ce70:	f1c3 0301 	rsb	r3, r3, #1
    ce74:	b29b      	uxth	r3, r3
    ce76:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
    ce78:	2301      	movs	r3, #1
    ce7a:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
    ce7c:	887b      	ldrh	r3, [r7, #2]
    ce7e:	461a      	mov	r2, r3
    ce80:	03d2      	lsls	r2, r2, #15
    ce82:	1ad3      	subs	r3, r2, r3
    ce84:	005b      	lsls	r3, r3, #1
    ce86:	b29b      	uxth	r3, r3
    ce88:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
    ce8a:	2300      	movs	r3, #0
    ce8c:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
    ce8e:	887b      	ldrh	r3, [r7, #2]
    ce90:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
    ce92:	e083      	b.n	cf9c <fillCircleHelper+0x14c>
    if (f >= 0) {
    ce94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    ce98:	2b00      	cmp	r3, #0
    ce9a:	db0e      	blt.n	ceba <fillCircleHelper+0x6a>
      y--;
    ce9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    cea0:	b29b      	uxth	r3, r3
    cea2:	3b01      	subs	r3, #1
    cea4:	b29b      	uxth	r3, r3
    cea6:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
    cea8:	8a7b      	ldrh	r3, [r7, #18]
    ceaa:	3302      	adds	r3, #2
    ceac:	b29b      	uxth	r3, r3
    ceae:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
    ceb0:	8afa      	ldrh	r2, [r7, #22]
    ceb2:	8a7b      	ldrh	r3, [r7, #18]
    ceb4:	4413      	add	r3, r2
    ceb6:	b29b      	uxth	r3, r3
    ceb8:	82fb      	strh	r3, [r7, #22]
    }
    x++;
    ceba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    cebe:	b29b      	uxth	r3, r3
    cec0:	3301      	adds	r3, #1
    cec2:	b29b      	uxth	r3, r3
    cec4:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
    cec6:	8abb      	ldrh	r3, [r7, #20]
    cec8:	3302      	adds	r3, #2
    ceca:	b29b      	uxth	r3, r3
    cecc:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
    cece:	8afa      	ldrh	r2, [r7, #22]
    ced0:	8abb      	ldrh	r3, [r7, #20]
    ced2:	4413      	add	r3, r2
    ced4:	b29b      	uxth	r3, r3
    ced6:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
    ced8:	787b      	ldrb	r3, [r7, #1]
    ceda:	f003 0301 	and.w	r3, r3, #1
    cede:	2b00      	cmp	r3, #0
    cee0:	d02b      	beq.n	cf3a <fillCircleHelper+0xea>
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
    cee2:	88fa      	ldrh	r2, [r7, #6]
    cee4:	8a3b      	ldrh	r3, [r7, #16]
    cee6:	4413      	add	r3, r2
    cee8:	b29b      	uxth	r3, r3
    ceea:	b218      	sxth	r0, r3
    ceec:	88ba      	ldrh	r2, [r7, #4]
    ceee:	89fb      	ldrh	r3, [r7, #14]
    cef0:	1ad3      	subs	r3, r2, r3
    cef2:	b29b      	uxth	r3, r3
    cef4:	b219      	sxth	r1, r3
    cef6:	89fb      	ldrh	r3, [r7, #14]
    cef8:	005b      	lsls	r3, r3, #1
    cefa:	b29a      	uxth	r2, r3
    cefc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    cefe:	4413      	add	r3, r2
    cf00:	b29b      	uxth	r3, r3
    cf02:	3301      	adds	r3, #1
    cf04:	b29b      	uxth	r3, r3
    cf06:	b21a      	sxth	r2, r3
    cf08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    cf0a:	f001 fb05 	bl	e518 <drawFastVLine>
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
    cf0e:	88fa      	ldrh	r2, [r7, #6]
    cf10:	89fb      	ldrh	r3, [r7, #14]
    cf12:	4413      	add	r3, r2
    cf14:	b29b      	uxth	r3, r3
    cf16:	b218      	sxth	r0, r3
    cf18:	88ba      	ldrh	r2, [r7, #4]
    cf1a:	8a3b      	ldrh	r3, [r7, #16]
    cf1c:	1ad3      	subs	r3, r2, r3
    cf1e:	b29b      	uxth	r3, r3
    cf20:	b219      	sxth	r1, r3
    cf22:	8a3b      	ldrh	r3, [r7, #16]
    cf24:	005b      	lsls	r3, r3, #1
    cf26:	b29a      	uxth	r2, r3
    cf28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    cf2a:	4413      	add	r3, r2
    cf2c:	b29b      	uxth	r3, r3
    cf2e:	3301      	adds	r3, #1
    cf30:	b29b      	uxth	r3, r3
    cf32:	b21a      	sxth	r2, r3
    cf34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    cf36:	f001 faef 	bl	e518 <drawFastVLine>
    }
    if (cornername & 0x2) {
    cf3a:	787b      	ldrb	r3, [r7, #1]
    cf3c:	f003 0302 	and.w	r3, r3, #2
    cf40:	2b00      	cmp	r3, #0
    cf42:	d02b      	beq.n	cf9c <fillCircleHelper+0x14c>
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
    cf44:	88fa      	ldrh	r2, [r7, #6]
    cf46:	8a3b      	ldrh	r3, [r7, #16]
    cf48:	1ad3      	subs	r3, r2, r3
    cf4a:	b29b      	uxth	r3, r3
    cf4c:	b218      	sxth	r0, r3
    cf4e:	88ba      	ldrh	r2, [r7, #4]
    cf50:	89fb      	ldrh	r3, [r7, #14]
    cf52:	1ad3      	subs	r3, r2, r3
    cf54:	b29b      	uxth	r3, r3
    cf56:	b219      	sxth	r1, r3
    cf58:	89fb      	ldrh	r3, [r7, #14]
    cf5a:	005b      	lsls	r3, r3, #1
    cf5c:	b29a      	uxth	r2, r3
    cf5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    cf60:	4413      	add	r3, r2
    cf62:	b29b      	uxth	r3, r3
    cf64:	3301      	adds	r3, #1
    cf66:	b29b      	uxth	r3, r3
    cf68:	b21a      	sxth	r2, r3
    cf6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    cf6c:	f001 fad4 	bl	e518 <drawFastVLine>
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
    cf70:	88fa      	ldrh	r2, [r7, #6]
    cf72:	89fb      	ldrh	r3, [r7, #14]
    cf74:	1ad3      	subs	r3, r2, r3
    cf76:	b29b      	uxth	r3, r3
    cf78:	b218      	sxth	r0, r3
    cf7a:	88ba      	ldrh	r2, [r7, #4]
    cf7c:	8a3b      	ldrh	r3, [r7, #16]
    cf7e:	1ad3      	subs	r3, r2, r3
    cf80:	b29b      	uxth	r3, r3
    cf82:	b219      	sxth	r1, r3
    cf84:	8a3b      	ldrh	r3, [r7, #16]
    cf86:	005b      	lsls	r3, r3, #1
    cf88:	b29a      	uxth	r2, r3
    cf8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    cf8c:	4413      	add	r3, r2
    cf8e:	b29b      	uxth	r3, r3
    cf90:	3301      	adds	r3, #1
    cf92:	b29b      	uxth	r3, r3
    cf94:	b21a      	sxth	r2, r3
    cf96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    cf98:	f001 fabe 	bl	e518 <drawFastVLine>
  while (x<y) {
    cf9c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
    cfa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    cfa4:	429a      	cmp	r2, r3
    cfa6:	f6ff af75 	blt.w	ce94 <fillCircleHelper+0x44>
    }
  }
}
    cfaa:	bf00      	nop
    cfac:	371c      	adds	r7, #28
    cfae:	46bd      	mov	sp, r7
    cfb0:	bd90      	pop	{r4, r7, pc}

0000cfb2 <fillRect>:
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}
#endif
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    cfb2:	b590      	push	{r4, r7, lr}
    cfb4:	b085      	sub	sp, #20
    cfb6:	af00      	add	r7, sp, #0
    cfb8:	4604      	mov	r4, r0
    cfba:	4608      	mov	r0, r1
    cfbc:	4611      	mov	r1, r2
    cfbe:	461a      	mov	r2, r3
    cfc0:	4623      	mov	r3, r4
    cfc2:	80fb      	strh	r3, [r7, #6]
    cfc4:	4603      	mov	r3, r0
    cfc6:	80bb      	strh	r3, [r7, #4]
    cfc8:	460b      	mov	r3, r1
    cfca:	807b      	strh	r3, [r7, #2]
    cfcc:	4613      	mov	r3, r2
    cfce:	803b      	strh	r3, [r7, #0]
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
    cfd0:	88fb      	ldrh	r3, [r7, #6]
    cfd2:	81fb      	strh	r3, [r7, #14]
    cfd4:	e00e      	b.n	cff4 <fillRect+0x42>
    drawFastVLine(i, y, h, color);
    cfd6:	8c3b      	ldrh	r3, [r7, #32]
    cfd8:	f9b7 2000 	ldrsh.w	r2, [r7]
    cfdc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    cfe0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
    cfe4:	f001 fa98 	bl	e518 <drawFastVLine>
  for (int16_t i=x; i<x+w; i++) {
    cfe8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    cfec:	b29b      	uxth	r3, r3
    cfee:	3301      	adds	r3, #1
    cff0:	b29b      	uxth	r3, r3
    cff2:	81fb      	strh	r3, [r7, #14]
    cff4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    cff8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
    cffc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    d000:	440b      	add	r3, r1
    d002:	429a      	cmp	r2, r3
    d004:	dbe7      	blt.n	cfd6 <fillRect+0x24>
  }
}
    d006:	bf00      	nop
    d008:	3714      	adds	r7, #20
    d00a:	46bd      	mov	sp, r7
    d00c:	bd90      	pop	{r4, r7, pc}

0000d00e <drawXBitmap>:

//Draw XBitMap Files (*.xbm), exported from GIMP,
//Usage: Export from GIMP to *.xbm, rename *.xbm to *.c and open in editor.
//C Array can be directly used with this function
void drawXBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h, uint16_t color)
{
    d00e:	b580      	push	{r7, lr}
    d010:	b086      	sub	sp, #24
    d012:	af00      	add	r7, sp, #0
    d014:	60ba      	str	r2, [r7, #8]
    d016:	461a      	mov	r2, r3
    d018:	4603      	mov	r3, r0
    d01a:	81fb      	strh	r3, [r7, #14]
    d01c:	460b      	mov	r3, r1
    d01e:	81bb      	strh	r3, [r7, #12]
    d020:	4613      	mov	r3, r2
    d022:	80fb      	strh	r3, [r7, #6]

  int16_t i, j, byteWidth = (w + 7) / 8;
    d024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d028:	3307      	adds	r3, #7
    d02a:	2b00      	cmp	r3, #0
    d02c:	da00      	bge.n	d030 <drawXBitmap+0x22>
    d02e:	3307      	adds	r3, #7
    d030:	10db      	asrs	r3, r3, #3
    d032:	823b      	strh	r3, [r7, #16]
  uint8_t byte=0;
    d034:	2300      	movs	r3, #0
    d036:	74fb      	strb	r3, [r7, #19]

  for(j=0; j<h; j++) {
    d038:	2300      	movs	r3, #0
    d03a:	82bb      	strh	r3, [r7, #20]
    d03c:	e043      	b.n	d0c6 <drawXBitmap+0xb8>
    for(i=0; i<w; i++ ) {
    d03e:	2300      	movs	r3, #0
    d040:	82fb      	strh	r3, [r7, #22]
    d042:	e034      	b.n	d0ae <drawXBitmap+0xa0>
      if(i & 7) byte >>= 1;
    d044:	8afb      	ldrh	r3, [r7, #22]
    d046:	f003 0307 	and.w	r3, r3, #7
    d04a:	2b00      	cmp	r3, #0
    d04c:	d003      	beq.n	d056 <drawXBitmap+0x48>
    d04e:	7cfb      	ldrb	r3, [r7, #19]
    d050:	085b      	lsrs	r3, r3, #1
    d052:	74fb      	strb	r3, [r7, #19]
    d054:	e012      	b.n	d07c <drawXBitmap+0x6e>
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
    d056:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    d05a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
    d05e:	fb02 f303 	mul.w	r3, r2, r3
    d062:	461a      	mov	r2, r3
    d064:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d068:	2b00      	cmp	r3, #0
    d06a:	da00      	bge.n	d06e <drawXBitmap+0x60>
    d06c:	3307      	adds	r3, #7
    d06e:	10db      	asrs	r3, r3, #3
    d070:	b21b      	sxth	r3, r3
    d072:	4413      	add	r3, r2
    d074:	68ba      	ldr	r2, [r7, #8]
    d076:	4413      	add	r3, r2
    d078:	781b      	ldrb	r3, [r3, #0]
    d07a:	74fb      	strb	r3, [r7, #19]
      if(byte & 0x01) drawPixel(x+i, y+j, color);
    d07c:	7cfb      	ldrb	r3, [r7, #19]
    d07e:	f003 0301 	and.w	r3, r3, #1
    d082:	2b00      	cmp	r3, #0
    d084:	d00d      	beq.n	d0a2 <drawXBitmap+0x94>
    d086:	89fa      	ldrh	r2, [r7, #14]
    d088:	8afb      	ldrh	r3, [r7, #22]
    d08a:	4413      	add	r3, r2
    d08c:	b29b      	uxth	r3, r3
    d08e:	b218      	sxth	r0, r3
    d090:	89ba      	ldrh	r2, [r7, #12]
    d092:	8abb      	ldrh	r3, [r7, #20]
    d094:	4413      	add	r3, r2
    d096:	b29b      	uxth	r3, r3
    d098:	b21b      	sxth	r3, r3
    d09a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    d09c:	4619      	mov	r1, r3
    d09e:	f001 f899 	bl	e1d4 <drawPixel>
    for(i=0; i<w; i++ ) {
    d0a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d0a6:	b29b      	uxth	r3, r3
    d0a8:	3301      	adds	r3, #1
    d0aa:	b29b      	uxth	r3, r3
    d0ac:	82fb      	strh	r3, [r7, #22]
    d0ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
    d0b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    d0b6:	429a      	cmp	r2, r3
    d0b8:	dbc4      	blt.n	d044 <drawXBitmap+0x36>
  for(j=0; j<h; j++) {
    d0ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    d0be:	b29b      	uxth	r3, r3
    d0c0:	3301      	adds	r3, #1
    d0c2:	b29b      	uxth	r3, r3
    d0c4:	82bb      	strh	r3, [r7, #20]
    d0c6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
    d0ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    d0ce:	429a      	cmp	r2, r3
    d0d0:	dbb5      	blt.n	d03e <drawXBitmap+0x30>
    }
  }
}
    d0d2:	bf00      	nop
    d0d4:	3718      	adds	r7, #24
    d0d6:	46bd      	mov	sp, r7
    d0d8:	bd80      	pop	{r7, pc}
	...

0000d0dc <write>:

#if ARDUINO >= 100
size_t write(uint8_t c) {
#else
void write(uint8_t c) {
    d0dc:	b5b0      	push	{r4, r5, r7, lr}
    d0de:	b088      	sub	sp, #32
    d0e0:	af02      	add	r7, sp, #8
    d0e2:	4603      	mov	r3, r0
    d0e4:	71fb      	strb	r3, [r7, #7]
#endif

  if(!gfxFont) { // 'Classic' built-in font
    d0e6:	4b87      	ldr	r3, [pc, #540]	; (d304 <write+0x228>)
    d0e8:	681b      	ldr	r3, [r3, #0]
    d0ea:	2b00      	cmp	r3, #0
    d0ec:	d163      	bne.n	d1b6 <write+0xda>

    if(c == '\n') {
    d0ee:	79fb      	ldrb	r3, [r7, #7]
    d0f0:	2b0a      	cmp	r3, #10
    d0f2:	d111      	bne.n	d118 <write+0x3c>
      cursor_y += textsize*8;
    d0f4:	4b84      	ldr	r3, [pc, #528]	; (d308 <write+0x22c>)
    d0f6:	781b      	ldrb	r3, [r3, #0]
    d0f8:	b29b      	uxth	r3, r3
    d0fa:	00db      	lsls	r3, r3, #3
    d0fc:	b29a      	uxth	r2, r3
    d0fe:	4b83      	ldr	r3, [pc, #524]	; (d30c <write+0x230>)
    d100:	f9b3 3000 	ldrsh.w	r3, [r3]
    d104:	b29b      	uxth	r3, r3
    d106:	4413      	add	r3, r2
    d108:	b29b      	uxth	r3, r3
    d10a:	b21a      	sxth	r2, r3
    d10c:	4b7f      	ldr	r3, [pc, #508]	; (d30c <write+0x230>)
    d10e:	801a      	strh	r2, [r3, #0]
      cursor_x  = 0;
    d110:	4b7f      	ldr	r3, [pc, #508]	; (d310 <write+0x234>)
    d112:	2200      	movs	r2, #0
    d114:	801a      	strh	r2, [r3, #0]

  }
#if ARDUINO >= 100
  return 1;
#endif
}
    d116:	e0f0      	b.n	d2fa <write+0x21e>
    } else if(c == '\r') {
    d118:	79fb      	ldrb	r3, [r7, #7]
    d11a:	2b0d      	cmp	r3, #13
    d11c:	f000 80ed 	beq.w	d2fa <write+0x21e>
      if(wrap && ((cursor_x + textsize * 6) >= _width)) { // Heading off edge?
    d120:	4b7c      	ldr	r3, [pc, #496]	; (d314 <write+0x238>)
    d122:	681b      	ldr	r3, [r3, #0]
    d124:	2b00      	cmp	r3, #0
    d126:	d021      	beq.n	d16c <write+0x90>
    d128:	4b79      	ldr	r3, [pc, #484]	; (d310 <write+0x234>)
    d12a:	f9b3 3000 	ldrsh.w	r3, [r3]
    d12e:	4619      	mov	r1, r3
    d130:	4b75      	ldr	r3, [pc, #468]	; (d308 <write+0x22c>)
    d132:	781b      	ldrb	r3, [r3, #0]
    d134:	461a      	mov	r2, r3
    d136:	4613      	mov	r3, r2
    d138:	005b      	lsls	r3, r3, #1
    d13a:	4413      	add	r3, r2
    d13c:	005b      	lsls	r3, r3, #1
    d13e:	440b      	add	r3, r1
    d140:	4a75      	ldr	r2, [pc, #468]	; (d318 <write+0x23c>)
    d142:	f9b2 2000 	ldrsh.w	r2, [r2]
    d146:	4293      	cmp	r3, r2
    d148:	db10      	blt.n	d16c <write+0x90>
        cursor_x  = 0;            // Reset x to zero
    d14a:	4b71      	ldr	r3, [pc, #452]	; (d310 <write+0x234>)
    d14c:	2200      	movs	r2, #0
    d14e:	801a      	strh	r2, [r3, #0]
        cursor_y += textsize * 8; // Advance y one line
    d150:	4b6d      	ldr	r3, [pc, #436]	; (d308 <write+0x22c>)
    d152:	781b      	ldrb	r3, [r3, #0]
    d154:	b29b      	uxth	r3, r3
    d156:	00db      	lsls	r3, r3, #3
    d158:	b29a      	uxth	r2, r3
    d15a:	4b6c      	ldr	r3, [pc, #432]	; (d30c <write+0x230>)
    d15c:	f9b3 3000 	ldrsh.w	r3, [r3]
    d160:	b29b      	uxth	r3, r3
    d162:	4413      	add	r3, r2
    d164:	b29b      	uxth	r3, r3
    d166:	b21a      	sxth	r2, r3
    d168:	4b68      	ldr	r3, [pc, #416]	; (d30c <write+0x230>)
    d16a:	801a      	strh	r2, [r3, #0]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    d16c:	4b68      	ldr	r3, [pc, #416]	; (d310 <write+0x234>)
    d16e:	f9b3 0000 	ldrsh.w	r0, [r3]
    d172:	4b66      	ldr	r3, [pc, #408]	; (d30c <write+0x230>)
    d174:	f9b3 1000 	ldrsh.w	r1, [r3]
    d178:	4b68      	ldr	r3, [pc, #416]	; (d31c <write+0x240>)
    d17a:	881d      	ldrh	r5, [r3, #0]
    d17c:	4b68      	ldr	r3, [pc, #416]	; (d320 <write+0x244>)
    d17e:	881b      	ldrh	r3, [r3, #0]
    d180:	4a61      	ldr	r2, [pc, #388]	; (d308 <write+0x22c>)
    d182:	7812      	ldrb	r2, [r2, #0]
    d184:	79fc      	ldrb	r4, [r7, #7]
    d186:	9201      	str	r2, [sp, #4]
    d188:	9300      	str	r3, [sp, #0]
    d18a:	462b      	mov	r3, r5
    d18c:	4622      	mov	r2, r4
    d18e:	f000 f8c9 	bl	d324 <drawChar>
      cursor_x += textsize * 6;
    d192:	4b5d      	ldr	r3, [pc, #372]	; (d308 <write+0x22c>)
    d194:	781b      	ldrb	r3, [r3, #0]
    d196:	b29b      	uxth	r3, r3
    d198:	461a      	mov	r2, r3
    d19a:	0052      	lsls	r2, r2, #1
    d19c:	4413      	add	r3, r2
    d19e:	005b      	lsls	r3, r3, #1
    d1a0:	b29a      	uxth	r2, r3
    d1a2:	4b5b      	ldr	r3, [pc, #364]	; (d310 <write+0x234>)
    d1a4:	f9b3 3000 	ldrsh.w	r3, [r3]
    d1a8:	b29b      	uxth	r3, r3
    d1aa:	4413      	add	r3, r2
    d1ac:	b29b      	uxth	r3, r3
    d1ae:	b21a      	sxth	r2, r3
    d1b0:	4b57      	ldr	r3, [pc, #348]	; (d310 <write+0x234>)
    d1b2:	801a      	strh	r2, [r3, #0]
}
    d1b4:	e0a1      	b.n	d2fa <write+0x21e>
    if(c == '\n') {
    d1b6:	79fb      	ldrb	r3, [r7, #7]
    d1b8:	2b0a      	cmp	r3, #10
    d1ba:	d117      	bne.n	d1ec <write+0x110>
      cursor_x  = 0;
    d1bc:	4b54      	ldr	r3, [pc, #336]	; (d310 <write+0x234>)
    d1be:	2200      	movs	r2, #0
    d1c0:	801a      	strh	r2, [r3, #0]
      cursor_y += (int16_t)textsize *
    d1c2:	4b51      	ldr	r3, [pc, #324]	; (d308 <write+0x22c>)
    d1c4:	781b      	ldrb	r3, [r3, #0]
    d1c6:	b29b      	uxth	r3, r3
                  (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d1c8:	4a4e      	ldr	r2, [pc, #312]	; (d304 <write+0x228>)
    d1ca:	6812      	ldr	r2, [r2, #0]
    d1cc:	320a      	adds	r2, #10
    d1ce:	7812      	ldrb	r2, [r2, #0]
    d1d0:	b292      	uxth	r2, r2
      cursor_y += (int16_t)textsize *
    d1d2:	fb02 f303 	mul.w	r3, r2, r3
    d1d6:	b29a      	uxth	r2, r3
    d1d8:	4b4c      	ldr	r3, [pc, #304]	; (d30c <write+0x230>)
    d1da:	f9b3 3000 	ldrsh.w	r3, [r3]
    d1de:	b29b      	uxth	r3, r3
    d1e0:	4413      	add	r3, r2
    d1e2:	b29b      	uxth	r3, r3
    d1e4:	b21a      	sxth	r2, r3
    d1e6:	4b49      	ldr	r3, [pc, #292]	; (d30c <write+0x230>)
    d1e8:	801a      	strh	r2, [r3, #0]
}
    d1ea:	e086      	b.n	d2fa <write+0x21e>
    } else if(c != '\r') {
    d1ec:	79fb      	ldrb	r3, [r7, #7]
    d1ee:	2b0d      	cmp	r3, #13
    d1f0:	f000 8083 	beq.w	d2fa <write+0x21e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    d1f4:	4b43      	ldr	r3, [pc, #268]	; (d304 <write+0x228>)
    d1f6:	681b      	ldr	r3, [r3, #0]
    d1f8:	7a1b      	ldrb	r3, [r3, #8]
    d1fa:	75fb      	strb	r3, [r7, #23]
      if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    d1fc:	79fa      	ldrb	r2, [r7, #7]
    d1fe:	7dfb      	ldrb	r3, [r7, #23]
    d200:	429a      	cmp	r2, r3
    d202:	d37a      	bcc.n	d2fa <write+0x21e>
    d204:	4b3f      	ldr	r3, [pc, #252]	; (d304 <write+0x228>)
    d206:	681b      	ldr	r3, [r3, #0]
    d208:	3309      	adds	r3, #9
    d20a:	781b      	ldrb	r3, [r3, #0]
    d20c:	79fa      	ldrb	r2, [r7, #7]
    d20e:	429a      	cmp	r2, r3
    d210:	d873      	bhi.n	d2fa <write+0x21e>
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
    d212:	4b3c      	ldr	r3, [pc, #240]	; (d304 <write+0x228>)
    d214:	681b      	ldr	r3, [r3, #0]
    d216:	3308      	adds	r3, #8
    d218:	781b      	ldrb	r3, [r3, #0]
    d21a:	79fa      	ldrb	r2, [r7, #7]
    d21c:	1ad3      	subs	r3, r2, r3
    d21e:	75bb      	strb	r3, [r7, #22]
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
    d220:	7dbb      	ldrb	r3, [r7, #22]
    d222:	00da      	lsls	r2, r3, #3
    d224:	4b37      	ldr	r3, [pc, #220]	; (d304 <write+0x228>)
    d226:	681b      	ldr	r3, [r3, #0]
    d228:	3304      	adds	r3, #4
    d22a:	681b      	ldr	r3, [r3, #0]
    d22c:	4413      	add	r3, r2
    d22e:	613b      	str	r3, [r7, #16]
        uint8_t   w     = pgm_read_byte(&glyph->width),
    d230:	693b      	ldr	r3, [r7, #16]
    d232:	789b      	ldrb	r3, [r3, #2]
    d234:	73fb      	strb	r3, [r7, #15]
                  h     = pgm_read_byte(&glyph->height);
    d236:	693b      	ldr	r3, [r7, #16]
    d238:	78db      	ldrb	r3, [r3, #3]
    d23a:	73bb      	strb	r3, [r7, #14]
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    d23c:	7bfb      	ldrb	r3, [r7, #15]
    d23e:	2b00      	cmp	r3, #0
    d240:	d048      	beq.n	d2d4 <write+0x1f8>
    d242:	7bbb      	ldrb	r3, [r7, #14]
    d244:	2b00      	cmp	r3, #0
    d246:	d045      	beq.n	d2d4 <write+0x1f8>
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    d248:	693b      	ldr	r3, [r7, #16]
    d24a:	3305      	adds	r3, #5
    d24c:	781b      	ldrb	r3, [r3, #0]
    d24e:	b25b      	sxtb	r3, r3
    d250:	81bb      	strh	r3, [r7, #12]
          if(wrap && ((cursor_x + textsize * (xo + w)) >= _width)) {
    d252:	4b30      	ldr	r3, [pc, #192]	; (d314 <write+0x238>)
    d254:	681b      	ldr	r3, [r3, #0]
    d256:	2b00      	cmp	r3, #0
    d258:	d029      	beq.n	d2ae <write+0x1d2>
    d25a:	4b2d      	ldr	r3, [pc, #180]	; (d310 <write+0x234>)
    d25c:	f9b3 3000 	ldrsh.w	r3, [r3]
    d260:	4619      	mov	r1, r3
    d262:	4b29      	ldr	r3, [pc, #164]	; (d308 <write+0x22c>)
    d264:	781b      	ldrb	r3, [r3, #0]
    d266:	4618      	mov	r0, r3
    d268:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
    d26c:	7bfb      	ldrb	r3, [r7, #15]
    d26e:	4413      	add	r3, r2
    d270:	fb03 f300 	mul.w	r3, r3, r0
    d274:	440b      	add	r3, r1
    d276:	4a28      	ldr	r2, [pc, #160]	; (d318 <write+0x23c>)
    d278:	f9b2 2000 	ldrsh.w	r2, [r2]
    d27c:	4293      	cmp	r3, r2
    d27e:	db16      	blt.n	d2ae <write+0x1d2>
            cursor_x  = 0;
    d280:	4b23      	ldr	r3, [pc, #140]	; (d310 <write+0x234>)
    d282:	2200      	movs	r2, #0
    d284:	801a      	strh	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
    d286:	4b20      	ldr	r3, [pc, #128]	; (d308 <write+0x22c>)
    d288:	781b      	ldrb	r3, [r3, #0]
    d28a:	b29b      	uxth	r3, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    d28c:	4a1d      	ldr	r2, [pc, #116]	; (d304 <write+0x228>)
    d28e:	6812      	ldr	r2, [r2, #0]
    d290:	320a      	adds	r2, #10
    d292:	7812      	ldrb	r2, [r2, #0]
    d294:	b292      	uxth	r2, r2
            cursor_y += (int16_t)textsize *
    d296:	fb02 f303 	mul.w	r3, r2, r3
    d29a:	b29a      	uxth	r2, r3
    d29c:	4b1b      	ldr	r3, [pc, #108]	; (d30c <write+0x230>)
    d29e:	f9b3 3000 	ldrsh.w	r3, [r3]
    d2a2:	b29b      	uxth	r3, r3
    d2a4:	4413      	add	r3, r2
    d2a6:	b29b      	uxth	r3, r3
    d2a8:	b21a      	sxth	r2, r3
    d2aa:	4b18      	ldr	r3, [pc, #96]	; (d30c <write+0x230>)
    d2ac:	801a      	strh	r2, [r3, #0]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    d2ae:	4b18      	ldr	r3, [pc, #96]	; (d310 <write+0x234>)
    d2b0:	f9b3 0000 	ldrsh.w	r0, [r3]
    d2b4:	4b15      	ldr	r3, [pc, #84]	; (d30c <write+0x230>)
    d2b6:	f9b3 1000 	ldrsh.w	r1, [r3]
    d2ba:	4b18      	ldr	r3, [pc, #96]	; (d31c <write+0x240>)
    d2bc:	881d      	ldrh	r5, [r3, #0]
    d2be:	4b18      	ldr	r3, [pc, #96]	; (d320 <write+0x244>)
    d2c0:	881b      	ldrh	r3, [r3, #0]
    d2c2:	4a11      	ldr	r2, [pc, #68]	; (d308 <write+0x22c>)
    d2c4:	7812      	ldrb	r2, [r2, #0]
    d2c6:	79fc      	ldrb	r4, [r7, #7]
    d2c8:	9201      	str	r2, [sp, #4]
    d2ca:	9300      	str	r3, [sp, #0]
    d2cc:	462b      	mov	r3, r5
    d2ce:	4622      	mov	r2, r4
    d2d0:	f000 f828 	bl	d324 <drawChar>
        cursor_x += pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    d2d4:	693b      	ldr	r3, [r7, #16]
    d2d6:	3304      	adds	r3, #4
    d2d8:	781b      	ldrb	r3, [r3, #0]
    d2da:	b29b      	uxth	r3, r3
    d2dc:	4a0a      	ldr	r2, [pc, #40]	; (d308 <write+0x22c>)
    d2de:	7812      	ldrb	r2, [r2, #0]
    d2e0:	b292      	uxth	r2, r2
    d2e2:	fb02 f303 	mul.w	r3, r2, r3
    d2e6:	b29a      	uxth	r2, r3
    d2e8:	4b09      	ldr	r3, [pc, #36]	; (d310 <write+0x234>)
    d2ea:	f9b3 3000 	ldrsh.w	r3, [r3]
    d2ee:	b29b      	uxth	r3, r3
    d2f0:	4413      	add	r3, r2
    d2f2:	b29b      	uxth	r3, r3
    d2f4:	b21a      	sxth	r2, r3
    d2f6:	4b06      	ldr	r3, [pc, #24]	; (d310 <write+0x234>)
    d2f8:	801a      	strh	r2, [r3, #0]
}
    d2fa:	bf00      	nop
    d2fc:	3718      	adds	r7, #24
    d2fe:	46bd      	mov	sp, r7
    d300:	bdb0      	pop	{r4, r5, r7, pc}
    d302:	bf00      	nop
    d304:	00025b78 	.word	0x00025b78
    d308:	00025b88 	.word	0x00025b88
    d30c:	00025b74 	.word	0x00025b74
    d310:	00025b82 	.word	0x00025b82
    d314:	00025b84 	.word	0x00025b84
    d318:	00025b80 	.word	0x00025b80
    d31c:	00025b8e 	.word	0x00025b8e
    d320:	00025b8c 	.word	0x00025b8c

0000d324 <drawChar>:

// Draw a character
void drawChar(int16_t x, int16_t y, unsigned char c,
 uint16_t color, uint16_t bg, uint8_t size) {
    d324:	b590      	push	{r4, r7, lr}
    d326:	b08d      	sub	sp, #52	; 0x34
    d328:	af02      	add	r7, sp, #8
    d32a:	4604      	mov	r4, r0
    d32c:	4608      	mov	r0, r1
    d32e:	4611      	mov	r1, r2
    d330:	461a      	mov	r2, r3
    d332:	4623      	mov	r3, r4
    d334:	80fb      	strh	r3, [r7, #6]
    d336:	4603      	mov	r3, r0
    d338:	80bb      	strh	r3, [r7, #4]
    d33a:	460b      	mov	r3, r1
    d33c:	70fb      	strb	r3, [r7, #3]
    d33e:	4613      	mov	r3, r2
    d340:	803b      	strh	r3, [r7, #0]

  if(!gfxFont) { // 'Classic' built-in font
    d342:	4bb3      	ldr	r3, [pc, #716]	; (d610 <drawChar+0x2ec>)
    d344:	681b      	ldr	r3, [r3, #0]
    d346:	2b00      	cmp	r3, #0
    d348:	f040 80ef 	bne.w	d52a <drawChar+0x206>

    if((x >= _width)            || // Clip right
    d34c:	4bb1      	ldr	r3, [pc, #708]	; (d614 <drawChar+0x2f0>)
    d34e:	f9b3 3000 	ldrsh.w	r3, [r3]
    d352:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    d356:	429a      	cmp	r2, r3
    d358:	f280 81a8 	bge.w	d6ac <drawChar+0x388>
       (y >= _height)           || // Clip bottom
    d35c:	4bae      	ldr	r3, [pc, #696]	; (d618 <drawChar+0x2f4>)
    d35e:	f9b3 3000 	ldrsh.w	r3, [r3]
    if((x >= _width)            || // Clip right
    d362:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
    d366:	429a      	cmp	r2, r3
    d368:	f280 81a0 	bge.w	d6ac <drawChar+0x388>
       ((x + 6 * size - 1) < 0) || // Clip left
    d36c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
    d370:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    d374:	4613      	mov	r3, r2
    d376:	005b      	lsls	r3, r3, #1
    d378:	4413      	add	r3, r2
    d37a:	005b      	lsls	r3, r3, #1
    d37c:	440b      	add	r3, r1
    d37e:	3b01      	subs	r3, #1
       (y >= _height)           || // Clip bottom
    d380:	2b00      	cmp	r3, #0
    d382:	f2c0 8193 	blt.w	d6ac <drawChar+0x388>
       ((y + 8 * size - 1) < 0))   // Clip top
    d386:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
    d38a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d38e:	00db      	lsls	r3, r3, #3
    d390:	4413      	add	r3, r2
    d392:	3b01      	subs	r3, #1
       ((x + 6 * size - 1) < 0) || // Clip left
    d394:	2b00      	cmp	r3, #0
    d396:	f2c0 8189 	blt.w	d6ac <drawChar+0x388>
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
    d39a:	4ba0      	ldr	r3, [pc, #640]	; (d61c <drawChar+0x2f8>)
    d39c:	681b      	ldr	r3, [r3, #0]
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d105      	bne.n	d3ae <drawChar+0x8a>
    d3a2:	78fb      	ldrb	r3, [r7, #3]
    d3a4:	2baf      	cmp	r3, #175	; 0xaf
    d3a6:	d902      	bls.n	d3ae <drawChar+0x8a>
    d3a8:	78fb      	ldrb	r3, [r7, #3]
    d3aa:	3301      	adds	r3, #1
    d3ac:	70fb      	strb	r3, [r7, #3]

    for(int8_t i=0; i<6; i++ ) {
    d3ae:	2300      	movs	r3, #0
    d3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d3b4:	e0b3      	b.n	d51e <drawChar+0x1fa>
      uint8_t line;
      if(i < 5) line = pgm_read_byte(defFont+(c*5)+i);
    d3b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    d3ba:	2b04      	cmp	r3, #4
    d3bc:	dc0d      	bgt.n	d3da <drawChar+0xb6>
    d3be:	78fa      	ldrb	r2, [r7, #3]
    d3c0:	4613      	mov	r3, r2
    d3c2:	009b      	lsls	r3, r3, #2
    d3c4:	4413      	add	r3, r2
    d3c6:	461a      	mov	r2, r3
    d3c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    d3cc:	4413      	add	r3, r2
    d3ce:	4a94      	ldr	r2, [pc, #592]	; (d620 <drawChar+0x2fc>)
    d3d0:	4413      	add	r3, r2
    d3d2:	781b      	ldrb	r3, [r3, #0]
    d3d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    d3d8:	e002      	b.n	d3e0 <drawChar+0xbc>
      else      line = 0x0;
    d3da:	2300      	movs	r3, #0
    d3dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      for(int8_t j=0; j<8; j++, line >>= 1) {
    d3e0:	2300      	movs	r3, #0
    d3e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    d3e6:	e08e      	b.n	d506 <drawChar+0x1e2>
        if(line & 0x1) {
    d3e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    d3ec:	f003 0301 	and.w	r3, r3, #1
    d3f0:	2b00      	cmp	r3, #0
    d3f2:	d03c      	beq.n	d46e <drawChar+0x14a>
          if(size == 1) drawPixel(x+i, y+j, color);
    d3f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d3f8:	2b01      	cmp	r3, #1
    d3fa:	d112      	bne.n	d422 <drawChar+0xfe>
    d3fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    d400:	b29a      	uxth	r2, r3
    d402:	88fb      	ldrh	r3, [r7, #6]
    d404:	4413      	add	r3, r2
    d406:	b29b      	uxth	r3, r3
    d408:	b218      	sxth	r0, r3
    d40a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
    d40e:	b29a      	uxth	r2, r3
    d410:	88bb      	ldrh	r3, [r7, #4]
    d412:	4413      	add	r3, r2
    d414:	b29b      	uxth	r3, r3
    d416:	b21b      	sxth	r3, r3
    d418:	883a      	ldrh	r2, [r7, #0]
    d41a:	4619      	mov	r1, r3
    d41c:	f000 feda 	bl	e1d4 <drawPixel>
    d420:	e065      	b.n	d4ee <drawChar+0x1ca>
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
    d422:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    d426:	b29b      	uxth	r3, r3
    d428:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    d42c:	b292      	uxth	r2, r2
    d42e:	fb02 f303 	mul.w	r3, r2, r3
    d432:	b29a      	uxth	r2, r3
    d434:	88fb      	ldrh	r3, [r7, #6]
    d436:	4413      	add	r3, r2
    d438:	b29b      	uxth	r3, r3
    d43a:	b218      	sxth	r0, r3
    d43c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
    d440:	b29b      	uxth	r3, r3
    d442:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    d446:	b292      	uxth	r2, r2
    d448:	fb02 f303 	mul.w	r3, r2, r3
    d44c:	b29a      	uxth	r2, r3
    d44e:	88bb      	ldrh	r3, [r7, #4]
    d450:	4413      	add	r3, r2
    d452:	b29b      	uxth	r3, r3
    d454:	b219      	sxth	r1, r3
    d456:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d45a:	b21a      	sxth	r2, r3
    d45c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d460:	b21c      	sxth	r4, r3
    d462:	883b      	ldrh	r3, [r7, #0]
    d464:	9300      	str	r3, [sp, #0]
    d466:	4623      	mov	r3, r4
    d468:	f7ff fda3 	bl	cfb2 <fillRect>
    d46c:	e03f      	b.n	d4ee <drawChar+0x1ca>
        } else if(bg != color) {
    d46e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
    d470:	883b      	ldrh	r3, [r7, #0]
    d472:	429a      	cmp	r2, r3
    d474:	d03b      	beq.n	d4ee <drawChar+0x1ca>
          if(size == 1) drawPixel(x+i, y+j, bg);
    d476:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d47a:	2b01      	cmp	r3, #1
    d47c:	d112      	bne.n	d4a4 <drawChar+0x180>
    d47e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    d482:	b29a      	uxth	r2, r3
    d484:	88fb      	ldrh	r3, [r7, #6]
    d486:	4413      	add	r3, r2
    d488:	b29b      	uxth	r3, r3
    d48a:	b218      	sxth	r0, r3
    d48c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
    d490:	b29a      	uxth	r2, r3
    d492:	88bb      	ldrh	r3, [r7, #4]
    d494:	4413      	add	r3, r2
    d496:	b29b      	uxth	r3, r3
    d498:	b21b      	sxth	r3, r3
    d49a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
    d49c:	4619      	mov	r1, r3
    d49e:	f000 fe99 	bl	e1d4 <drawPixel>
    d4a2:	e024      	b.n	d4ee <drawChar+0x1ca>
          else          fillRect(x+i*size, y+j*size, size, size, bg);
    d4a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    d4a8:	b29b      	uxth	r3, r3
    d4aa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    d4ae:	b292      	uxth	r2, r2
    d4b0:	fb02 f303 	mul.w	r3, r2, r3
    d4b4:	b29a      	uxth	r2, r3
    d4b6:	88fb      	ldrh	r3, [r7, #6]
    d4b8:	4413      	add	r3, r2
    d4ba:	b29b      	uxth	r3, r3
    d4bc:	b218      	sxth	r0, r3
    d4be:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
    d4c2:	b29b      	uxth	r3, r3
    d4c4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    d4c8:	b292      	uxth	r2, r2
    d4ca:	fb02 f303 	mul.w	r3, r2, r3
    d4ce:	b29a      	uxth	r2, r3
    d4d0:	88bb      	ldrh	r3, [r7, #4]
    d4d2:	4413      	add	r3, r2
    d4d4:	b29b      	uxth	r3, r3
    d4d6:	b219      	sxth	r1, r3
    d4d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d4dc:	b21a      	sxth	r2, r3
    d4de:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d4e2:	b21c      	sxth	r4, r3
    d4e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    d4e6:	9300      	str	r3, [sp, #0]
    d4e8:	4623      	mov	r3, r4
    d4ea:	f7ff fd62 	bl	cfb2 <fillRect>
      for(int8_t j=0; j<8; j++, line >>= 1) {
    d4ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
    d4f2:	b2db      	uxtb	r3, r3
    d4f4:	3301      	adds	r3, #1
    d4f6:	b2db      	uxtb	r3, r3
    d4f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    d4fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    d500:	085b      	lsrs	r3, r3, #1
    d502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    d506:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
    d50a:	2b07      	cmp	r3, #7
    d50c:	f77f af6c 	ble.w	d3e8 <drawChar+0xc4>
    for(int8_t i=0; i<6; i++ ) {
    d510:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    d514:	b2db      	uxtb	r3, r3
    d516:	3301      	adds	r3, #1
    d518:	b2db      	uxtb	r3, r3
    d51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    d51e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
    d522:	2b05      	cmp	r3, #5
    d524:	f77f af47 	ble.w	d3b6 <drawChar+0x92>
    d528:	e0c1      	b.n	d6ae <drawChar+0x38a>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
    d52a:	4b39      	ldr	r3, [pc, #228]	; (d610 <drawChar+0x2ec>)
    d52c:	681b      	ldr	r3, [r3, #0]
    d52e:	3308      	adds	r3, #8
    d530:	781b      	ldrb	r3, [r3, #0]
    d532:	78fa      	ldrb	r2, [r7, #3]
    d534:	1ad3      	subs	r3, r2, r3
    d536:	70fb      	strb	r3, [r7, #3]
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    d538:	78fb      	ldrb	r3, [r7, #3]
    d53a:	00da      	lsls	r2, r3, #3
    d53c:	4b34      	ldr	r3, [pc, #208]	; (d610 <drawChar+0x2ec>)
    d53e:	681b      	ldr	r3, [r3, #0]
    d540:	3304      	adds	r3, #4
    d542:	681b      	ldr	r3, [r3, #0]
    d544:	4413      	add	r3, r2
    d546:	617b      	str	r3, [r7, #20]
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    d548:	4b31      	ldr	r3, [pc, #196]	; (d610 <drawChar+0x2ec>)
    d54a:	681b      	ldr	r3, [r3, #0]
    d54c:	681b      	ldr	r3, [r3, #0]
    d54e:	613b      	str	r3, [r7, #16]

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    d550:	697b      	ldr	r3, [r7, #20]
    d552:	881b      	ldrh	r3, [r3, #0]
    d554:	847b      	strh	r3, [r7, #34]	; 0x22
    uint8_t  w  = pgm_read_byte(&glyph->width),
    d556:	697b      	ldr	r3, [r7, #20]
    d558:	789b      	ldrb	r3, [r3, #2]
    d55a:	73fb      	strb	r3, [r7, #15]
             h  = pgm_read_byte(&glyph->height);
    d55c:	697b      	ldr	r3, [r7, #20]
    d55e:	78db      	ldrb	r3, [r3, #3]
    d560:	73bb      	strb	r3, [r7, #14]
             //xa = pgm_read_byte(&glyph->xAdvance);
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
    d562:	697b      	ldr	r3, [r7, #20]
    d564:	3305      	adds	r3, #5
    d566:	781b      	ldrb	r3, [r3, #0]
    d568:	737b      	strb	r3, [r7, #13]
             yo = pgm_read_byte(&glyph->yOffset);
    d56a:	697b      	ldr	r3, [r7, #20]
    d56c:	3306      	adds	r3, #6
    d56e:	781b      	ldrb	r3, [r3, #0]
    d570:	733b      	strb	r3, [r7, #12]
    uint8_t  xx, yy, bits=0, bit = 0;
    d572:	2300      	movs	r3, #0
    d574:	77fb      	strb	r3, [r7, #31]
    d576:	2300      	movs	r3, #0
    d578:	77bb      	strb	r3, [r7, #30]
    int16_t  xo16=0, yo16=0;
    d57a:	2300      	movs	r3, #0
    d57c:	83bb      	strh	r3, [r7, #28]
    d57e:	2300      	movs	r3, #0
    d580:	837b      	strh	r3, [r7, #26]

    if(size > 1) {
    d582:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d586:	2b01      	cmp	r3, #1
    d588:	d905      	bls.n	d596 <drawChar+0x272>
      xo16 = xo;
    d58a:	f997 300d 	ldrsb.w	r3, [r7, #13]
    d58e:	83bb      	strh	r3, [r7, #28]
      yo16 = yo;
    d590:	f997 300c 	ldrsb.w	r3, [r7, #12]
    d594:	837b      	strh	r3, [r7, #26]
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
    d596:	2300      	movs	r3, #0
    d598:	f887 3020 	strb.w	r3, [r7, #32]
    d59c:	e07f      	b.n	d69e <drawChar+0x37a>
      for(xx=0; xx<w; xx++) {
    d59e:	2300      	movs	r3, #0
    d5a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    d5a4:	e071      	b.n	d68a <drawChar+0x366>
        if(!(bit++ & 7)) {
    d5a6:	7fbb      	ldrb	r3, [r7, #30]
    d5a8:	1c5a      	adds	r2, r3, #1
    d5aa:	77ba      	strb	r2, [r7, #30]
    d5ac:	f003 0307 	and.w	r3, r3, #7
    d5b0:	2b00      	cmp	r3, #0
    d5b2:	d107      	bne.n	d5c4 <drawChar+0x2a0>
          bits = pgm_read_byte(&bitmap[bo++]);
    d5b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    d5b6:	1c5a      	adds	r2, r3, #1
    d5b8:	847a      	strh	r2, [r7, #34]	; 0x22
    d5ba:	461a      	mov	r2, r3
    d5bc:	693b      	ldr	r3, [r7, #16]
    d5be:	4413      	add	r3, r2
    d5c0:	781b      	ldrb	r3, [r3, #0]
    d5c2:	77fb      	strb	r3, [r7, #31]
        }
        if(bits & 0x80) {
    d5c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	da56      	bge.n	d67a <drawChar+0x356>
          if(size == 1) {
    d5cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d5d0:	2b01      	cmp	r3, #1
    d5d2:	d127      	bne.n	d624 <drawChar+0x300>
            drawPixel(x+xo+xx, y+yo+yy, color);
    d5d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
    d5d8:	b29a      	uxth	r2, r3
    d5da:	88fb      	ldrh	r3, [r7, #6]
    d5dc:	4413      	add	r3, r2
    d5de:	b29a      	uxth	r2, r3
    d5e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    d5e4:	b29b      	uxth	r3, r3
    d5e6:	4413      	add	r3, r2
    d5e8:	b29b      	uxth	r3, r3
    d5ea:	b218      	sxth	r0, r3
    d5ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
    d5f0:	b29a      	uxth	r2, r3
    d5f2:	88bb      	ldrh	r3, [r7, #4]
    d5f4:	4413      	add	r3, r2
    d5f6:	b29a      	uxth	r2, r3
    d5f8:	f897 3020 	ldrb.w	r3, [r7, #32]
    d5fc:	b29b      	uxth	r3, r3
    d5fe:	4413      	add	r3, r2
    d600:	b29b      	uxth	r3, r3
    d602:	b21b      	sxth	r3, r3
    d604:	883a      	ldrh	r2, [r7, #0]
    d606:	4619      	mov	r1, r3
    d608:	f000 fde4 	bl	e1d4 <drawPixel>
    d60c:	e035      	b.n	d67a <drawChar+0x356>
    d60e:	bf00      	nop
    d610:	00025b78 	.word	0x00025b78
    d614:	00025b80 	.word	0x00025b80
    d618:	00025b8a 	.word	0x00025b8a
    d61c:	00025b7c 	.word	0x00025b7c
    d620:	000144b0 	.word	0x000144b0
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
    d624:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
    d628:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    d62c:	4413      	add	r3, r2
    d62e:	b29b      	uxth	r3, r3
    d630:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    d634:	b292      	uxth	r2, r2
    d636:	fb02 f303 	mul.w	r3, r2, r3
    d63a:	b29a      	uxth	r2, r3
    d63c:	88fb      	ldrh	r3, [r7, #6]
    d63e:	4413      	add	r3, r2
    d640:	b29b      	uxth	r3, r3
    d642:	b218      	sxth	r0, r3
    d644:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
    d648:	f897 3020 	ldrb.w	r3, [r7, #32]
    d64c:	4413      	add	r3, r2
    d64e:	b29b      	uxth	r3, r3
    d650:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    d654:	b292      	uxth	r2, r2
    d656:	fb02 f303 	mul.w	r3, r2, r3
    d65a:	b29a      	uxth	r2, r3
    d65c:	88bb      	ldrh	r3, [r7, #4]
    d65e:	4413      	add	r3, r2
    d660:	b29b      	uxth	r3, r3
    d662:	b219      	sxth	r1, r3
    d664:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d668:	b21a      	sxth	r2, r3
    d66a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d66e:	b21c      	sxth	r4, r3
    d670:	883b      	ldrh	r3, [r7, #0]
    d672:	9300      	str	r3, [sp, #0]
    d674:	4623      	mov	r3, r4
    d676:	f7ff fc9c 	bl	cfb2 <fillRect>
          }
        }
        bits <<= 1;
    d67a:	7ffb      	ldrb	r3, [r7, #31]
    d67c:	005b      	lsls	r3, r3, #1
    d67e:	77fb      	strb	r3, [r7, #31]
      for(xx=0; xx<w; xx++) {
    d680:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    d684:	3301      	adds	r3, #1
    d686:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    d68a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
    d68e:	7bfb      	ldrb	r3, [r7, #15]
    d690:	429a      	cmp	r2, r3
    d692:	d388      	bcc.n	d5a6 <drawChar+0x282>
    for(yy=0; yy<h; yy++) {
    d694:	f897 3020 	ldrb.w	r3, [r7, #32]
    d698:	3301      	adds	r3, #1
    d69a:	f887 3020 	strb.w	r3, [r7, #32]
    d69e:	f897 2020 	ldrb.w	r2, [r7, #32]
    d6a2:	7bbb      	ldrb	r3, [r7, #14]
    d6a4:	429a      	cmp	r2, r3
    d6a6:	f4ff af7a 	bcc.w	d59e <drawChar+0x27a>
    d6aa:	e000      	b.n	d6ae <drawChar+0x38a>
      return;
    d6ac:	bf00      	nop
      }
    }

  } // End classic vs custom font
}
    d6ae:	372c      	adds	r7, #44	; 0x2c
    d6b0:	46bd      	mov	sp, r7
    d6b2:	bd90      	pop	{r4, r7, pc}

0000d6b4 <setCursor>:

void setCursor(int16_t x, int16_t y) {
    d6b4:	b480      	push	{r7}
    d6b6:	b083      	sub	sp, #12
    d6b8:	af00      	add	r7, sp, #0
    d6ba:	4603      	mov	r3, r0
    d6bc:	460a      	mov	r2, r1
    d6be:	80fb      	strh	r3, [r7, #6]
    d6c0:	4613      	mov	r3, r2
    d6c2:	80bb      	strh	r3, [r7, #4]
  cursor_x = x;
    d6c4:	4a05      	ldr	r2, [pc, #20]	; (d6dc <setCursor+0x28>)
    d6c6:	88fb      	ldrh	r3, [r7, #6]
    d6c8:	8013      	strh	r3, [r2, #0]
  cursor_y = y;
    d6ca:	4a05      	ldr	r2, [pc, #20]	; (d6e0 <setCursor+0x2c>)
    d6cc:	88bb      	ldrh	r3, [r7, #4]
    d6ce:	8013      	strh	r3, [r2, #0]
}
    d6d0:	bf00      	nop
    d6d2:	370c      	adds	r7, #12
    d6d4:	46bd      	mov	sp, r7
    d6d6:	bc80      	pop	{r7}
    d6d8:	4770      	bx	lr
    d6da:	bf00      	nop
    d6dc:	00025b82 	.word	0x00025b82
    d6e0:	00025b74 	.word	0x00025b74

0000d6e4 <setTextSize>:

int16_t getCursorY(void)  {
  return cursor_y;
}

void setTextSize(uint8_t s) {
    d6e4:	b480      	push	{r7}
    d6e6:	b083      	sub	sp, #12
    d6e8:	af00      	add	r7, sp, #0
    d6ea:	4603      	mov	r3, r0
    d6ec:	71fb      	strb	r3, [r7, #7]
  textsize = (s > 0) ? s : 1;
    d6ee:	79fb      	ldrb	r3, [r7, #7]
    d6f0:	2b00      	cmp	r3, #0
    d6f2:	d001      	beq.n	d6f8 <setTextSize+0x14>
    d6f4:	79fb      	ldrb	r3, [r7, #7]
    d6f6:	e000      	b.n	d6fa <setTextSize+0x16>
    d6f8:	2301      	movs	r3, #1
    d6fa:	4a03      	ldr	r2, [pc, #12]	; (d708 <setTextSize+0x24>)
    d6fc:	7013      	strb	r3, [r2, #0]
}
    d6fe:	bf00      	nop
    d700:	370c      	adds	r7, #12
    d702:	46bd      	mov	sp, r7
    d704:	bc80      	pop	{r7}
    d706:	4770      	bx	lr
    d708:	00025b88 	.word	0x00025b88

0000d70c <setTextColor2>:
  // For 'transparent' background, we'll set the bg
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
}

void setTextColor2(uint16_t c, uint16_t b) {
    d70c:	b480      	push	{r7}
    d70e:	b083      	sub	sp, #12
    d710:	af00      	add	r7, sp, #0
    d712:	4603      	mov	r3, r0
    d714:	460a      	mov	r2, r1
    d716:	80fb      	strh	r3, [r7, #6]
    d718:	4613      	mov	r3, r2
    d71a:	80bb      	strh	r3, [r7, #4]
  textcolor   = c;
    d71c:	4a05      	ldr	r2, [pc, #20]	; (d734 <setTextColor2+0x28>)
    d71e:	88fb      	ldrh	r3, [r7, #6]
    d720:	8013      	strh	r3, [r2, #0]
  textbgcolor = b;
    d722:	4a05      	ldr	r2, [pc, #20]	; (d738 <setTextColor2+0x2c>)
    d724:	88bb      	ldrh	r3, [r7, #4]
    d726:	8013      	strh	r3, [r2, #0]
}
    d728:	bf00      	nop
    d72a:	370c      	adds	r7, #12
    d72c:	46bd      	mov	sp, r7
    d72e:	bc80      	pop	{r7}
    d730:	4770      	bx	lr
    d732:	bf00      	nop
    d734:	00025b8e 	.word	0x00025b8e
    d738:	00025b8c 	.word	0x00025b8c

0000d73c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
    d73c:	b580      	push	{r7, lr}
    d73e:	b084      	sub	sp, #16
    d740:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
    d742:	1d3b      	adds	r3, r7, #4
    d744:	2200      	movs	r2, #0
    d746:	601a      	str	r2, [r3, #0]
    d748:	605a      	str	r2, [r3, #4]
    d74a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
    d74c:	4b18      	ldr	r3, [pc, #96]	; (d7b0 <MX_ADC1_Init+0x74>)
    d74e:	4a19      	ldr	r2, [pc, #100]	; (d7b4 <MX_ADC1_Init+0x78>)
    d750:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
    d752:	4b17      	ldr	r3, [pc, #92]	; (d7b0 <MX_ADC1_Init+0x74>)
    d754:	2200      	movs	r2, #0
    d756:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
    d758:	4b15      	ldr	r3, [pc, #84]	; (d7b0 <MX_ADC1_Init+0x74>)
    d75a:	2200      	movs	r2, #0
    d75c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
    d75e:	4b14      	ldr	r3, [pc, #80]	; (d7b0 <MX_ADC1_Init+0x74>)
    d760:	2200      	movs	r2, #0
    d762:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    d764:	4b12      	ldr	r3, [pc, #72]	; (d7b0 <MX_ADC1_Init+0x74>)
    d766:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
    d76a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    d76c:	4b10      	ldr	r3, [pc, #64]	; (d7b0 <MX_ADC1_Init+0x74>)
    d76e:	2200      	movs	r2, #0
    d770:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
    d772:	4b0f      	ldr	r3, [pc, #60]	; (d7b0 <MX_ADC1_Init+0x74>)
    d774:	2201      	movs	r2, #1
    d776:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
    d778:	480d      	ldr	r0, [pc, #52]	; (d7b0 <MX_ADC1_Init+0x74>)
    d77a:	f7fa fd4b 	bl	8214 <HAL_ADC_Init>
    d77e:	4603      	mov	r3, r0
    d780:	2b00      	cmp	r3, #0
    d782:	d001      	beq.n	d788 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
    d784:	f000 fb81 	bl	de8a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
    d788:	2310      	movs	r3, #16
    d78a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
    d78c:	2301      	movs	r3, #1
    d78e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
    d790:	2300      	movs	r3, #0
    d792:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
    d794:	1d3b      	adds	r3, r7, #4
    d796:	4619      	mov	r1, r3
    d798:	4805      	ldr	r0, [pc, #20]	; (d7b0 <MX_ADC1_Init+0x74>)
    d79a:	f7fa ffc7 	bl	872c <HAL_ADC_ConfigChannel>
    d79e:	4603      	mov	r3, r0
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	d001      	beq.n	d7a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
    d7a4:	f000 fb71 	bl	de8a <Error_Handler>
  }

}
    d7a8:	bf00      	nop
    d7aa:	3710      	adds	r7, #16
    d7ac:	46bd      	mov	sp, r7
    d7ae:	bd80      	pop	{r7, pc}
    d7b0:	00025b90 	.word	0x00025b90
    d7b4:	40012400 	.word	0x40012400

0000d7b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
    d7b8:	b480      	push	{r7}
    d7ba:	b085      	sub	sp, #20
    d7bc:	af00      	add	r7, sp, #0
    d7be:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
    d7c0:	687b      	ldr	r3, [r7, #4]
    d7c2:	681b      	ldr	r3, [r3, #0]
    d7c4:	4a09      	ldr	r2, [pc, #36]	; (d7ec <HAL_ADC_MspInit+0x34>)
    d7c6:	4293      	cmp	r3, r2
    d7c8:	d10b      	bne.n	d7e2 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
    d7ca:	4b09      	ldr	r3, [pc, #36]	; (d7f0 <HAL_ADC_MspInit+0x38>)
    d7cc:	699b      	ldr	r3, [r3, #24]
    d7ce:	4a08      	ldr	r2, [pc, #32]	; (d7f0 <HAL_ADC_MspInit+0x38>)
    d7d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d7d4:	6193      	str	r3, [r2, #24]
    d7d6:	4b06      	ldr	r3, [pc, #24]	; (d7f0 <HAL_ADC_MspInit+0x38>)
    d7d8:	699b      	ldr	r3, [r3, #24]
    d7da:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d7de:	60fb      	str	r3, [r7, #12]
    d7e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
    d7e2:	bf00      	nop
    d7e4:	3714      	adds	r7, #20
    d7e6:	46bd      	mov	sp, r7
    d7e8:	bc80      	pop	{r7}
    d7ea:	4770      	bx	lr
    d7ec:	40012400 	.word	0x40012400
    d7f0:	40021000 	.word	0x40021000

0000d7f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
    d7f4:	b580      	push	{r7, lr}
    d7f6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
    d7f8:	4b06      	ldr	r3, [pc, #24]	; (d814 <MX_CRC_Init+0x20>)
    d7fa:	4a07      	ldr	r2, [pc, #28]	; (d818 <MX_CRC_Init+0x24>)
    d7fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
    d7fe:	4805      	ldr	r0, [pc, #20]	; (d814 <MX_CRC_Init+0x20>)
    d800:	f7fb fa25 	bl	8c4e <HAL_CRC_Init>
    d804:	4603      	mov	r3, r0
    d806:	2b00      	cmp	r3, #0
    d808:	d001      	beq.n	d80e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
    d80a:	f000 fb3e 	bl	de8a <Error_Handler>
  }

}
    d80e:	bf00      	nop
    d810:	bd80      	pop	{r7, pc}
    d812:	bf00      	nop
    d814:	00025bc0 	.word	0x00025bc0
    d818:	40023000 	.word	0x40023000

0000d81c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
    d81c:	b480      	push	{r7}
    d81e:	b085      	sub	sp, #20
    d820:	af00      	add	r7, sp, #0
    d822:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
    d824:	687b      	ldr	r3, [r7, #4]
    d826:	681b      	ldr	r3, [r3, #0]
    d828:	4a09      	ldr	r2, [pc, #36]	; (d850 <HAL_CRC_MspInit+0x34>)
    d82a:	4293      	cmp	r3, r2
    d82c:	d10b      	bne.n	d846 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
    d82e:	4b09      	ldr	r3, [pc, #36]	; (d854 <HAL_CRC_MspInit+0x38>)
    d830:	695b      	ldr	r3, [r3, #20]
    d832:	4a08      	ldr	r2, [pc, #32]	; (d854 <HAL_CRC_MspInit+0x38>)
    d834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d838:	6153      	str	r3, [r2, #20]
    d83a:	4b06      	ldr	r3, [pc, #24]	; (d854 <HAL_CRC_MspInit+0x38>)
    d83c:	695b      	ldr	r3, [r3, #20]
    d83e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d842:	60fb      	str	r3, [r7, #12]
    d844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
    d846:	bf00      	nop
    d848:	3714      	adds	r7, #20
    d84a:	46bd      	mov	sp, r7
    d84c:	bc80      	pop	{r7}
    d84e:	4770      	bx	lr
    d850:	40023000 	.word	0x40023000
    d854:	40021000 	.word	0x40021000

0000d858 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
    d858:	b580      	push	{r7, lr}
    d85a:	b088      	sub	sp, #32
    d85c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
    d85e:	f107 0310 	add.w	r3, r7, #16
    d862:	2200      	movs	r2, #0
    d864:	601a      	str	r2, [r3, #0]
    d866:	605a      	str	r2, [r3, #4]
    d868:	609a      	str	r2, [r3, #8]
    d86a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
    d86c:	4b45      	ldr	r3, [pc, #276]	; (d984 <MX_GPIO_Init+0x12c>)
    d86e:	699b      	ldr	r3, [r3, #24]
    d870:	4a44      	ldr	r2, [pc, #272]	; (d984 <MX_GPIO_Init+0x12c>)
    d872:	f043 0310 	orr.w	r3, r3, #16
    d876:	6193      	str	r3, [r2, #24]
    d878:	4b42      	ldr	r3, [pc, #264]	; (d984 <MX_GPIO_Init+0x12c>)
    d87a:	699b      	ldr	r3, [r3, #24]
    d87c:	f003 0310 	and.w	r3, r3, #16
    d880:	60fb      	str	r3, [r7, #12]
    d882:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
    d884:	4b3f      	ldr	r3, [pc, #252]	; (d984 <MX_GPIO_Init+0x12c>)
    d886:	699b      	ldr	r3, [r3, #24]
    d888:	4a3e      	ldr	r2, [pc, #248]	; (d984 <MX_GPIO_Init+0x12c>)
    d88a:	f043 0320 	orr.w	r3, r3, #32
    d88e:	6193      	str	r3, [r2, #24]
    d890:	4b3c      	ldr	r3, [pc, #240]	; (d984 <MX_GPIO_Init+0x12c>)
    d892:	699b      	ldr	r3, [r3, #24]
    d894:	f003 0320 	and.w	r3, r3, #32
    d898:	60bb      	str	r3, [r7, #8]
    d89a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
    d89c:	4b39      	ldr	r3, [pc, #228]	; (d984 <MX_GPIO_Init+0x12c>)
    d89e:	699b      	ldr	r3, [r3, #24]
    d8a0:	4a38      	ldr	r2, [pc, #224]	; (d984 <MX_GPIO_Init+0x12c>)
    d8a2:	f043 0304 	orr.w	r3, r3, #4
    d8a6:	6193      	str	r3, [r2, #24]
    d8a8:	4b36      	ldr	r3, [pc, #216]	; (d984 <MX_GPIO_Init+0x12c>)
    d8aa:	699b      	ldr	r3, [r3, #24]
    d8ac:	f003 0304 	and.w	r3, r3, #4
    d8b0:	607b      	str	r3, [r7, #4]
    d8b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
    d8b4:	4b33      	ldr	r3, [pc, #204]	; (d984 <MX_GPIO_Init+0x12c>)
    d8b6:	699b      	ldr	r3, [r3, #24]
    d8b8:	4a32      	ldr	r2, [pc, #200]	; (d984 <MX_GPIO_Init+0x12c>)
    d8ba:	f043 0308 	orr.w	r3, r3, #8
    d8be:	6193      	str	r3, [r2, #24]
    d8c0:	4b30      	ldr	r3, [pc, #192]	; (d984 <MX_GPIO_Init+0x12c>)
    d8c2:	699b      	ldr	r3, [r3, #24]
    d8c4:	f003 0308 	and.w	r3, r3, #8
    d8c8:	603b      	str	r3, [r7, #0]
    d8ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADF_CS_Pin|ADF_RST_Pin|LED_Pin, GPIO_PIN_RESET);
    d8cc:	2200      	movs	r2, #0
    d8ce:	f240 410c 	movw	r1, #1036	; 0x40c
    d8d2:	482d      	ldr	r0, [pc, #180]	; (d988 <MX_GPIO_Init+0x130>)
    d8d4:	f7fb fb49 	bl	8f6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AUX1_Pin|AUX2_Pin|AUX3_Pin, GPIO_PIN_RESET);
    d8d8:	2200      	movs	r2, #0
    d8da:	f44f 7148 	mov.w	r1, #800	; 0x320
    d8de:	482b      	ldr	r0, [pc, #172]	; (d98c <MX_GPIO_Init+0x134>)
    d8e0:	f7fb fb43 	bl	8f6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    d8e4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    d8e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    d8ea:	2303      	movs	r3, #3
    d8ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
    d8ee:	f107 0310 	add.w	r3, r7, #16
    d8f2:	4619      	mov	r1, r3
    d8f4:	4826      	ldr	r0, [pc, #152]	; (d990 <MX_GPIO_Init+0x138>)
    d8f6:	f7fb f9c7 	bl	8c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_15;
    d8fa:	f248 1303 	movw	r3, #33027	; 0x8103
    d8fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    d900:	2303      	movs	r3, #3
    d902:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    d904:	f107 0310 	add.w	r3, r7, #16
    d908:	4619      	mov	r1, r3
    d90a:	481f      	ldr	r0, [pc, #124]	; (d988 <MX_GPIO_Init+0x130>)
    d90c:	f7fb f9bc 	bl	8c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ADF_CS_Pin|ADF_RST_Pin|LED_Pin;
    d910:	f240 430c 	movw	r3, #1036	; 0x40c
    d914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    d916:	2301      	movs	r3, #1
    d918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    d91a:	2300      	movs	r3, #0
    d91c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    d91e:	2302      	movs	r3, #2
    d920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    d922:	f107 0310 	add.w	r3, r7, #16
    d926:	4619      	mov	r1, r3
    d928:	4817      	ldr	r0, [pc, #92]	; (d988 <MX_GPIO_Init+0x130>)
    d92a:	f7fb f9ad 	bl	8c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
    d92e:	f64f 431f 	movw	r3, #64543	; 0xfc1f
    d932:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    d934:	2303      	movs	r3, #3
    d936:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    d938:	f107 0310 	add.w	r3, r7, #16
    d93c:	4619      	mov	r1, r3
    d93e:	4813      	ldr	r0, [pc, #76]	; (d98c <MX_GPIO_Init+0x134>)
    d940:	f7fb f9a2 	bl	8c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_SW_Pin;
    d944:	f44f 7300 	mov.w	r3, #512	; 0x200
    d948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    d94a:	2300      	movs	r3, #0
    d94c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
    d94e:	2301      	movs	r3, #1
    d950:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_SW_GPIO_Port, &GPIO_InitStruct);
    d952:	f107 0310 	add.w	r3, r7, #16
    d956:	4619      	mov	r1, r3
    d958:	480b      	ldr	r0, [pc, #44]	; (d988 <MX_GPIO_Init+0x130>)
    d95a:	f7fb f995 	bl	8c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = AUX1_Pin|AUX2_Pin|AUX3_Pin;
    d95e:	f44f 7348 	mov.w	r3, #800	; 0x320
    d962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    d964:	2301      	movs	r3, #1
    d966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    d968:	2300      	movs	r3, #0
    d96a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    d96c:	2302      	movs	r3, #2
    d96e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    d970:	f107 0310 	add.w	r3, r7, #16
    d974:	4619      	mov	r1, r3
    d976:	4805      	ldr	r0, [pc, #20]	; (d98c <MX_GPIO_Init+0x134>)
    d978:	f7fb f986 	bl	8c88 <HAL_GPIO_Init>

}
    d97c:	bf00      	nop
    d97e:	3720      	adds	r7, #32
    d980:	46bd      	mov	sp, r7
    d982:	bd80      	pop	{r7, pc}
    d984:	40021000 	.word	0x40021000
    d988:	40010800 	.word	0x40010800
    d98c:	40010c00 	.word	0x40010c00
    d990:	40011000 	.word	0x40011000

0000d994 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
    d994:	b580      	push	{r7, lr}
    d996:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
    d998:	4b12      	ldr	r3, [pc, #72]	; (d9e4 <MX_I2C1_Init+0x50>)
    d99a:	4a13      	ldr	r2, [pc, #76]	; (d9e8 <MX_I2C1_Init+0x54>)
    d99c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
    d99e:	4b11      	ldr	r3, [pc, #68]	; (d9e4 <MX_I2C1_Init+0x50>)
    d9a0:	4a12      	ldr	r2, [pc, #72]	; (d9ec <MX_I2C1_Init+0x58>)
    d9a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    d9a4:	4b0f      	ldr	r3, [pc, #60]	; (d9e4 <MX_I2C1_Init+0x50>)
    d9a6:	2200      	movs	r2, #0
    d9a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
    d9aa:	4b0e      	ldr	r3, [pc, #56]	; (d9e4 <MX_I2C1_Init+0x50>)
    d9ac:	2200      	movs	r2, #0
    d9ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    d9b0:	4b0c      	ldr	r3, [pc, #48]	; (d9e4 <MX_I2C1_Init+0x50>)
    d9b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d9b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    d9b8:	4b0a      	ldr	r3, [pc, #40]	; (d9e4 <MX_I2C1_Init+0x50>)
    d9ba:	2200      	movs	r2, #0
    d9bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
    d9be:	4b09      	ldr	r3, [pc, #36]	; (d9e4 <MX_I2C1_Init+0x50>)
    d9c0:	2200      	movs	r2, #0
    d9c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    d9c4:	4b07      	ldr	r3, [pc, #28]	; (d9e4 <MX_I2C1_Init+0x50>)
    d9c6:	2200      	movs	r2, #0
    d9c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    d9ca:	4b06      	ldr	r3, [pc, #24]	; (d9e4 <MX_I2C1_Init+0x50>)
    d9cc:	2200      	movs	r2, #0
    d9ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    d9d0:	4804      	ldr	r0, [pc, #16]	; (d9e4 <MX_I2C1_Init+0x50>)
    d9d2:	f7fb fafb 	bl	8fcc <HAL_I2C_Init>
    d9d6:	4603      	mov	r3, r0
    d9d8:	2b00      	cmp	r3, #0
    d9da:	d001      	beq.n	d9e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
    d9dc:	f000 fa55 	bl	de8a <Error_Handler>
  }

}
    d9e0:	bf00      	nop
    d9e2:	bd80      	pop	{r7, pc}
    d9e4:	00025bc8 	.word	0x00025bc8
    d9e8:	40005400 	.word	0x40005400
    d9ec:	000186a0 	.word	0x000186a0

0000d9f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
    d9f0:	b580      	push	{r7, lr}
    d9f2:	b088      	sub	sp, #32
    d9f4:	af00      	add	r7, sp, #0
    d9f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
    d9f8:	f107 0310 	add.w	r3, r7, #16
    d9fc:	2200      	movs	r2, #0
    d9fe:	601a      	str	r2, [r3, #0]
    da00:	605a      	str	r2, [r3, #4]
    da02:	609a      	str	r2, [r3, #8]
    da04:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
    da06:	687b      	ldr	r3, [r7, #4]
    da08:	681b      	ldr	r3, [r3, #0]
    da0a:	4a15      	ldr	r2, [pc, #84]	; (da60 <HAL_I2C_MspInit+0x70>)
    da0c:	4293      	cmp	r3, r2
    da0e:	d123      	bne.n	da58 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
    da10:	4b14      	ldr	r3, [pc, #80]	; (da64 <HAL_I2C_MspInit+0x74>)
    da12:	699b      	ldr	r3, [r3, #24]
    da14:	4a13      	ldr	r2, [pc, #76]	; (da64 <HAL_I2C_MspInit+0x74>)
    da16:	f043 0308 	orr.w	r3, r3, #8
    da1a:	6193      	str	r3, [r2, #24]
    da1c:	4b11      	ldr	r3, [pc, #68]	; (da64 <HAL_I2C_MspInit+0x74>)
    da1e:	699b      	ldr	r3, [r3, #24]
    da20:	f003 0308 	and.w	r3, r3, #8
    da24:	60fb      	str	r3, [r7, #12]
    da26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    da28:	23c0      	movs	r3, #192	; 0xc0
    da2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    da2c:	2312      	movs	r3, #18
    da2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    da30:	2303      	movs	r3, #3
    da32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    da34:	f107 0310 	add.w	r3, r7, #16
    da38:	4619      	mov	r1, r3
    da3a:	480b      	ldr	r0, [pc, #44]	; (da68 <HAL_I2C_MspInit+0x78>)
    da3c:	f7fb f924 	bl	8c88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    da40:	4b08      	ldr	r3, [pc, #32]	; (da64 <HAL_I2C_MspInit+0x74>)
    da42:	69db      	ldr	r3, [r3, #28]
    da44:	4a07      	ldr	r2, [pc, #28]	; (da64 <HAL_I2C_MspInit+0x74>)
    da46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    da4a:	61d3      	str	r3, [r2, #28]
    da4c:	4b05      	ldr	r3, [pc, #20]	; (da64 <HAL_I2C_MspInit+0x74>)
    da4e:	69db      	ldr	r3, [r3, #28]
    da50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    da54:	60bb      	str	r3, [r7, #8]
    da56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
    da58:	bf00      	nop
    da5a:	3720      	adds	r7, #32
    da5c:	46bd      	mov	sp, r7
    da5e:	bd80      	pop	{r7, pc}
    da60:	40005400 	.word	0x40005400
    da64:	40021000 	.word	0x40021000
    da68:	40010c00 	.word	0x40010c00

0000da6c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
    da6c:	b580      	push	{r7, lr}
    da6e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
    da70:	4b09      	ldr	r3, [pc, #36]	; (da98 <MX_IWDG_Init+0x2c>)
    da72:	4a0a      	ldr	r2, [pc, #40]	; (da9c <MX_IWDG_Init+0x30>)
    da74:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
    da76:	4b08      	ldr	r3, [pc, #32]	; (da98 <MX_IWDG_Init+0x2c>)
    da78:	2200      	movs	r2, #0
    da7a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
    da7c:	4b06      	ldr	r3, [pc, #24]	; (da98 <MX_IWDG_Init+0x2c>)
    da7e:	f640 72ff 	movw	r2, #4095	; 0xfff
    da82:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
    da84:	4804      	ldr	r0, [pc, #16]	; (da98 <MX_IWDG_Init+0x2c>)
    da86:	f7fb fec3 	bl	9810 <HAL_IWDG_Init>
    da8a:	4603      	mov	r3, r0
    da8c:	2b00      	cmp	r3, #0
    da8e:	d001      	beq.n	da94 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
    da90:	f000 f9fb 	bl	de8a <Error_Handler>
  }

}
    da94:	bf00      	nop
    da96:	bd80      	pop	{r7, pc}
    da98:	00025c1c 	.word	0x00025c1c
    da9c:	40003000 	.word	0x40003000

0000daa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    daa0:	b590      	push	{r4, r7, lr}
    daa2:	b097      	sub	sp, #92	; 0x5c
    daa4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
    daa6:	f7fa fb43 	bl	8130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
    daaa:	f000 f98b 	bl	ddc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
    daae:	f7ff fed3 	bl	d858 <MX_GPIO_Init>
  MX_I2C1_Init();
    dab2:	f7ff ff6f 	bl	d994 <MX_I2C1_Init>
  MX_RTC_Init();
    dab6:	f000 f9ef 	bl	de98 <MX_RTC_Init>
  MX_SPI1_Init();
    daba:	f000 fa5b 	bl	df74 <MX_SPI1_Init>
  MX_CRC_Init();
    dabe:	f7ff fe99 	bl	d7f4 <MX_CRC_Init>
  MX_IWDG_Init();
    dac2:	f7ff ffd3 	bl	da6c <MX_IWDG_Init>
  MX_USB_DEVICE_Init();
    dac6:	f000 ff83 	bl	e9d0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
    daca:	f7ff fe37 	bl	d73c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	//HAL_IWDG_Init(&hiwdg);
	//HAL_IWDG_Start(&hiwdg);
	//HAL_IWDG_Refresh(&hiwdg);
  	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
    dace:	2201      	movs	r2, #1
    dad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    dad4:	48a2      	ldr	r0, [pc, #648]	; (dd60 <main+0x2c0>)
    dad6:	f7fb fa48 	bl	8f6a <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);
    dada:	48a2      	ldr	r0, [pc, #648]	; (dd64 <main+0x2c4>)
    dadc:	f7fa fc72 	bl	83c4 <HAL_ADC_Start>
	begin();
    dae0:	f000 fac8 	bl	e074 <begin>
	drawXBitmap(0,0,(uint8_t *)logo_bitmap,128,64,WHITE);
    dae4:	2301      	movs	r3, #1
    dae6:	9301      	str	r3, [sp, #4]
    dae8:	2340      	movs	r3, #64	; 0x40
    daea:	9300      	str	r3, [sp, #0]
    daec:	2380      	movs	r3, #128	; 0x80
    daee:	4a9e      	ldr	r2, [pc, #632]	; (dd68 <main+0x2c8>)
    daf0:	2100      	movs	r1, #0
    daf2:	2000      	movs	r0, #0
    daf4:	f7ff fa8b 	bl	d00e <drawXBitmap>
	display();
    daf8:	f000 fb32 	bl	e160 <display>
	for(int i=0;i<10;++i)
    dafc:	2300      	movs	r3, #0
    dafe:	64fb      	str	r3, [r7, #76]	; 0x4c
    db00:	e00d      	b.n	db1e <main+0x7e>
	{
		HAL_Delay(100);
    db02:	2064      	movs	r0, #100	; 0x64
    db04:	f7fa fb64 	bl	81d0 <HAL_Delay>
		if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
    db08:	4898      	ldr	r0, [pc, #608]	; (dd6c <main+0x2cc>)
    db0a:	f7fb feba 	bl	9882 <HAL_IWDG_Refresh>
    db0e:	4603      	mov	r3, r0
    db10:	2b00      	cmp	r3, #0
    db12:	d001      	beq.n	db18 <main+0x78>
			{
			      /* Refresh Error */
			      Error_Handler();
    db14:	f000 f9b9 	bl	de8a <Error_Handler>
	for(int i=0;i<10;++i)
    db18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    db1a:	3301      	adds	r3, #1
    db1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    db1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    db20:	2b09      	cmp	r3, #9
    db22:	ddee      	ble.n	db02 <main+0x62>
			}
	}


	clearDisplay();
    db24:	f000 fc58 	bl	e3d8 <clearDisplay>
	display();
    db28:	f000 fb1a 	bl	e160 <display>
	Adafruit_GFX(getWidth(), getHeight());
    db2c:	f000 fe5a 	bl	e7e4 <getWidth>
    db30:	4603      	mov	r3, r0
    db32:	b21c      	sxth	r4, r3
    db34:	f000 fe60 	bl	e7f8 <getHeight>
    db38:	4603      	mov	r3, r0
    db3a:	b21b      	sxth	r3, r3
    db3c:	4619      	mov	r1, r3
    db3e:	4620      	mov	r0, r4
    db40:	f7ff f904 	bl	cd4c <Adafruit_GFX>
	fillCircle(110, 52, 10, WHITE);
    db44:	2301      	movs	r3, #1
    db46:	220a      	movs	r2, #10
    db48:	2134      	movs	r1, #52	; 0x34
    db4a:	206e      	movs	r0, #110	; 0x6e
    db4c:	f7ff f950 	bl	cdf0 <fillCircle>
	setTextSize(1);
    db50:	2001      	movs	r0, #1
    db52:	f7ff fdc7 	bl	d6e4 <setTextSize>
	//setTextColor1(WHITE);
	setTextColor2(WHITE, BLACK);
    db56:	2100      	movs	r1, #0
    db58:	2001      	movs	r0, #1
    db5a:	f7ff fdd7 	bl	d70c <setTextColor2>
	setCursor(0,0);
    db5e:	2100      	movs	r1, #0
    db60:	2000      	movs	r0, #0
    db62:	f7ff fda7 	bl	d6b4 <setCursor>
	drawText("Test 5 FLASH: ");
    db66:	4882      	ldr	r0, [pc, #520]	; (dd70 <main+0x2d0>)
    db68:	f000 fb20 	bl	e1ac <drawText>

	char strBuf[20];
	sprintf(strBuf,"%dKB",TM_ID_GetFlashSize());
    db6c:	4b81      	ldr	r3, [pc, #516]	; (dd74 <main+0x2d4>)
    db6e:	881b      	ldrh	r3, [r3, #0]
    db70:	b29b      	uxth	r3, r3
    db72:	461a      	mov	r2, r3
    db74:	f107 0318 	add.w	r3, r7, #24
    db78:	497f      	ldr	r1, [pc, #508]	; (dd78 <main+0x2d8>)
    db7a:	4618      	mov	r0, r3
    db7c:	f002 f950 	bl	fe20 <siprintf>
	drawText(strBuf);
    db80:	f107 0318 	add.w	r3, r7, #24
    db84:	4618      	mov	r0, r3
    db86:	f000 fb11 	bl	e1ac <drawText>

	setCursor(0,8);
    db8a:	2108      	movs	r1, #8
    db8c:	2000      	movs	r0, #0
    db8e:	f7ff fd91 	bl	d6b4 <setCursor>
	drawText("ID: ");
    db92:	487a      	ldr	r0, [pc, #488]	; (dd7c <main+0x2dc>)
    db94:	f000 fb0a 	bl	e1ac <drawText>
	sprintf(strBuf,"0x%lX%lX%lX",TM_ID_GetUnique32(0),TM_ID_GetUnique32(1),TM_ID_GetUnique32(2));
    db98:	4b79      	ldr	r3, [pc, #484]	; (dd80 <main+0x2e0>)
    db9a:	681a      	ldr	r2, [r3, #0]
    db9c:	4b79      	ldr	r3, [pc, #484]	; (dd84 <main+0x2e4>)
    db9e:	6819      	ldr	r1, [r3, #0]
    dba0:	4b79      	ldr	r3, [pc, #484]	; (dd88 <main+0x2e8>)
    dba2:	681b      	ldr	r3, [r3, #0]
    dba4:	f107 0018 	add.w	r0, r7, #24
    dba8:	9300      	str	r3, [sp, #0]
    dbaa:	460b      	mov	r3, r1
    dbac:	4977      	ldr	r1, [pc, #476]	; (dd8c <main+0x2ec>)
    dbae:	f002 f937 	bl	fe20 <siprintf>
	drawText(strBuf);
    dbb2:	f107 0318 	add.w	r3, r7, #24
    dbb6:	4618      	mov	r0, r3
    dbb8:	f000 faf8 	bl	e1ac <drawText>

	//setCursor(0,24);
	sprintf(strBuf,"  %ldMHz",HAL_RCC_GetSysClockFreq()/1000000);
    dbbc:	f7fc fcac 	bl	a518 <HAL_RCC_GetSysClockFreq>
    dbc0:	4602      	mov	r2, r0
    dbc2:	4b73      	ldr	r3, [pc, #460]	; (dd90 <main+0x2f0>)
    dbc4:	fba3 2302 	umull	r2, r3, r3, r2
    dbc8:	0c9a      	lsrs	r2, r3, #18
    dbca:	f107 0318 	add.w	r3, r7, #24
    dbce:	4971      	ldr	r1, [pc, #452]	; (dd94 <main+0x2f4>)
    dbd0:	4618      	mov	r0, r3
    dbd2:	f002 f925 	bl	fe20 <siprintf>
		drawText(strBuf);
    dbd6:	f107 0318 	add.w	r3, r7, #24
    dbda:	4618      	mov	r0, r3
    dbdc:	f000 fae6 	bl	e1ac <drawText>
	display();
    dbe0:	f000 fabe 	bl	e160 <display>
	int a =0;
    dbe4:	2300      	movs	r3, #0
    dbe6:	64bb      	str	r3, [r7, #72]	; 0x48
	float temperature =0.0;
    dbe8:	f04f 0300 	mov.w	r3, #0
    dbec:	647b      	str	r3, [r7, #68]	; 0x44
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	char strBuf[20];
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    dbee:	f44f 6180 	mov.w	r1, #1024	; 0x400
    dbf2:	485b      	ldr	r0, [pc, #364]	; (dd60 <main+0x2c0>)
    dbf4:	f7fb f9d1 	bl	8f9a <HAL_GPIO_TogglePin>

	setCursor(0,24);
    dbf8:	2118      	movs	r1, #24
    dbfa:	2000      	movs	r0, #0
    dbfc:	f7ff fd5a 	bl	d6b4 <setCursor>
	RTC_TimeTypeDef currTime;
	HAL_RTC_GetTime(&hrtc,&currTime, RTC_FORMAT_BIN);
    dc00:	463b      	mov	r3, r7
    dc02:	2200      	movs	r2, #0
    dc04:	4619      	mov	r1, r3
    dc06:	4864      	ldr	r0, [pc, #400]	; (dd98 <main+0x2f8>)
    dc08:	f7fc ffdc 	bl	abc4 <HAL_RTC_GetTime>
	sprintf(strBuf,"%02u:%02u:%02u",currTime.Hours,currTime.Minutes, currTime.Seconds );
    dc0c:	783b      	ldrb	r3, [r7, #0]
    dc0e:	461a      	mov	r2, r3
    dc10:	787b      	ldrb	r3, [r7, #1]
    dc12:	4619      	mov	r1, r3
    dc14:	78bb      	ldrb	r3, [r7, #2]
    dc16:	1d38      	adds	r0, r7, #4
    dc18:	9300      	str	r3, [sp, #0]
    dc1a:	460b      	mov	r3, r1
    dc1c:	495f      	ldr	r1, [pc, #380]	; (dd9c <main+0x2fc>)
    dc1e:	f002 f8ff 	bl	fe20 <siprintf>
	drawText(strBuf);
    dc22:	1d3b      	adds	r3, r7, #4
    dc24:	4618      	mov	r0, r3
    dc26:	f000 fac1 	bl	e1ac <drawText>


	if( HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK )
    dc2a:	210a      	movs	r1, #10
    dc2c:	484d      	ldr	r0, [pc, #308]	; (dd64 <main+0x2c4>)
    dc2e:	f7fa fc77 	bl	8520 <HAL_ADC_PollForConversion>
    dc32:	4603      	mov	r3, r0
    dc34:	2b00      	cmp	r3, #0
    dc36:	d12d      	bne.n	dc94 <main+0x1f4>
	{
		const float V25 = 1.35; // [Volts] 1.34 - 1.52
    dc38:	4b59      	ldr	r3, [pc, #356]	; (dda0 <main+0x300>)
    dc3a:	643b      	str	r3, [r7, #64]	; 0x40
		const float Avg_slope = 4.3/1000.0; //[Volts/degree] 4.0 - 4.6
    dc3c:	4b59      	ldr	r3, [pc, #356]	; (dda4 <main+0x304>)
    dc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
		const float SupplyVoltage = 3.3; // [Volts]
    dc40:	4b59      	ldr	r3, [pc, #356]	; (dda8 <main+0x308>)
    dc42:	63bb      	str	r3, [r7, #56]	; 0x38
		const float ADCResolution = 4095.0;
    dc44:	4b59      	ldr	r3, [pc, #356]	; (ddac <main+0x30c>)
    dc46:	637b      	str	r3, [r7, #52]	; 0x34
		float Vadc = (SupplyVoltage*HAL_ADC_GetValue(&hadc1))/ADCResolution;
    dc48:	4846      	ldr	r0, [pc, #280]	; (dd64 <main+0x2c4>)
    dc4a:	f7fa fd63 	bl	8714 <HAL_ADC_GetValue>
    dc4e:	4603      	mov	r3, r0
    dc50:	4618      	mov	r0, r3
    dc52:	f006 fa4d 	bl	140f0 <__aeabi_ui2f>
    dc56:	4603      	mov	r3, r0
    dc58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    dc5a:	4618      	mov	r0, r3
    dc5c:	f006 faa0 	bl	141a0 <__aeabi_fmul>
    dc60:	4603      	mov	r3, r0
    dc62:	6b79      	ldr	r1, [r7, #52]	; 0x34
    dc64:	4618      	mov	r0, r3
    dc66:	f006 fb4f 	bl	14308 <__aeabi_fdiv>
    dc6a:	4603      	mov	r3, r0
    dc6c:	633b      	str	r3, [r7, #48]	; 0x30
		temperature = ((V25-Vadc)/Avg_slope)+25;
    dc6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    dc70:	6c38      	ldr	r0, [r7, #64]	; 0x40
    dc72:	f006 f98b 	bl	13f8c <__aeabi_fsub>
    dc76:	4603      	mov	r3, r0
    dc78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    dc7a:	4618      	mov	r0, r3
    dc7c:	f006 fb44 	bl	14308 <__aeabi_fdiv>
    dc80:	4603      	mov	r3, r0
    dc82:	494b      	ldr	r1, [pc, #300]	; (ddb0 <main+0x310>)
    dc84:	4618      	mov	r0, r3
    dc86:	f006 f983 	bl	13f90 <__addsf3>
    dc8a:	4603      	mov	r3, r0
    dc8c:	647b      	str	r3, [r7, #68]	; 0x44

		HAL_ADC_Start(&hadc1);
    dc8e:	4835      	ldr	r0, [pc, #212]	; (dd64 <main+0x2c4>)
    dc90:	f7fa fb98 	bl	83c4 <HAL_ADC_Start>
	}

	if(HAL_GPIO_ReadPin(USER_SW_GPIO_Port, USER_SW_Pin) == GPIO_PIN_RESET)
    dc94:	f44f 7100 	mov.w	r1, #512	; 0x200
    dc98:	4831      	ldr	r0, [pc, #196]	; (dd60 <main+0x2c0>)
    dc9a:	f7fb f94f 	bl	8f3c <HAL_GPIO_ReadPin>
    dc9e:	4603      	mov	r3, r0
    dca0:	2b00      	cmp	r3, #0
    dca2:	d10f      	bne.n	dcc4 <main+0x224>
	{
		a=0;
    dca4:	2300      	movs	r3, #0
    dca6:	64bb      	str	r3, [r7, #72]	; 0x48
		setCursor(0,40);
    dca8:	2128      	movs	r1, #40	; 0x28
    dcaa:	2000      	movs	r0, #0
    dcac:	f7ff fd02 	bl	d6b4 <setCursor>
		drawText("        ");
    dcb0:	4840      	ldr	r0, [pc, #256]	; (ddb4 <main+0x314>)
    dcb2:	f000 fa7b 	bl	e1ac <drawText>
		fillCircle(110, 52, 8, BLACK);
    dcb6:	2300      	movs	r3, #0
    dcb8:	2208      	movs	r2, #8
    dcba:	2134      	movs	r1, #52	; 0x34
    dcbc:	206e      	movs	r0, #110	; 0x6e
    dcbe:	f7ff f897 	bl	cdf0 <fillCircle>
    dcc2:	e005      	b.n	dcd0 <main+0x230>
	}
	else
	{
		fillCircle(110, 52, 10, WHITE);
    dcc4:	2301      	movs	r3, #1
    dcc6:	220a      	movs	r2, #10
    dcc8:	2134      	movs	r1, #52	; 0x34
    dcca:	206e      	movs	r0, #110	; 0x6e
    dccc:	f7ff f890 	bl	cdf0 <fillCircle>
	}


	sprintf(strBuf,"%d",++a);
    dcd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    dcd2:	3301      	adds	r3, #1
    dcd4:	64bb      	str	r3, [r7, #72]	; 0x48
    dcd6:	1d3b      	adds	r3, r7, #4
    dcd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    dcda:	4937      	ldr	r1, [pc, #220]	; (ddb8 <main+0x318>)
    dcdc:	4618      	mov	r0, r3
    dcde:	f002 f89f 	bl	fe20 <siprintf>
	setCursor(0,40);
    dce2:	2128      	movs	r1, #40	; 0x28
    dce4:	2000      	movs	r0, #0
    dce6:	f7ff fce5 	bl	d6b4 <setCursor>
	drawText(strBuf);
    dcea:	1d3b      	adds	r3, r7, #4
    dcec:	4618      	mov	r0, r3
    dcee:	f000 fa5d 	bl	e1ac <drawText>
	//temperature on OLED; 0xF7 - char for the degree symbol, source: https://community.arduboy.com/t/a-small-program-to-display-the-font/145/3
	int MessageLength = sprintf(strBuf,"%2.4f%cC",temperature, 0xF7);
    dcf2:	6c78      	ldr	r0, [r7, #68]	; 0x44
    dcf4:	f005 fda6 	bl	13844 <__aeabi_f2d>
    dcf8:	460a      	mov	r2, r1
    dcfa:	4601      	mov	r1, r0
    dcfc:	1d38      	adds	r0, r7, #4
    dcfe:	23f7      	movs	r3, #247	; 0xf7
    dd00:	9300      	str	r3, [sp, #0]
    dd02:	4613      	mov	r3, r2
    dd04:	460a      	mov	r2, r1
    dd06:	492d      	ldr	r1, [pc, #180]	; (ddbc <main+0x31c>)
    dd08:	f002 f88a 	bl	fe20 <siprintf>
    dd0c:	62f8      	str	r0, [r7, #44]	; 0x2c
	setCursor(0,50);
    dd0e:	2132      	movs	r1, #50	; 0x32
    dd10:	2000      	movs	r0, #0
    dd12:	f7ff fccf 	bl	d6b4 <setCursor>
	drawText(strBuf);
    dd16:	1d3b      	adds	r3, r7, #4
    dd18:	4618      	mov	r0, r3
    dd1a:	f000 fa47 	bl	e1ac <drawText>
	//temperature on USB virtual COM
	MessageLength = sprintf(strBuf,"%g\r\n",temperature);
    dd1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
    dd20:	f005 fd90 	bl	13844 <__aeabi_f2d>
    dd24:	4603      	mov	r3, r0
    dd26:	460c      	mov	r4, r1
    dd28:	1d38      	adds	r0, r7, #4
    dd2a:	461a      	mov	r2, r3
    dd2c:	4623      	mov	r3, r4
    dd2e:	4924      	ldr	r1, [pc, #144]	; (ddc0 <main+0x320>)
    dd30:	f002 f876 	bl	fe20 <siprintf>
    dd34:	62f8      	str	r0, [r7, #44]	; 0x2c
	CDC_Transmit_FS((uint8_t *)strBuf, MessageLength);
    dd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dd38:	b29a      	uxth	r2, r3
    dd3a:	1d3b      	adds	r3, r7, #4
    dd3c:	4611      	mov	r1, r2
    dd3e:	4618      	mov	r0, r3
    dd40:	f000 ff04 	bl	eb4c <CDC_Transmit_FS>
	display();
    dd44:	f000 fa0c 	bl	e160 <display>

	if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
    dd48:	4808      	ldr	r0, [pc, #32]	; (dd6c <main+0x2cc>)
    dd4a:	f7fb fd9a 	bl	9882 <HAL_IWDG_Refresh>
    dd4e:	4603      	mov	r3, r0
    dd50:	2b00      	cmp	r3, #0
    dd52:	d001      	beq.n	dd58 <main+0x2b8>
	{
	      /* Refresh Error */
	      Error_Handler();
    dd54:	f000 f899 	bl	de8a <Error_Handler>
	}


	HAL_Delay(10);
    dd58:	200a      	movs	r0, #10
    dd5a:	f7fa fa39 	bl	81d0 <HAL_Delay>
  {
    dd5e:	e746      	b.n	dbee <main+0x14e>
    dd60:	40010800 	.word	0x40010800
    dd64:	00025b90 	.word	0x00025b90
    dd68:	000149b0 	.word	0x000149b0
    dd6c:	00025c1c 	.word	0x00025c1c
    dd70:	00014db0 	.word	0x00014db0
    dd74:	1ffff7e0 	.word	0x1ffff7e0
    dd78:	00014dc0 	.word	0x00014dc0
    dd7c:	00014dc8 	.word	0x00014dc8
    dd80:	1ffff7e8 	.word	0x1ffff7e8
    dd84:	1ffff7ec 	.word	0x1ffff7ec
    dd88:	1ffff7f0 	.word	0x1ffff7f0
    dd8c:	00014dd0 	.word	0x00014dd0
    dd90:	431bde83 	.word	0x431bde83
    dd94:	00014ddc 	.word	0x00014ddc
    dd98:	00025c28 	.word	0x00025c28
    dd9c:	00014de8 	.word	0x00014de8
    dda0:	3faccccd 	.word	0x3faccccd
    dda4:	3b8ce704 	.word	0x3b8ce704
    dda8:	40533333 	.word	0x40533333
    ddac:	457ff000 	.word	0x457ff000
    ddb0:	41c80000 	.word	0x41c80000
    ddb4:	00014df8 	.word	0x00014df8
    ddb8:	00014e04 	.word	0x00014e04
    ddbc:	00014e08 	.word	0x00014e08
    ddc0:	00014e14 	.word	0x00014e14

0000ddc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    ddc4:	b580      	push	{r7, lr}
    ddc6:	b094      	sub	sp, #80	; 0x50
    ddc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    ddca:	f107 0328 	add.w	r3, r7, #40	; 0x28
    ddce:	2228      	movs	r2, #40	; 0x28
    ddd0:	2100      	movs	r1, #0
    ddd2:	4618      	mov	r0, r3
    ddd4:	f001 f9bc 	bl	f150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    ddd8:	f107 0314 	add.w	r3, r7, #20
    dddc:	2200      	movs	r2, #0
    ddde:	601a      	str	r2, [r3, #0]
    dde0:	605a      	str	r2, [r3, #4]
    dde2:	609a      	str	r2, [r3, #8]
    dde4:	60da      	str	r2, [r3, #12]
    dde6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    dde8:	1d3b      	adds	r3, r7, #4
    ddea:	2200      	movs	r2, #0
    ddec:	601a      	str	r2, [r3, #0]
    ddee:	605a      	str	r2, [r3, #4]
    ddf0:	609a      	str	r2, [r3, #8]
    ddf2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
    ddf4:	2309      	movs	r3, #9
    ddf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    ddf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ddfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    ddfe:	2300      	movs	r3, #0
    de00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    de02:	2301      	movs	r3, #1
    de04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
    de06:	2301      	movs	r3, #1
    de08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    de0a:	2302      	movs	r3, #2
    de0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    de0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    de12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
    de14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    de18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    de1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
    de1e:	4618      	mov	r0, r3
    de20:	f7fc f810 	bl	9e44 <HAL_RCC_OscConfig>
    de24:	4603      	mov	r3, r0
    de26:	2b00      	cmp	r3, #0
    de28:	d001      	beq.n	de2e <SystemClock_Config+0x6a>
  {
    Error_Handler();
    de2a:	f000 f82e 	bl	de8a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    de2e:	230f      	movs	r3, #15
    de30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
    de32:	2301      	movs	r3, #1
    de34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    de36:	2300      	movs	r3, #0
    de38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    de3a:	2300      	movs	r3, #0
    de3c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
    de3e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    de42:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
    de44:	f107 0314 	add.w	r3, r7, #20
    de48:	2100      	movs	r1, #0
    de4a:	4618      	mov	r0, r3
    de4c:	f7fc fa7a 	bl	a344 <HAL_RCC_ClockConfig>
    de50:	4603      	mov	r3, r0
    de52:	2b00      	cmp	r3, #0
    de54:	d001      	beq.n	de5a <SystemClock_Config+0x96>
  {
    Error_Handler();
    de56:	f000 f818 	bl	de8a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
    de5a:	2313      	movs	r3, #19
    de5c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    de5e:	f44f 7300 	mov.w	r3, #512	; 0x200
    de62:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
    de64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    de68:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
    de6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    de6e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
    de70:	1d3b      	adds	r3, r7, #4
    de72:	4618      	mov	r0, r3
    de74:	f7fc fc04 	bl	a680 <HAL_RCCEx_PeriphCLKConfig>
    de78:	4603      	mov	r3, r0
    de7a:	2b00      	cmp	r3, #0
    de7c:	d001      	beq.n	de82 <SystemClock_Config+0xbe>
  {
    Error_Handler();
    de7e:	f000 f804 	bl	de8a <Error_Handler>
  }
}
    de82:	bf00      	nop
    de84:	3750      	adds	r7, #80	; 0x50
    de86:	46bd      	mov	sp, r7
    de88:	bd80      	pop	{r7, pc}

0000de8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    de8a:	b480      	push	{r7}
    de8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
    de8e:	bf00      	nop
    de90:	46bd      	mov	sp, r7
    de92:	bc80      	pop	{r7}
    de94:	4770      	bx	lr
	...

0000de98 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
    de98:	b580      	push	{r7, lr}
    de9a:	b082      	sub	sp, #8
    de9c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
    de9e:	1d3b      	adds	r3, r7, #4
    dea0:	2100      	movs	r1, #0
    dea2:	460a      	mov	r2, r1
    dea4:	801a      	strh	r2, [r3, #0]
    dea6:	460a      	mov	r2, r1
    dea8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
    deaa:	2300      	movs	r3, #0
    deac:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
    deae:	4b1d      	ldr	r3, [pc, #116]	; (df24 <MX_RTC_Init+0x8c>)
    deb0:	4a1d      	ldr	r2, [pc, #116]	; (df28 <MX_RTC_Init+0x90>)
    deb2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
    deb4:	4b1b      	ldr	r3, [pc, #108]	; (df24 <MX_RTC_Init+0x8c>)
    deb6:	f04f 32ff 	mov.w	r2, #4294967295
    deba:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
    debc:	4b19      	ldr	r3, [pc, #100]	; (df24 <MX_RTC_Init+0x8c>)
    debe:	f44f 7280 	mov.w	r2, #256	; 0x100
    dec2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
    dec4:	4817      	ldr	r0, [pc, #92]	; (df24 <MX_RTC_Init+0x8c>)
    dec6:	f7fc fd4f 	bl	a968 <HAL_RTC_Init>
    deca:	4603      	mov	r3, r0
    decc:	2b00      	cmp	r3, #0
    dece:	d001      	beq.n	ded4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
    ded0:	f7ff ffdb 	bl	de8a <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
    ded4:	2300      	movs	r3, #0
    ded6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
    ded8:	2300      	movs	r3, #0
    deda:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
    dedc:	2300      	movs	r3, #0
    dede:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
    dee0:	1d3b      	adds	r3, r7, #4
    dee2:	2201      	movs	r2, #1
    dee4:	4619      	mov	r1, r3
    dee6:	480f      	ldr	r0, [pc, #60]	; (df24 <MX_RTC_Init+0x8c>)
    dee8:	f7fc fdd4 	bl	aa94 <HAL_RTC_SetTime>
    deec:	4603      	mov	r3, r0
    deee:	2b00      	cmp	r3, #0
    def0:	d001      	beq.n	def6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
    def2:	f7ff ffca 	bl	de8a <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
    def6:	2301      	movs	r3, #1
    def8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
    defa:	2301      	movs	r3, #1
    defc:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
    defe:	2301      	movs	r3, #1
    df00:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
    df02:	2300      	movs	r3, #0
    df04:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
    df06:	463b      	mov	r3, r7
    df08:	2201      	movs	r2, #1
    df0a:	4619      	mov	r1, r3
    df0c:	4805      	ldr	r0, [pc, #20]	; (df24 <MX_RTC_Init+0x8c>)
    df0e:	f7fc ff31 	bl	ad74 <HAL_RTC_SetDate>
    df12:	4603      	mov	r3, r0
    df14:	2b00      	cmp	r3, #0
    df16:	d001      	beq.n	df1c <MX_RTC_Init+0x84>
  {
    Error_Handler();
    df18:	f7ff ffb7 	bl	de8a <Error_Handler>
  }

}
    df1c:	bf00      	nop
    df1e:	3708      	adds	r7, #8
    df20:	46bd      	mov	sp, r7
    df22:	bd80      	pop	{r7, pc}
    df24:	00025c28 	.word	0x00025c28
    df28:	40002800 	.word	0x40002800

0000df2c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
    df2c:	b580      	push	{r7, lr}
    df2e:	b084      	sub	sp, #16
    df30:	af00      	add	r7, sp, #0
    df32:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
    df34:	687b      	ldr	r3, [r7, #4]
    df36:	681b      	ldr	r3, [r3, #0]
    df38:	4a0b      	ldr	r2, [pc, #44]	; (df68 <HAL_RTC_MspInit+0x3c>)
    df3a:	4293      	cmp	r3, r2
    df3c:	d110      	bne.n	df60 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
    df3e:	f7fb ff75 	bl	9e2c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
    df42:	4b0a      	ldr	r3, [pc, #40]	; (df6c <HAL_RTC_MspInit+0x40>)
    df44:	69db      	ldr	r3, [r3, #28]
    df46:	4a09      	ldr	r2, [pc, #36]	; (df6c <HAL_RTC_MspInit+0x40>)
    df48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    df4c:	61d3      	str	r3, [r2, #28]
    df4e:	4b07      	ldr	r3, [pc, #28]	; (df6c <HAL_RTC_MspInit+0x40>)
    df50:	69db      	ldr	r3, [r3, #28]
    df52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    df56:	60fb      	str	r3, [r7, #12]
    df58:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
    df5a:	4b05      	ldr	r3, [pc, #20]	; (df70 <HAL_RTC_MspInit+0x44>)
    df5c:	2201      	movs	r2, #1
    df5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
    df60:	bf00      	nop
    df62:	3710      	adds	r7, #16
    df64:	46bd      	mov	sp, r7
    df66:	bd80      	pop	{r7, pc}
    df68:	40002800 	.word	0x40002800
    df6c:	40021000 	.word	0x40021000
    df70:	4242043c 	.word	0x4242043c

0000df74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
    df74:	b580      	push	{r7, lr}
    df76:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
    df78:	4b17      	ldr	r3, [pc, #92]	; (dfd8 <MX_SPI1_Init+0x64>)
    df7a:	4a18      	ldr	r2, [pc, #96]	; (dfdc <MX_SPI1_Init+0x68>)
    df7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
    df7e:	4b16      	ldr	r3, [pc, #88]	; (dfd8 <MX_SPI1_Init+0x64>)
    df80:	f44f 7282 	mov.w	r2, #260	; 0x104
    df84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    df86:	4b14      	ldr	r3, [pc, #80]	; (dfd8 <MX_SPI1_Init+0x64>)
    df88:	2200      	movs	r2, #0
    df8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    df8c:	4b12      	ldr	r3, [pc, #72]	; (dfd8 <MX_SPI1_Init+0x64>)
    df8e:	2200      	movs	r2, #0
    df90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
    df92:	4b11      	ldr	r3, [pc, #68]	; (dfd8 <MX_SPI1_Init+0x64>)
    df94:	2200      	movs	r2, #0
    df96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    df98:	4b0f      	ldr	r3, [pc, #60]	; (dfd8 <MX_SPI1_Init+0x64>)
    df9a:	2200      	movs	r2, #0
    df9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
    df9e:	4b0e      	ldr	r3, [pc, #56]	; (dfd8 <MX_SPI1_Init+0x64>)
    dfa0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    dfa4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
    dfa6:	4b0c      	ldr	r3, [pc, #48]	; (dfd8 <MX_SPI1_Init+0x64>)
    dfa8:	2210      	movs	r2, #16
    dfaa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    dfac:	4b0a      	ldr	r3, [pc, #40]	; (dfd8 <MX_SPI1_Init+0x64>)
    dfae:	2200      	movs	r2, #0
    dfb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    dfb2:	4b09      	ldr	r3, [pc, #36]	; (dfd8 <MX_SPI1_Init+0x64>)
    dfb4:	2200      	movs	r2, #0
    dfb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    dfb8:	4b07      	ldr	r3, [pc, #28]	; (dfd8 <MX_SPI1_Init+0x64>)
    dfba:	2200      	movs	r2, #0
    dfbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
    dfbe:	4b06      	ldr	r3, [pc, #24]	; (dfd8 <MX_SPI1_Init+0x64>)
    dfc0:	220a      	movs	r2, #10
    dfc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
    dfc4:	4804      	ldr	r0, [pc, #16]	; (dfd8 <MX_SPI1_Init+0x64>)
    dfc6:	f7fd fa2d 	bl	b424 <HAL_SPI_Init>
    dfca:	4603      	mov	r3, r0
    dfcc:	2b00      	cmp	r3, #0
    dfce:	d001      	beq.n	dfd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
    dfd0:	f7ff ff5b 	bl	de8a <Error_Handler>
  }

}
    dfd4:	bf00      	nop
    dfd6:	bd80      	pop	{r7, pc}
    dfd8:	00025c3c 	.word	0x00025c3c
    dfdc:	40013000 	.word	0x40013000

0000dfe0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
    dfe0:	b580      	push	{r7, lr}
    dfe2:	b088      	sub	sp, #32
    dfe4:	af00      	add	r7, sp, #0
    dfe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
    dfe8:	f107 0310 	add.w	r3, r7, #16
    dfec:	2200      	movs	r2, #0
    dfee:	601a      	str	r2, [r3, #0]
    dff0:	605a      	str	r2, [r3, #4]
    dff2:	609a      	str	r2, [r3, #8]
    dff4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
    dff6:	687b      	ldr	r3, [r7, #4]
    dff8:	681b      	ldr	r3, [r3, #0]
    dffa:	4a1b      	ldr	r2, [pc, #108]	; (e068 <HAL_SPI_MspInit+0x88>)
    dffc:	4293      	cmp	r3, r2
    dffe:	d12f      	bne.n	e060 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
    e000:	4b1a      	ldr	r3, [pc, #104]	; (e06c <HAL_SPI_MspInit+0x8c>)
    e002:	699b      	ldr	r3, [r3, #24]
    e004:	4a19      	ldr	r2, [pc, #100]	; (e06c <HAL_SPI_MspInit+0x8c>)
    e006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e00a:	6193      	str	r3, [r2, #24]
    e00c:	4b17      	ldr	r3, [pc, #92]	; (e06c <HAL_SPI_MspInit+0x8c>)
    e00e:	699b      	ldr	r3, [r3, #24]
    e010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    e014:	60fb      	str	r3, [r7, #12]
    e016:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    e018:	4b14      	ldr	r3, [pc, #80]	; (e06c <HAL_SPI_MspInit+0x8c>)
    e01a:	699b      	ldr	r3, [r3, #24]
    e01c:	4a13      	ldr	r2, [pc, #76]	; (e06c <HAL_SPI_MspInit+0x8c>)
    e01e:	f043 0304 	orr.w	r3, r3, #4
    e022:	6193      	str	r3, [r2, #24]
    e024:	4b11      	ldr	r3, [pc, #68]	; (e06c <HAL_SPI_MspInit+0x8c>)
    e026:	699b      	ldr	r3, [r3, #24]
    e028:	f003 0304 	and.w	r3, r3, #4
    e02c:	60bb      	str	r3, [r7, #8]
    e02e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    e030:	23b0      	movs	r3, #176	; 0xb0
    e032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    e034:	2302      	movs	r3, #2
    e036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    e038:	2303      	movs	r3, #3
    e03a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    e03c:	f107 0310 	add.w	r3, r7, #16
    e040:	4619      	mov	r1, r3
    e042:	480b      	ldr	r0, [pc, #44]	; (e070 <HAL_SPI_MspInit+0x90>)
    e044:	f7fa fe20 	bl	8c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    e048:	2340      	movs	r3, #64	; 0x40
    e04a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    e04c:	2300      	movs	r3, #0
    e04e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    e050:	2300      	movs	r3, #0
    e052:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    e054:	f107 0310 	add.w	r3, r7, #16
    e058:	4619      	mov	r1, r3
    e05a:	4805      	ldr	r0, [pc, #20]	; (e070 <HAL_SPI_MspInit+0x90>)
    e05c:	f7fa fe14 	bl	8c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
    e060:	bf00      	nop
    e062:	3720      	adds	r7, #32
    e064:	46bd      	mov	sp, r7
    e066:	bd80      	pop	{r7, pc}
    e068:	40013000 	.word	0x40013000
    e06c:	40021000 	.word	0x40021000
    e070:	40010800 	.word	0x40010800

0000e074 <begin>:

#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }


void begin(void)
{
    e074:	b580      	push	{r7, lr}
    e076:	af00      	add	r7, sp, #0
	vccstate = !SSD1306_EXTERNALVCC;
    e078:	4b38      	ldr	r3, [pc, #224]	; (e15c <begin+0xe8>)
    e07a:	2200      	movs	r2, #0
    e07c:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
    e07e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    e082:	f7fa f8a5 	bl	81d0 <HAL_Delay>
	
  // Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
    e086:	20ae      	movs	r0, #174	; 0xae
    e088:	f000 f986 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
    e08c:	20d5      	movs	r0, #213	; 0xd5
    e08e:	f000 f983 	bl	e398 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
    e092:	2080      	movs	r0, #128	; 0x80
    e094:	f000 f980 	bl	e398 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
    e098:	20a8      	movs	r0, #168	; 0xa8
    e09a:	f000 f97d 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
    e09e:	203f      	movs	r0, #63	; 0x3f
    e0a0:	f000 f97a 	bl	e398 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
    e0a4:	20d3      	movs	r0, #211	; 0xd3
    e0a6:	f000 f977 	bl	e398 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
    e0aa:	2000      	movs	r0, #0
    e0ac:	f000 f974 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
    e0b0:	2040      	movs	r0, #64	; 0x40
    e0b2:	f000 f971 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
    e0b6:	208d      	movs	r0, #141	; 0x8d
    e0b8:	f000 f96e 	bl	e398 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    e0bc:	4b27      	ldr	r3, [pc, #156]	; (e15c <begin+0xe8>)
    e0be:	f993 3000 	ldrsb.w	r3, [r3]
    e0c2:	2b01      	cmp	r3, #1
    e0c4:	d103      	bne.n	e0ce <begin+0x5a>
    { ssd1306_command(0x10); }
    e0c6:	2010      	movs	r0, #16
    e0c8:	f000 f966 	bl	e398 <ssd1306_command>
    e0cc:	e002      	b.n	e0d4 <begin+0x60>
  else
    { ssd1306_command(0x14); }
    e0ce:	2014      	movs	r0, #20
    e0d0:	f000 f962 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
    e0d4:	2020      	movs	r0, #32
    e0d6:	f000 f95f 	bl	e398 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
    e0da:	2000      	movs	r0, #0
    e0dc:	f000 f95c 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
    e0e0:	20a1      	movs	r0, #161	; 0xa1
    e0e2:	f000 f959 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
    e0e6:	20c8      	movs	r0, #200	; 0xc8
    e0e8:	f000 f956 	bl	e398 <ssd1306_command>
  ssd1306_command(0x02);
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
  ssd1306_command(0x8F);

#elif defined SSD1306_128_64
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
    e0ec:	20da      	movs	r0, #218	; 0xda
    e0ee:	f000 f953 	bl	e398 <ssd1306_command>
  ssd1306_command(0x12);
    e0f2:	2012      	movs	r0, #18
    e0f4:	f000 f950 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
    e0f8:	2081      	movs	r0, #129	; 0x81
    e0fa:	f000 f94d 	bl	e398 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    e0fe:	4b17      	ldr	r3, [pc, #92]	; (e15c <begin+0xe8>)
    e100:	f993 3000 	ldrsb.w	r3, [r3]
    e104:	2b01      	cmp	r3, #1
    e106:	d103      	bne.n	e110 <begin+0x9c>
    { ssd1306_command(0x9F); }
    e108:	209f      	movs	r0, #159	; 0x9f
    e10a:	f000 f945 	bl	e398 <ssd1306_command>
    e10e:	e002      	b.n	e116 <begin+0xa2>
  else
    { ssd1306_command(0xCF); }
    e110:	20cf      	movs	r0, #207	; 0xcf
    e112:	f000 f941 	bl	e398 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
    e116:	20d9      	movs	r0, #217	; 0xd9
    e118:	f000 f93e 	bl	e398 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    e11c:	4b0f      	ldr	r3, [pc, #60]	; (e15c <begin+0xe8>)
    e11e:	f993 3000 	ldrsb.w	r3, [r3]
    e122:	2b01      	cmp	r3, #1
    e124:	d103      	bne.n	e12e <begin+0xba>
    { ssd1306_command(0x22); }
    e126:	2022      	movs	r0, #34	; 0x22
    e128:	f000 f936 	bl	e398 <ssd1306_command>
    e12c:	e002      	b.n	e134 <begin+0xc0>
  else
    { ssd1306_command(0xF1); }
    e12e:	20f1      	movs	r0, #241	; 0xf1
    e130:	f000 f932 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
    e134:	20db      	movs	r0, #219	; 0xdb
    e136:	f000 f92f 	bl	e398 <ssd1306_command>
  ssd1306_command(0x40);
    e13a:	2040      	movs	r0, #64	; 0x40
    e13c:	f000 f92c 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    e140:	20a4      	movs	r0, #164	; 0xa4
    e142:	f000 f929 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
    e146:	20a6      	movs	r0, #166	; 0xa6
    e148:	f000 f926 	bl	e398 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
    e14c:	202e      	movs	r0, #46	; 0x2e
    e14e:	f000 f923 	bl	e398 <ssd1306_command>
	
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
    e152:	20af      	movs	r0, #175	; 0xaf
    e154:	f000 f920 	bl	e398 <ssd1306_command>
		
}
    e158:	bf00      	nop
    e15a:	bd80      	pop	{r7, pc}
    e15c:	00025940 	.word	0x00025940

0000e160 <display>:

void display(void)
{
    e160:	b580      	push	{r7, lr}
    e162:	b082      	sub	sp, #8
    e164:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
    e166:	2021      	movs	r0, #33	; 0x21
    e168:	f000 f916 	bl	e398 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
    e16c:	2000      	movs	r0, #0
    e16e:	f000 f913 	bl	e398 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
    e172:	207f      	movs	r0, #127	; 0x7f
    e174:	f000 f910 	bl	e398 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
    e178:	2022      	movs	r0, #34	; 0x22
    e17a:	f000 f90d 	bl	e398 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
    e17e:	2000      	movs	r0, #0
    e180:	f000 f90a 	bl	e398 <ssd1306_command>
#if SSD1306_LCDHEIGHT == 64
    ssd1306_command(7); // Page end address
    e184:	2007      	movs	r0, #7
    e186:	f000 f907 	bl	e398 <ssd1306_command>
#endif
#if SSD1306_LCDHEIGHT == 16
    ssd1306_command(1); // Page end address
#endif

	HAL_I2C_Master_Transmit(&hi2c1, SSD1306_ADDR, framebuffer, sizeof(framebuffer), 0x100);
    e18a:	f44f 7380 	mov.w	r3, #256	; 0x100
    e18e:	9300      	str	r3, [sp, #0]
    e190:	f240 4301 	movw	r3, #1025	; 0x401
    e194:	4a03      	ldr	r2, [pc, #12]	; (e1a4 <display+0x44>)
    e196:	2178      	movs	r1, #120	; 0x78
    e198:	4803      	ldr	r0, [pc, #12]	; (e1a8 <display+0x48>)
    e19a:	f7fb f83f 	bl	921c <HAL_I2C_Master_Transmit>
}
    e19e:	bf00      	nop
    e1a0:	46bd      	mov	sp, r7
    e1a2:	bd80      	pop	{r7, pc}
    e1a4:	000252dc 	.word	0x000252dc
    e1a8:	00025bc8 	.word	0x00025bc8

0000e1ac <drawText>:

void drawText(char *s)
{
    e1ac:	b580      	push	{r7, lr}
    e1ae:	b082      	sub	sp, #8
    e1b0:	af00      	add	r7, sp, #0
    e1b2:	6078      	str	r0, [r7, #4]
	while(*s)
    e1b4:	e006      	b.n	e1c4 <drawText+0x18>
	{
		write(*s++);
    e1b6:	687b      	ldr	r3, [r7, #4]
    e1b8:	1c5a      	adds	r2, r3, #1
    e1ba:	607a      	str	r2, [r7, #4]
    e1bc:	781b      	ldrb	r3, [r3, #0]
    e1be:	4618      	mov	r0, r3
    e1c0:	f7fe ff8c 	bl	d0dc <write>
	while(*s)
    e1c4:	687b      	ldr	r3, [r7, #4]
    e1c6:	781b      	ldrb	r3, [r3, #0]
    e1c8:	2b00      	cmp	r3, #0
    e1ca:	d1f4      	bne.n	e1b6 <drawText+0xa>
	}
}
    e1cc:	bf00      	nop
    e1ce:	3708      	adds	r7, #8
    e1d0:	46bd      	mov	sp, r7
    e1d2:	bd80      	pop	{r7, pc}

0000e1d4 <drawPixel>:

// the most basic function, set a single pixel
void drawPixel(int16_t x, int16_t y, uint16_t color) {
    e1d4:	b480      	push	{r7}
    e1d6:	b085      	sub	sp, #20
    e1d8:	af00      	add	r7, sp, #0
    e1da:	4603      	mov	r3, r0
    e1dc:	80fb      	strh	r3, [r7, #6]
    e1de:	460b      	mov	r3, r1
    e1e0:	80bb      	strh	r3, [r7, #4]
    e1e2:	4613      	mov	r3, r2
    e1e4:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
    e1e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    e1ea:	2b00      	cmp	r3, #0
    e1ec:	f2c0 80c2 	blt.w	e374 <drawPixel+0x1a0>
    e1f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    e1f4:	4b62      	ldr	r3, [pc, #392]	; (e380 <drawPixel+0x1ac>)
    e1f6:	681b      	ldr	r3, [r3, #0]
    e1f8:	429a      	cmp	r2, r3
    e1fa:	f280 80bb 	bge.w	e374 <drawPixel+0x1a0>
    e1fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    e202:	2b00      	cmp	r3, #0
    e204:	f2c0 80b6 	blt.w	e374 <drawPixel+0x1a0>
    e208:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
    e20c:	4b5d      	ldr	r3, [pc, #372]	; (e384 <drawPixel+0x1b0>)
    e20e:	681b      	ldr	r3, [r3, #0]
    e210:	429a      	cmp	r2, r3
    e212:	f280 80af 	bge.w	e374 <drawPixel+0x1a0>
    return;

  // check rotation, move pixel around if necessary
  switch (rotation) {
    e216:	4b5c      	ldr	r3, [pc, #368]	; (e388 <drawPixel+0x1b4>)
    e218:	681b      	ldr	r3, [r3, #0]
    e21a:	2b02      	cmp	r3, #2
    e21c:	d013      	beq.n	e246 <drawPixel+0x72>
    e21e:	2b03      	cmp	r3, #3
    e220:	d024      	beq.n	e26c <drawPixel+0x98>
    e222:	2b01      	cmp	r3, #1
    e224:	d132      	bne.n	e28c <drawPixel+0xb8>
  case 1:
    ssd1306_swap(x, y);
    e226:	88fb      	ldrh	r3, [r7, #6]
    e228:	81bb      	strh	r3, [r7, #12]
    e22a:	88bb      	ldrh	r3, [r7, #4]
    e22c:	80fb      	strh	r3, [r7, #6]
    e22e:	89bb      	ldrh	r3, [r7, #12]
    e230:	80bb      	strh	r3, [r7, #4]
    x = WIDTH - x - 1;
    e232:	4b56      	ldr	r3, [pc, #344]	; (e38c <drawPixel+0x1b8>)
    e234:	681b      	ldr	r3, [r3, #0]
    e236:	b29a      	uxth	r2, r3
    e238:	88fb      	ldrh	r3, [r7, #6]
    e23a:	1ad3      	subs	r3, r2, r3
    e23c:	b29b      	uxth	r3, r3
    e23e:	3b01      	subs	r3, #1
    e240:	b29b      	uxth	r3, r3
    e242:	80fb      	strh	r3, [r7, #6]
    break;
    e244:	e022      	b.n	e28c <drawPixel+0xb8>
  case 2:
    x = WIDTH - x - 1;
    e246:	4b51      	ldr	r3, [pc, #324]	; (e38c <drawPixel+0x1b8>)
    e248:	681b      	ldr	r3, [r3, #0]
    e24a:	b29a      	uxth	r2, r3
    e24c:	88fb      	ldrh	r3, [r7, #6]
    e24e:	1ad3      	subs	r3, r2, r3
    e250:	b29b      	uxth	r3, r3
    e252:	3b01      	subs	r3, #1
    e254:	b29b      	uxth	r3, r3
    e256:	80fb      	strh	r3, [r7, #6]
    y = HEIGHT - y - 1;
    e258:	4b4d      	ldr	r3, [pc, #308]	; (e390 <drawPixel+0x1bc>)
    e25a:	681b      	ldr	r3, [r3, #0]
    e25c:	b29a      	uxth	r2, r3
    e25e:	88bb      	ldrh	r3, [r7, #4]
    e260:	1ad3      	subs	r3, r2, r3
    e262:	b29b      	uxth	r3, r3
    e264:	3b01      	subs	r3, #1
    e266:	b29b      	uxth	r3, r3
    e268:	80bb      	strh	r3, [r7, #4]
    break;
    e26a:	e00f      	b.n	e28c <drawPixel+0xb8>
  case 3:
    ssd1306_swap(x, y);
    e26c:	88fb      	ldrh	r3, [r7, #6]
    e26e:	81fb      	strh	r3, [r7, #14]
    e270:	88bb      	ldrh	r3, [r7, #4]
    e272:	80fb      	strh	r3, [r7, #6]
    e274:	89fb      	ldrh	r3, [r7, #14]
    e276:	80bb      	strh	r3, [r7, #4]
    y = HEIGHT - y - 1;
    e278:	4b45      	ldr	r3, [pc, #276]	; (e390 <drawPixel+0x1bc>)
    e27a:	681b      	ldr	r3, [r3, #0]
    e27c:	b29a      	uxth	r2, r3
    e27e:	88bb      	ldrh	r3, [r7, #4]
    e280:	1ad3      	subs	r3, r2, r3
    e282:	b29b      	uxth	r3, r3
    e284:	3b01      	subs	r3, #1
    e286:	b29b      	uxth	r3, r3
    e288:	80bb      	strh	r3, [r7, #4]
    break;
    e28a:	bf00      	nop
  }

  // x is which column
    switch (color)
    e28c:	887b      	ldrh	r3, [r7, #2]
    e28e:	2b01      	cmp	r3, #1
    e290:	d004      	beq.n	e29c <drawPixel+0xc8>
    e292:	2b02      	cmp	r3, #2
    e294:	d04a      	beq.n	e32c <drawPixel+0x158>
    e296:	2b00      	cmp	r3, #0
    e298:	d023      	beq.n	e2e2 <drawPixel+0x10e>
    e29a:	e06c      	b.n	e376 <drawPixel+0x1a2>
    {
      case WHITE:   framebuffer[x+ (y/8)*SSD1306_LCDWIDTH + 1] |=  (1 << (y&7)); break;
    e29c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    e2a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    e2a4:	2b00      	cmp	r3, #0
    e2a6:	da00      	bge.n	e2aa <drawPixel+0xd6>
    e2a8:	3307      	adds	r3, #7
    e2aa:	10db      	asrs	r3, r3, #3
    e2ac:	b218      	sxth	r0, r3
    e2ae:	4603      	mov	r3, r0
    e2b0:	01db      	lsls	r3, r3, #7
    e2b2:	4413      	add	r3, r2
    e2b4:	3301      	adds	r3, #1
    e2b6:	4a37      	ldr	r2, [pc, #220]	; (e394 <drawPixel+0x1c0>)
    e2b8:	5cd3      	ldrb	r3, [r2, r3]
    e2ba:	b25a      	sxtb	r2, r3
    e2bc:	88bb      	ldrh	r3, [r7, #4]
    e2be:	f003 0307 	and.w	r3, r3, #7
    e2c2:	2101      	movs	r1, #1
    e2c4:	fa01 f303 	lsl.w	r3, r1, r3
    e2c8:	b25b      	sxtb	r3, r3
    e2ca:	4313      	orrs	r3, r2
    e2cc:	b259      	sxtb	r1, r3
    e2ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    e2d2:	4603      	mov	r3, r0
    e2d4:	01db      	lsls	r3, r3, #7
    e2d6:	4413      	add	r3, r2
    e2d8:	3301      	adds	r3, #1
    e2da:	b2c9      	uxtb	r1, r1
    e2dc:	4a2d      	ldr	r2, [pc, #180]	; (e394 <drawPixel+0x1c0>)
    e2de:	54d1      	strb	r1, [r2, r3]
    e2e0:	e049      	b.n	e376 <drawPixel+0x1a2>
      case BLACK:   framebuffer[x+ (y/8)*SSD1306_LCDWIDTH + 1] &= ~(1 << (y&7)); break;
    e2e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    e2e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    e2ea:	2b00      	cmp	r3, #0
    e2ec:	da00      	bge.n	e2f0 <drawPixel+0x11c>
    e2ee:	3307      	adds	r3, #7
    e2f0:	10db      	asrs	r3, r3, #3
    e2f2:	b218      	sxth	r0, r3
    e2f4:	4603      	mov	r3, r0
    e2f6:	01db      	lsls	r3, r3, #7
    e2f8:	4413      	add	r3, r2
    e2fa:	3301      	adds	r3, #1
    e2fc:	4a25      	ldr	r2, [pc, #148]	; (e394 <drawPixel+0x1c0>)
    e2fe:	5cd3      	ldrb	r3, [r2, r3]
    e300:	b25a      	sxtb	r2, r3
    e302:	88bb      	ldrh	r3, [r7, #4]
    e304:	f003 0307 	and.w	r3, r3, #7
    e308:	2101      	movs	r1, #1
    e30a:	fa01 f303 	lsl.w	r3, r1, r3
    e30e:	b25b      	sxtb	r3, r3
    e310:	43db      	mvns	r3, r3
    e312:	b25b      	sxtb	r3, r3
    e314:	4013      	ands	r3, r2
    e316:	b259      	sxtb	r1, r3
    e318:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    e31c:	4603      	mov	r3, r0
    e31e:	01db      	lsls	r3, r3, #7
    e320:	4413      	add	r3, r2
    e322:	3301      	adds	r3, #1
    e324:	b2c9      	uxtb	r1, r1
    e326:	4a1b      	ldr	r2, [pc, #108]	; (e394 <drawPixel+0x1c0>)
    e328:	54d1      	strb	r1, [r2, r3]
    e32a:	e024      	b.n	e376 <drawPixel+0x1a2>
      case INVERSE: framebuffer[x+ (y/8)*SSD1306_LCDWIDTH + 1] ^=  (1 << (y&7)); break;
    e32c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    e330:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    e334:	2b00      	cmp	r3, #0
    e336:	da00      	bge.n	e33a <drawPixel+0x166>
    e338:	3307      	adds	r3, #7
    e33a:	10db      	asrs	r3, r3, #3
    e33c:	b218      	sxth	r0, r3
    e33e:	4603      	mov	r3, r0
    e340:	01db      	lsls	r3, r3, #7
    e342:	4413      	add	r3, r2
    e344:	3301      	adds	r3, #1
    e346:	4a13      	ldr	r2, [pc, #76]	; (e394 <drawPixel+0x1c0>)
    e348:	5cd3      	ldrb	r3, [r2, r3]
    e34a:	b25a      	sxtb	r2, r3
    e34c:	88bb      	ldrh	r3, [r7, #4]
    e34e:	f003 0307 	and.w	r3, r3, #7
    e352:	2101      	movs	r1, #1
    e354:	fa01 f303 	lsl.w	r3, r1, r3
    e358:	b25b      	sxtb	r3, r3
    e35a:	4053      	eors	r3, r2
    e35c:	b259      	sxtb	r1, r3
    e35e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    e362:	4603      	mov	r3, r0
    e364:	01db      	lsls	r3, r3, #7
    e366:	4413      	add	r3, r2
    e368:	3301      	adds	r3, #1
    e36a:	b2c9      	uxtb	r1, r1
    e36c:	4a09      	ldr	r2, [pc, #36]	; (e394 <drawPixel+0x1c0>)
    e36e:	54d1      	strb	r1, [r2, r3]
    e370:	bf00      	nop
    e372:	e000      	b.n	e376 <drawPixel+0x1a2>
    return;
    e374:	bf00      	nop
    }

}
    e376:	3714      	adds	r7, #20
    e378:	46bd      	mov	sp, r7
    e37a:	bc80      	pop	{r7}
    e37c:	4770      	bx	lr
    e37e:	bf00      	nop
    e380:	000252cc 	.word	0x000252cc
    e384:	000252d0 	.word	0x000252d0
    e388:	00025c98 	.word	0x00025c98
    e38c:	000252d4 	.word	0x000252d4
    e390:	000252d8 	.word	0x000252d8
    e394:	000252dc 	.word	0x000252dc

0000e398 <ssd1306_command>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void ssd1306_command(uint8_t c) {
    e398:	b580      	push	{r7, lr}
    e39a:	b086      	sub	sp, #24
    e39c:	af02      	add	r7, sp, #8
    e39e:	4603      	mov	r3, r0
    e3a0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef err;
	uint8_t buf[2];

	buf[0] = 0;
    e3a2:	2300      	movs	r3, #0
    e3a4:	733b      	strb	r3, [r7, #12]
	buf[1] = c;
    e3a6:	79fb      	ldrb	r3, [r7, #7]
    e3a8:	737b      	strb	r3, [r7, #13]
	err = HAL_I2C_Master_Transmit(&hi2c1, SSD1306_ADDR, buf, 2, 0x100);
    e3aa:	f107 020c 	add.w	r2, r7, #12
    e3ae:	f44f 7380 	mov.w	r3, #256	; 0x100
    e3b2:	9300      	str	r3, [sp, #0]
    e3b4:	2302      	movs	r3, #2
    e3b6:	2178      	movs	r1, #120	; 0x78
    e3b8:	4806      	ldr	r0, [pc, #24]	; (e3d4 <ssd1306_command+0x3c>)
    e3ba:	f7fa ff2f 	bl	921c <HAL_I2C_Master_Transmit>
    e3be:	4603      	mov	r3, r0
    e3c0:	73fb      	strb	r3, [r7, #15]
	if(err != HAL_OK)
    e3c2:	7bfb      	ldrb	r3, [r7, #15]
    e3c4:	2b00      	cmp	r3, #0
    e3c6:	d000      	beq.n	e3ca <ssd1306_command+0x32>
		while(1);
    e3c8:	e7fe      	b.n	e3c8 <ssd1306_command+0x30>
}
    e3ca:	bf00      	nop
    e3cc:	3710      	adds	r7, #16
    e3ce:	46bd      	mov	sp, r7
    e3d0:	bd80      	pop	{r7, pc}
    e3d2:	bf00      	nop
    e3d4:	00025bc8 	.word	0x00025bc8

0000e3d8 <clearDisplay>:
  ssd1306_command(contrast);
}


// clear everything
void clearDisplay(void) {
    e3d8:	b580      	push	{r7, lr}
    e3da:	af00      	add	r7, sp, #0
  memset(framebuffer + 1, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
    e3dc:	4b04      	ldr	r3, [pc, #16]	; (e3f0 <clearDisplay+0x18>)
    e3de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e3e2:	2100      	movs	r1, #0
    e3e4:	4618      	mov	r0, r3
    e3e6:	f000 feb3 	bl	f150 <memset>
}
    e3ea:	bf00      	nop
    e3ec:	bd80      	pop	{r7, pc}
    e3ee:	bf00      	nop
    e3f0:	000252dd 	.word	0x000252dd

0000e3f4 <drawFastHLineInternal>:
    drawFastHLineInternal(x, y, w, color);
  }
}


void drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
    e3f4:	b4b0      	push	{r4, r5, r7}
    e3f6:	b083      	sub	sp, #12
    e3f8:	af00      	add	r7, sp, #0
    e3fa:	4604      	mov	r4, r0
    e3fc:	4608      	mov	r0, r1
    e3fe:	4611      	mov	r1, r2
    e400:	461a      	mov	r2, r3
    e402:	4623      	mov	r3, r4
    e404:	80fb      	strh	r3, [r7, #6]
    e406:	4603      	mov	r3, r0
    e408:	80bb      	strh	r3, [r7, #4]
    e40a:	460b      	mov	r3, r1
    e40c:	807b      	strh	r3, [r7, #2]
    e40e:	4613      	mov	r3, r2
    e410:	803b      	strh	r3, [r7, #0]
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
    e412:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    e416:	2b00      	cmp	r3, #0
    e418:	db71      	blt.n	e4fe <drawFastHLineInternal+0x10a>
    e41a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
    e41e:	4b3b      	ldr	r3, [pc, #236]	; (e50c <drawFastHLineInternal+0x118>)
    e420:	681b      	ldr	r3, [r3, #0]
    e422:	429a      	cmp	r2, r3
    e424:	da6b      	bge.n	e4fe <drawFastHLineInternal+0x10a>

  // make sure we don't try to draw below 0
  if(x < 0) {
    e426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    e42a:	2b00      	cmp	r3, #0
    e42c:	da06      	bge.n	e43c <drawFastHLineInternal+0x48>
    w += x;
    e42e:	887a      	ldrh	r2, [r7, #2]
    e430:	88fb      	ldrh	r3, [r7, #6]
    e432:	4413      	add	r3, r2
    e434:	b29b      	uxth	r3, r3
    e436:	807b      	strh	r3, [r7, #2]
    x = 0;
    e438:	2300      	movs	r3, #0
    e43a:	80fb      	strh	r3, [r7, #6]
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
    e43c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    e440:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    e444:	441a      	add	r2, r3
    e446:	4b32      	ldr	r3, [pc, #200]	; (e510 <drawFastHLineInternal+0x11c>)
    e448:	681b      	ldr	r3, [r3, #0]
    e44a:	429a      	cmp	r2, r3
    e44c:	dd06      	ble.n	e45c <drawFastHLineInternal+0x68>
    w = (WIDTH - x);
    e44e:	4b30      	ldr	r3, [pc, #192]	; (e510 <drawFastHLineInternal+0x11c>)
    e450:	681b      	ldr	r3, [r3, #0]
    e452:	b29a      	uxth	r2, r3
    e454:	88fb      	ldrh	r3, [r7, #6]
    e456:	1ad3      	subs	r3, r2, r3
    e458:	b29b      	uxth	r3, r3
    e45a:	807b      	strh	r3, [r7, #2]
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
    e45c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    e460:	2b00      	cmp	r3, #0
    e462:	dd4e      	ble.n	e502 <drawFastHLineInternal+0x10e>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = framebuffer + 1;
    e464:	4c2b      	ldr	r4, [pc, #172]	; (e514 <drawFastHLineInternal+0x120>)
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
    e466:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    e46a:	2b00      	cmp	r3, #0
    e46c:	da00      	bge.n	e470 <drawFastHLineInternal+0x7c>
    e46e:	3307      	adds	r3, #7
    e470:	10db      	asrs	r3, r3, #3
    e472:	b21b      	sxth	r3, r3
    e474:	01db      	lsls	r3, r3, #7
    e476:	441c      	add	r4, r3
  // and offset x columns in
  pBuf += x;
    e478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    e47c:	441c      	add	r4, r3

  register uint8_t mask = 1 << (y&7);
    e47e:	88bb      	ldrh	r3, [r7, #4]
    e480:	f003 0307 	and.w	r3, r3, #7
    e484:	2201      	movs	r2, #1
    e486:	fa02 f303 	lsl.w	r3, r2, r3
    e48a:	b2dd      	uxtb	r5, r3

  switch (color)
    e48c:	883b      	ldrh	r3, [r7, #0]
    e48e:	2b01      	cmp	r3, #1
    e490:	d00a      	beq.n	e4a8 <drawFastHLineInternal+0xb4>
    e492:	2b02      	cmp	r3, #2
    e494:	d029      	beq.n	e4ea <drawFastHLineInternal+0xf6>
    e496:	2b00      	cmp	r3, #0
    e498:	d00f      	beq.n	e4ba <drawFastHLineInternal+0xc6>
    e49a:	e033      	b.n	e504 <drawFastHLineInternal+0x110>
  {
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
    e49c:	4623      	mov	r3, r4
    e49e:	1c5c      	adds	r4, r3, #1
    e4a0:	781a      	ldrb	r2, [r3, #0]
    e4a2:	432a      	orrs	r2, r5
    e4a4:	b2d2      	uxtb	r2, r2
    e4a6:	701a      	strb	r2, [r3, #0]
    e4a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    e4ac:	b29a      	uxth	r2, r3
    e4ae:	3a01      	subs	r2, #1
    e4b0:	b292      	uxth	r2, r2
    e4b2:	807a      	strh	r2, [r7, #2]
    e4b4:	2b00      	cmp	r3, #0
    e4b6:	d1f1      	bne.n	e49c <drawFastHLineInternal+0xa8>
    e4b8:	e024      	b.n	e504 <drawFastHLineInternal+0x110>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
    e4ba:	43eb      	mvns	r3, r5
    e4bc:	b2dd      	uxtb	r5, r3
    e4be:	e005      	b.n	e4cc <drawFastHLineInternal+0xd8>
    e4c0:	4623      	mov	r3, r4
    e4c2:	1c5c      	adds	r4, r3, #1
    e4c4:	781a      	ldrb	r2, [r3, #0]
    e4c6:	402a      	ands	r2, r5
    e4c8:	b2d2      	uxtb	r2, r2
    e4ca:	701a      	strb	r2, [r3, #0]
    e4cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    e4d0:	b29a      	uxth	r2, r3
    e4d2:	3a01      	subs	r2, #1
    e4d4:	b292      	uxth	r2, r2
    e4d6:	807a      	strh	r2, [r7, #2]
    e4d8:	2b00      	cmp	r3, #0
    e4da:	d1f1      	bne.n	e4c0 <drawFastHLineInternal+0xcc>
    e4dc:	e012      	b.n	e504 <drawFastHLineInternal+0x110>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
    e4de:	4623      	mov	r3, r4
    e4e0:	1c5c      	adds	r4, r3, #1
    e4e2:	781a      	ldrb	r2, [r3, #0]
    e4e4:	406a      	eors	r2, r5
    e4e6:	b2d2      	uxtb	r2, r2
    e4e8:	701a      	strb	r2, [r3, #0]
    e4ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    e4ee:	b29a      	uxth	r2, r3
    e4f0:	3a01      	subs	r2, #1
    e4f2:	b292      	uxth	r2, r2
    e4f4:	807a      	strh	r2, [r7, #2]
    e4f6:	2b00      	cmp	r3, #0
    e4f8:	d1f1      	bne.n	e4de <drawFastHLineInternal+0xea>
    e4fa:	bf00      	nop
    e4fc:	e002      	b.n	e504 <drawFastHLineInternal+0x110>
  if(y < 0 || y >= HEIGHT) { return; }
    e4fe:	bf00      	nop
    e500:	e000      	b.n	e504 <drawFastHLineInternal+0x110>
  if(w <= 0) { return; }
    e502:	bf00      	nop
  }
}
    e504:	370c      	adds	r7, #12
    e506:	46bd      	mov	sp, r7
    e508:	bcb0      	pop	{r4, r5, r7}
    e50a:	4770      	bx	lr
    e50c:	000252d8 	.word	0x000252d8
    e510:	000252d4 	.word	0x000252d4
    e514:	000252dd 	.word	0x000252dd

0000e518 <drawFastVLine>:

void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
    e518:	b590      	push	{r4, r7, lr}
    e51a:	b085      	sub	sp, #20
    e51c:	af00      	add	r7, sp, #0
    e51e:	4604      	mov	r4, r0
    e520:	4608      	mov	r0, r1
    e522:	4611      	mov	r1, r2
    e524:	461a      	mov	r2, r3
    e526:	4623      	mov	r3, r4
    e528:	80fb      	strh	r3, [r7, #6]
    e52a:	4603      	mov	r3, r0
    e52c:	80bb      	strh	r3, [r7, #4]
    e52e:	460b      	mov	r3, r1
    e530:	807b      	strh	r3, [r7, #2]
    e532:	4613      	mov	r3, r2
    e534:	803b      	strh	r3, [r7, #0]
  int bSwap = 0;
    e536:	2300      	movs	r3, #0
    e538:	60fb      	str	r3, [r7, #12]
  switch(rotation) {
    e53a:	4b37      	ldr	r3, [pc, #220]	; (e618 <drawFastVLine+0x100>)
    e53c:	681b      	ldr	r3, [r3, #0]
    e53e:	2b03      	cmp	r3, #3
    e540:	d84f      	bhi.n	e5e2 <drawFastVLine+0xca>
    e542:	a201      	add	r2, pc, #4	; (adr r2, e548 <drawFastVLine+0x30>)
    e544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e548:	0000e5e3 	.word	0x0000e5e3
    e54c:	0000e559 	.word	0x0000e559
    e550:	0000e58b 	.word	0x0000e58b
    e554:	0000e5bf 	.word	0x0000e5bf
    case 0:
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = 1;
    e558:	2301      	movs	r3, #1
    e55a:	60fb      	str	r3, [r7, #12]
      ssd1306_swap(x, y);
    e55c:	88fb      	ldrh	r3, [r7, #6]
    e55e:	813b      	strh	r3, [r7, #8]
    e560:	88bb      	ldrh	r3, [r7, #4]
    e562:	80fb      	strh	r3, [r7, #6]
    e564:	893b      	ldrh	r3, [r7, #8]
    e566:	80bb      	strh	r3, [r7, #4]
      x = WIDTH - x - 1;
    e568:	4b2c      	ldr	r3, [pc, #176]	; (e61c <drawFastVLine+0x104>)
    e56a:	681b      	ldr	r3, [r3, #0]
    e56c:	b29a      	uxth	r2, r3
    e56e:	88fb      	ldrh	r3, [r7, #6]
    e570:	1ad3      	subs	r3, r2, r3
    e572:	b29b      	uxth	r3, r3
    e574:	3b01      	subs	r3, #1
    e576:	b29b      	uxth	r3, r3
    e578:	80fb      	strh	r3, [r7, #6]
      x -= (h-1);
    e57a:	88fa      	ldrh	r2, [r7, #6]
    e57c:	887b      	ldrh	r3, [r7, #2]
    e57e:	1ad3      	subs	r3, r2, r3
    e580:	b29b      	uxth	r3, r3
    e582:	3301      	adds	r3, #1
    e584:	b29b      	uxth	r3, r3
    e586:	80fb      	strh	r3, [r7, #6]
      break;
    e588:	e02b      	b.n	e5e2 <drawFastVLine+0xca>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
    e58a:	4b24      	ldr	r3, [pc, #144]	; (e61c <drawFastVLine+0x104>)
    e58c:	681b      	ldr	r3, [r3, #0]
    e58e:	b29a      	uxth	r2, r3
    e590:	88fb      	ldrh	r3, [r7, #6]
    e592:	1ad3      	subs	r3, r2, r3
    e594:	b29b      	uxth	r3, r3
    e596:	3b01      	subs	r3, #1
    e598:	b29b      	uxth	r3, r3
    e59a:	80fb      	strh	r3, [r7, #6]
      y = HEIGHT - y - 1;
    e59c:	4b20      	ldr	r3, [pc, #128]	; (e620 <drawFastVLine+0x108>)
    e59e:	681b      	ldr	r3, [r3, #0]
    e5a0:	b29a      	uxth	r2, r3
    e5a2:	88bb      	ldrh	r3, [r7, #4]
    e5a4:	1ad3      	subs	r3, r2, r3
    e5a6:	b29b      	uxth	r3, r3
    e5a8:	3b01      	subs	r3, #1
    e5aa:	b29b      	uxth	r3, r3
    e5ac:	80bb      	strh	r3, [r7, #4]
      y -= (h-1);
    e5ae:	88ba      	ldrh	r2, [r7, #4]
    e5b0:	887b      	ldrh	r3, [r7, #2]
    e5b2:	1ad3      	subs	r3, r2, r3
    e5b4:	b29b      	uxth	r3, r3
    e5b6:	3301      	adds	r3, #1
    e5b8:	b29b      	uxth	r3, r3
    e5ba:	80bb      	strh	r3, [r7, #4]
      break;
    e5bc:	e011      	b.n	e5e2 <drawFastVLine+0xca>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y
      bSwap = 1;
    e5be:	2301      	movs	r3, #1
    e5c0:	60fb      	str	r3, [r7, #12]
      ssd1306_swap(x, y);
    e5c2:	88fb      	ldrh	r3, [r7, #6]
    e5c4:	817b      	strh	r3, [r7, #10]
    e5c6:	88bb      	ldrh	r3, [r7, #4]
    e5c8:	80fb      	strh	r3, [r7, #6]
    e5ca:	897b      	ldrh	r3, [r7, #10]
    e5cc:	80bb      	strh	r3, [r7, #4]
      y = HEIGHT - y - 1;
    e5ce:	4b14      	ldr	r3, [pc, #80]	; (e620 <drawFastVLine+0x108>)
    e5d0:	681b      	ldr	r3, [r3, #0]
    e5d2:	b29a      	uxth	r2, r3
    e5d4:	88bb      	ldrh	r3, [r7, #4]
    e5d6:	1ad3      	subs	r3, r2, r3
    e5d8:	b29b      	uxth	r3, r3
    e5da:	3b01      	subs	r3, #1
    e5dc:	b29b      	uxth	r3, r3
    e5de:	80bb      	strh	r3, [r7, #4]
      break;
    e5e0:	bf00      	nop
  }

  if(bSwap) {
    e5e2:	68fb      	ldr	r3, [r7, #12]
    e5e4:	2b00      	cmp	r3, #0
    e5e6:	d009      	beq.n	e5fc <drawFastVLine+0xe4>
    drawFastHLineInternal(x, y, h, color);
    e5e8:	883b      	ldrh	r3, [r7, #0]
    e5ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    e5ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    e5f2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
    e5f6:	f7ff fefd 	bl	e3f4 <drawFastHLineInternal>
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
    e5fa:	e008      	b.n	e60e <drawFastVLine+0xf6>
    drawFastVLineInternal(x, y, h, color);
    e5fc:	883b      	ldrh	r3, [r7, #0]
    e5fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    e602:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    e606:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
    e60a:	f000 f80b 	bl	e624 <drawFastVLineInternal>
}
    e60e:	bf00      	nop
    e610:	3714      	adds	r7, #20
    e612:	46bd      	mov	sp, r7
    e614:	bd90      	pop	{r4, r7, pc}
    e616:	bf00      	nop
    e618:	00025c98 	.word	0x00025c98
    e61c:	000252d4 	.word	0x000252d4
    e620:	000252d8 	.word	0x000252d8

0000e624 <drawFastVLineInternal>:


inline void drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {
    e624:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    e628:	b083      	sub	sp, #12
    e62a:	af00      	add	r7, sp, #0
    e62c:	4604      	mov	r4, r0
    e62e:	4608      	mov	r0, r1
    e630:	4611      	mov	r1, r2
    e632:	461a      	mov	r2, r3
    e634:	4623      	mov	r3, r4
    e636:	80fb      	strh	r3, [r7, #6]
    e638:	4603      	mov	r3, r0
    e63a:	80bb      	strh	r3, [r7, #4]
    e63c:	460b      	mov	r3, r1
    e63e:	807b      	strh	r3, [r7, #2]
    e640:	4613      	mov	r3, r2
    e642:	803b      	strh	r3, [r7, #0]

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
    e644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    e648:	2b00      	cmp	r3, #0
    e64a:	f2c0 80b6 	blt.w	e7ba <drawFastVLineInternal+0x196>
    e64e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    e652:	4b5f      	ldr	r3, [pc, #380]	; (e7d0 <drawFastVLineInternal+0x1ac>)
    e654:	681b      	ldr	r3, [r3, #0]
    e656:	429a      	cmp	r2, r3
    e658:	f280 80af 	bge.w	e7ba <drawFastVLineInternal+0x196>

  // make sure we don't try to draw below 0
  if(__y < 0) {
    e65c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
    e660:	2b00      	cmp	r3, #0
    e662:	da06      	bge.n	e672 <drawFastVLineInternal+0x4e>
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    e664:	887a      	ldrh	r2, [r7, #2]
    e666:	88bb      	ldrh	r3, [r7, #4]
    e668:	4413      	add	r3, r2
    e66a:	b29b      	uxth	r3, r3
    e66c:	807b      	strh	r3, [r7, #2]
    __y = 0;
    e66e:	2300      	movs	r3, #0
    e670:	80bb      	strh	r3, [r7, #4]

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
    e672:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
    e676:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    e67a:	441a      	add	r2, r3
    e67c:	4b55      	ldr	r3, [pc, #340]	; (e7d4 <drawFastVLineInternal+0x1b0>)
    e67e:	681b      	ldr	r3, [r3, #0]
    e680:	429a      	cmp	r2, r3
    e682:	dd06      	ble.n	e692 <drawFastVLineInternal+0x6e>
    __h = (HEIGHT - __y);
    e684:	4b53      	ldr	r3, [pc, #332]	; (e7d4 <drawFastVLineInternal+0x1b0>)
    e686:	681b      	ldr	r3, [r3, #0]
    e688:	b29a      	uxth	r2, r3
    e68a:	88bb      	ldrh	r3, [r7, #4]
    e68c:	1ad3      	subs	r3, r2, r3
    e68e:	b29b      	uxth	r3, r3
    e690:	807b      	strh	r3, [r7, #2]
  }

  // if our height is now negative, punt
  if(__h <= 0) {
    e692:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    e696:	2b00      	cmp	r3, #0
    e698:	f340 8091 	ble.w	e7be <drawFastVLineInternal+0x19a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
    e69c:	88bb      	ldrh	r3, [r7, #4]
    e69e:	b2de      	uxtb	r6, r3
  register uint8_t h = __h;
    e6a0:	887b      	ldrh	r3, [r7, #2]
    e6a2:	b2dd      	uxtb	r5, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = framebuffer + 1;
    e6a4:	4c4c      	ldr	r4, [pc, #304]	; (e7d8 <drawFastVLineInternal+0x1b4>)
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
    e6a6:	08f3      	lsrs	r3, r6, #3
    e6a8:	b2db      	uxtb	r3, r3
    e6aa:	01db      	lsls	r3, r3, #7
    e6ac:	441c      	add	r4, r3
  // and offset x columns in
  pBuf += x;
    e6ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    e6b2:	441c      	add	r4, r3

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
    e6b4:	f006 0307 	and.w	r3, r6, #7
    e6b8:	b2de      	uxtb	r6, r3
  if(mod) {
    e6ba:	2e00      	cmp	r6, #0
    e6bc:	d039      	beq.n	e732 <drawFastVLineInternal+0x10e>
    // mask off the high n bits we want to set
    mod = 8-mod;
    e6be:	f1c6 0308 	rsb	r3, r6, #8
    e6c2:	b2de      	uxtb	r6, r3

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
    e6c4:	4632      	mov	r2, r6
    e6c6:	4b45      	ldr	r3, [pc, #276]	; (e7dc <drawFastVLineInternal+0x1b8>)
    e6c8:	f813 8002 	ldrb.w	r8, [r3, r2]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
    e6cc:	42b5      	cmp	r5, r6
    e6ce:	d20c      	bcs.n	e6ea <drawFastVLineInternal+0xc6>
      mask &= (0XFF >> (mod-h));
    e6d0:	4632      	mov	r2, r6
    e6d2:	462b      	mov	r3, r5
    e6d4:	1ad3      	subs	r3, r2, r3
    e6d6:	22ff      	movs	r2, #255	; 0xff
    e6d8:	fa42 f303 	asr.w	r3, r2, r3
    e6dc:	b25a      	sxtb	r2, r3
    e6de:	fa4f f388 	sxtb.w	r3, r8
    e6e2:	4013      	ands	r3, r2
    e6e4:	b25b      	sxtb	r3, r3
    e6e6:	fa5f f883 	uxtb.w	r8, r3
    }

  switch (color)
    e6ea:	883b      	ldrh	r3, [r7, #0]
    e6ec:	2b01      	cmp	r3, #1
    e6ee:	d004      	beq.n	e6fa <drawFastVLineInternal+0xd6>
    e6f0:	2b02      	cmp	r3, #2
    e6f2:	d013      	beq.n	e71c <drawFastVLineInternal+0xf8>
    e6f4:	2b00      	cmp	r3, #0
    e6f6:	d006      	beq.n	e706 <drawFastVLineInternal+0xe2>
    e6f8:	e016      	b.n	e728 <drawFastVLineInternal+0x104>
    {
    case WHITE:   *pBuf |=  mask;  break;
    e6fa:	7823      	ldrb	r3, [r4, #0]
    e6fc:	ea48 0303 	orr.w	r3, r8, r3
    e700:	b2db      	uxtb	r3, r3
    e702:	7023      	strb	r3, [r4, #0]
    e704:	e010      	b.n	e728 <drawFastVLineInternal+0x104>
    case BLACK:   *pBuf &= ~mask;  break;
    e706:	7823      	ldrb	r3, [r4, #0]
    e708:	b25a      	sxtb	r2, r3
    e70a:	fa4f f388 	sxtb.w	r3, r8
    e70e:	43db      	mvns	r3, r3
    e710:	b25b      	sxtb	r3, r3
    e712:	4013      	ands	r3, r2
    e714:	b25b      	sxtb	r3, r3
    e716:	b2db      	uxtb	r3, r3
    e718:	7023      	strb	r3, [r4, #0]
    e71a:	e005      	b.n	e728 <drawFastVLineInternal+0x104>
    case INVERSE: *pBuf ^=  mask;  break;
    e71c:	7823      	ldrb	r3, [r4, #0]
    e71e:	ea88 0303 	eor.w	r3, r8, r3
    e722:	b2db      	uxtb	r3, r3
    e724:	7023      	strb	r3, [r4, #0]
    e726:	bf00      	nop
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
    e728:	42b5      	cmp	r5, r6
    e72a:	d34a      	bcc.n	e7c2 <drawFastVLineInternal+0x19e>

    h -= mod;
    e72c:	1bab      	subs	r3, r5, r6
    e72e:	b2dd      	uxtb	r5, r3

    pBuf += SSD1306_LCDWIDTH;
    e730:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
    e732:	2d07      	cmp	r5, #7
    e734:	d91c      	bls.n	e770 <drawFastVLineInternal+0x14c>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
    e736:	883b      	ldrh	r3, [r7, #0]
    e738:	2b02      	cmp	r3, #2
    e73a:	d10a      	bne.n	e752 <drawFastVLineInternal+0x12e>
      do  {
      *pBuf=~(*pBuf);
    e73c:	7823      	ldrb	r3, [r4, #0]
    e73e:	43db      	mvns	r3, r3
    e740:	b2db      	uxtb	r3, r3
    e742:	7023      	strb	r3, [r4, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
    e744:	3480      	adds	r4, #128	; 0x80

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
    e746:	f1a5 0308 	sub.w	r3, r5, #8
    e74a:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
    e74c:	2d07      	cmp	r5, #7
    e74e:	d8f5      	bhi.n	e73c <drawFastVLineInternal+0x118>
    e750:	e00e      	b.n	e770 <drawFastVLineInternal+0x14c>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
    e752:	883b      	ldrh	r3, [r7, #0]
    e754:	2b01      	cmp	r3, #1
    e756:	d101      	bne.n	e75c <drawFastVLineInternal+0x138>
    e758:	23ff      	movs	r3, #255	; 0xff
    e75a:	e000      	b.n	e75e <drawFastVLineInternal+0x13a>
    e75c:	2300      	movs	r3, #0
    e75e:	461e      	mov	r6, r3

      do  {
        // write our value in
      *pBuf = val;
    e760:	4633      	mov	r3, r6
    e762:	7023      	strb	r3, [r4, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
    e764:	3480      	adds	r4, #128	; 0x80

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
    e766:	f1a5 0308 	sub.w	r3, r5, #8
    e76a:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
    e76c:	2d07      	cmp	r5, #7
    e76e:	d8f7      	bhi.n	e760 <drawFastVLineInternal+0x13c>
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
    e770:	2d00      	cmp	r5, #0
    e772:	d027      	beq.n	e7c4 <drawFastVLineInternal+0x1a0>
    mod = h & 7;
    e774:	f005 0307 	and.w	r3, r5, #7
    e778:	b2de      	uxtb	r6, r3
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
    e77a:	4632      	mov	r2, r6
    e77c:	4b18      	ldr	r3, [pc, #96]	; (e7e0 <drawFastVLineInternal+0x1bc>)
    e77e:	5c9d      	ldrb	r5, [r3, r2]
    switch (color)
    e780:	883b      	ldrh	r3, [r7, #0]
    e782:	2b01      	cmp	r3, #1
    e784:	d004      	beq.n	e790 <drawFastVLineInternal+0x16c>
    e786:	2b02      	cmp	r3, #2
    e788:	d011      	beq.n	e7ae <drawFastVLineInternal+0x18a>
    e78a:	2b00      	cmp	r3, #0
    e78c:	d005      	beq.n	e79a <drawFastVLineInternal+0x176>
    e78e:	e019      	b.n	e7c4 <drawFastVLineInternal+0x1a0>
    {
      case WHITE:   *pBuf |=  mask;  break;
    e790:	7823      	ldrb	r3, [r4, #0]
    e792:	432b      	orrs	r3, r5
    e794:	b2db      	uxtb	r3, r3
    e796:	7023      	strb	r3, [r4, #0]
    e798:	e014      	b.n	e7c4 <drawFastVLineInternal+0x1a0>
      case BLACK:   *pBuf &= ~mask;  break;
    e79a:	7823      	ldrb	r3, [r4, #0]
    e79c:	b25a      	sxtb	r2, r3
    e79e:	b26b      	sxtb	r3, r5
    e7a0:	43db      	mvns	r3, r3
    e7a2:	b25b      	sxtb	r3, r3
    e7a4:	4013      	ands	r3, r2
    e7a6:	b25b      	sxtb	r3, r3
    e7a8:	b2db      	uxtb	r3, r3
    e7aa:	7023      	strb	r3, [r4, #0]
    e7ac:	e00a      	b.n	e7c4 <drawFastVLineInternal+0x1a0>
      case INVERSE: *pBuf ^=  mask;  break;
    e7ae:	7823      	ldrb	r3, [r4, #0]
    e7b0:	406b      	eors	r3, r5
    e7b2:	b2db      	uxtb	r3, r3
    e7b4:	7023      	strb	r3, [r4, #0]
    e7b6:	bf00      	nop
    e7b8:	e004      	b.n	e7c4 <drawFastVLineInternal+0x1a0>
  if(x < 0 || x >= WIDTH) { return; }
    e7ba:	bf00      	nop
    e7bc:	e002      	b.n	e7c4 <drawFastVLineInternal+0x1a0>
    return;
    e7be:	bf00      	nop
    e7c0:	e000      	b.n	e7c4 <drawFastVLineInternal+0x1a0>
    if(h<mod) { return; }
    e7c2:	bf00      	nop
    }
  }
}
    e7c4:	370c      	adds	r7, #12
    e7c6:	46bd      	mov	sp, r7
    e7c8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    e7cc:	4770      	bx	lr
    e7ce:	bf00      	nop
    e7d0:	000252d4 	.word	0x000252d4
    e7d4:	000252d8 	.word	0x000252d8
    e7d8:	000252dd 	.word	0x000252dd
    e7dc:	000256e0 	.word	0x000256e0
    e7e0:	000256e8 	.word	0x000256e8

0000e7e4 <getWidth>:

int getWidth(void)
{
    e7e4:	b480      	push	{r7}
    e7e6:	af00      	add	r7, sp, #0
	return WIDTH;
    e7e8:	4b02      	ldr	r3, [pc, #8]	; (e7f4 <getWidth+0x10>)
    e7ea:	681b      	ldr	r3, [r3, #0]
}
    e7ec:	4618      	mov	r0, r3
    e7ee:	46bd      	mov	sp, r7
    e7f0:	bc80      	pop	{r7}
    e7f2:	4770      	bx	lr
    e7f4:	000252d4 	.word	0x000252d4

0000e7f8 <getHeight>:

int getHeight(void)
{
    e7f8:	b480      	push	{r7}
    e7fa:	af00      	add	r7, sp, #0
	return HEIGHT;
    e7fc:	4b02      	ldr	r3, [pc, #8]	; (e808 <getHeight+0x10>)
    e7fe:	681b      	ldr	r3, [r3, #0]
}
    e800:	4618      	mov	r0, r3
    e802:	46bd      	mov	sp, r7
    e804:	bc80      	pop	{r7}
    e806:	4770      	bx	lr
    e808:	000252d8 	.word	0x000252d8

0000e80c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
    e80c:	b480      	push	{r7}
    e80e:	b085      	sub	sp, #20
    e810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
    e812:	4b15      	ldr	r3, [pc, #84]	; (e868 <HAL_MspInit+0x5c>)
    e814:	699b      	ldr	r3, [r3, #24]
    e816:	4a14      	ldr	r2, [pc, #80]	; (e868 <HAL_MspInit+0x5c>)
    e818:	f043 0301 	orr.w	r3, r3, #1
    e81c:	6193      	str	r3, [r2, #24]
    e81e:	4b12      	ldr	r3, [pc, #72]	; (e868 <HAL_MspInit+0x5c>)
    e820:	699b      	ldr	r3, [r3, #24]
    e822:	f003 0301 	and.w	r3, r3, #1
    e826:	60bb      	str	r3, [r7, #8]
    e828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
    e82a:	4b0f      	ldr	r3, [pc, #60]	; (e868 <HAL_MspInit+0x5c>)
    e82c:	69db      	ldr	r3, [r3, #28]
    e82e:	4a0e      	ldr	r2, [pc, #56]	; (e868 <HAL_MspInit+0x5c>)
    e830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e834:	61d3      	str	r3, [r2, #28]
    e836:	4b0c      	ldr	r3, [pc, #48]	; (e868 <HAL_MspInit+0x5c>)
    e838:	69db      	ldr	r3, [r3, #28]
    e83a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    e83e:	607b      	str	r3, [r7, #4]
    e840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
    e842:	4b0a      	ldr	r3, [pc, #40]	; (e86c <HAL_MspInit+0x60>)
    e844:	685b      	ldr	r3, [r3, #4]
    e846:	60fb      	str	r3, [r7, #12]
    e848:	68fb      	ldr	r3, [r7, #12]
    e84a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    e84e:	60fb      	str	r3, [r7, #12]
    e850:	68fb      	ldr	r3, [r7, #12]
    e852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    e856:	60fb      	str	r3, [r7, #12]
    e858:	4a04      	ldr	r2, [pc, #16]	; (e86c <HAL_MspInit+0x60>)
    e85a:	68fb      	ldr	r3, [r7, #12]
    e85c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
    e85e:	bf00      	nop
    e860:	3714      	adds	r7, #20
    e862:	46bd      	mov	sp, r7
    e864:	bc80      	pop	{r7}
    e866:	4770      	bx	lr
    e868:	40021000 	.word	0x40021000
    e86c:	40010000 	.word	0x40010000

0000e870 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
    e870:	b580      	push	{r7, lr}
    e872:	b082      	sub	sp, #8
    e874:	af00      	add	r7, sp, #0
    e876:	6078      	str	r0, [r7, #4]
    e878:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
    e87a:	f000 fc3f 	bl	f0fc <__errno>
    e87e:	4602      	mov	r2, r0
    e880:	2316      	movs	r3, #22
    e882:	6013      	str	r3, [r2, #0]
	return -1;
    e884:	f04f 33ff 	mov.w	r3, #4294967295
}
    e888:	4618      	mov	r0, r3
    e88a:	3708      	adds	r7, #8
    e88c:	46bd      	mov	sp, r7
    e88e:	bd80      	pop	{r7, pc}

0000e890 <_exit>:

void _exit (int status)
{
    e890:	b580      	push	{r7, lr}
    e892:	b082      	sub	sp, #8
    e894:	af00      	add	r7, sp, #0
    e896:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
    e898:	f04f 31ff 	mov.w	r1, #4294967295
    e89c:	6878      	ldr	r0, [r7, #4]
    e89e:	f7ff ffe7 	bl	e870 <_kill>
	while (1) {}		/* Make sure we hang here */
    e8a2:	e7fe      	b.n	e8a2 <_exit+0x12>

0000e8a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
    e8a4:	b580      	push	{r7, lr}
    e8a6:	b086      	sub	sp, #24
    e8a8:	af00      	add	r7, sp, #0
    e8aa:	60f8      	str	r0, [r7, #12]
    e8ac:	60b9      	str	r1, [r7, #8]
    e8ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
    e8b0:	2300      	movs	r3, #0
    e8b2:	617b      	str	r3, [r7, #20]
    e8b4:	e00a      	b.n	e8cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
    e8b6:	f3af 8000 	nop.w
    e8ba:	4601      	mov	r1, r0
    e8bc:	68bb      	ldr	r3, [r7, #8]
    e8be:	1c5a      	adds	r2, r3, #1
    e8c0:	60ba      	str	r2, [r7, #8]
    e8c2:	b2ca      	uxtb	r2, r1
    e8c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
    e8c6:	697b      	ldr	r3, [r7, #20]
    e8c8:	3301      	adds	r3, #1
    e8ca:	617b      	str	r3, [r7, #20]
    e8cc:	697a      	ldr	r2, [r7, #20]
    e8ce:	687b      	ldr	r3, [r7, #4]
    e8d0:	429a      	cmp	r2, r3
    e8d2:	dbf0      	blt.n	e8b6 <_read+0x12>
	}

return len;
    e8d4:	687b      	ldr	r3, [r7, #4]
}
    e8d6:	4618      	mov	r0, r3
    e8d8:	3718      	adds	r7, #24
    e8da:	46bd      	mov	sp, r7
    e8dc:	bd80      	pop	{r7, pc}

0000e8de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
    e8de:	b580      	push	{r7, lr}
    e8e0:	b086      	sub	sp, #24
    e8e2:	af00      	add	r7, sp, #0
    e8e4:	60f8      	str	r0, [r7, #12]
    e8e6:	60b9      	str	r1, [r7, #8]
    e8e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
    e8ea:	2300      	movs	r3, #0
    e8ec:	617b      	str	r3, [r7, #20]
    e8ee:	e009      	b.n	e904 <_write+0x26>
	{
		__io_putchar(*ptr++);
    e8f0:	68bb      	ldr	r3, [r7, #8]
    e8f2:	1c5a      	adds	r2, r3, #1
    e8f4:	60ba      	str	r2, [r7, #8]
    e8f6:	781b      	ldrb	r3, [r3, #0]
    e8f8:	4618      	mov	r0, r3
    e8fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
    e8fe:	697b      	ldr	r3, [r7, #20]
    e900:	3301      	adds	r3, #1
    e902:	617b      	str	r3, [r7, #20]
    e904:	697a      	ldr	r2, [r7, #20]
    e906:	687b      	ldr	r3, [r7, #4]
    e908:	429a      	cmp	r2, r3
    e90a:	dbf1      	blt.n	e8f0 <_write+0x12>
	}
	return len;
    e90c:	687b      	ldr	r3, [r7, #4]
}
    e90e:	4618      	mov	r0, r3
    e910:	3718      	adds	r7, #24
    e912:	46bd      	mov	sp, r7
    e914:	bd80      	pop	{r7, pc}

0000e916 <_close>:

int _close(int file)
{
    e916:	b480      	push	{r7}
    e918:	b083      	sub	sp, #12
    e91a:	af00      	add	r7, sp, #0
    e91c:	6078      	str	r0, [r7, #4]
	return -1;
    e91e:	f04f 33ff 	mov.w	r3, #4294967295
}
    e922:	4618      	mov	r0, r3
    e924:	370c      	adds	r7, #12
    e926:	46bd      	mov	sp, r7
    e928:	bc80      	pop	{r7}
    e92a:	4770      	bx	lr

0000e92c <_fstat>:


int _fstat(int file, struct stat *st)
{
    e92c:	b480      	push	{r7}
    e92e:	b083      	sub	sp, #12
    e930:	af00      	add	r7, sp, #0
    e932:	6078      	str	r0, [r7, #4]
    e934:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    e936:	683b      	ldr	r3, [r7, #0]
    e938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    e93c:	605a      	str	r2, [r3, #4]
	return 0;
    e93e:	2300      	movs	r3, #0
}
    e940:	4618      	mov	r0, r3
    e942:	370c      	adds	r7, #12
    e944:	46bd      	mov	sp, r7
    e946:	bc80      	pop	{r7}
    e948:	4770      	bx	lr

0000e94a <_isatty>:

int _isatty(int file)
{
    e94a:	b480      	push	{r7}
    e94c:	b083      	sub	sp, #12
    e94e:	af00      	add	r7, sp, #0
    e950:	6078      	str	r0, [r7, #4]
	return 1;
    e952:	2301      	movs	r3, #1
}
    e954:	4618      	mov	r0, r3
    e956:	370c      	adds	r7, #12
    e958:	46bd      	mov	sp, r7
    e95a:	bc80      	pop	{r7}
    e95c:	4770      	bx	lr

0000e95e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
    e95e:	b480      	push	{r7}
    e960:	b085      	sub	sp, #20
    e962:	af00      	add	r7, sp, #0
    e964:	60f8      	str	r0, [r7, #12]
    e966:	60b9      	str	r1, [r7, #8]
    e968:	607a      	str	r2, [r7, #4]
	return 0;
    e96a:	2300      	movs	r3, #0
}
    e96c:	4618      	mov	r0, r3
    e96e:	3714      	adds	r7, #20
    e970:	46bd      	mov	sp, r7
    e972:	bc80      	pop	{r7}
    e974:	4770      	bx	lr
	...

0000e978 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
    e978:	b580      	push	{r7, lr}
    e97a:	b084      	sub	sp, #16
    e97c:	af00      	add	r7, sp, #0
    e97e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
    e980:	4b11      	ldr	r3, [pc, #68]	; (e9c8 <_sbrk+0x50>)
    e982:	681b      	ldr	r3, [r3, #0]
    e984:	2b00      	cmp	r3, #0
    e986:	d102      	bne.n	e98e <_sbrk+0x16>
		heap_end = &end;
    e988:	4b0f      	ldr	r3, [pc, #60]	; (e9c8 <_sbrk+0x50>)
    e98a:	4a10      	ldr	r2, [pc, #64]	; (e9cc <_sbrk+0x54>)
    e98c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
    e98e:	4b0e      	ldr	r3, [pc, #56]	; (e9c8 <_sbrk+0x50>)
    e990:	681b      	ldr	r3, [r3, #0]
    e992:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
    e994:	4b0c      	ldr	r3, [pc, #48]	; (e9c8 <_sbrk+0x50>)
    e996:	681a      	ldr	r2, [r3, #0]
    e998:	687b      	ldr	r3, [r7, #4]
    e99a:	4413      	add	r3, r2
    e99c:	466a      	mov	r2, sp
    e99e:	4293      	cmp	r3, r2
    e9a0:	d907      	bls.n	e9b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
    e9a2:	f000 fbab 	bl	f0fc <__errno>
    e9a6:	4602      	mov	r2, r0
    e9a8:	230c      	movs	r3, #12
    e9aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
    e9ac:	f04f 33ff 	mov.w	r3, #4294967295
    e9b0:	e006      	b.n	e9c0 <_sbrk+0x48>
	}

	heap_end += incr;
    e9b2:	4b05      	ldr	r3, [pc, #20]	; (e9c8 <_sbrk+0x50>)
    e9b4:	681a      	ldr	r2, [r3, #0]
    e9b6:	687b      	ldr	r3, [r7, #4]
    e9b8:	4413      	add	r3, r2
    e9ba:	4a03      	ldr	r2, [pc, #12]	; (e9c8 <_sbrk+0x50>)
    e9bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
    e9be:	68fb      	ldr	r3, [r7, #12]
}
    e9c0:	4618      	mov	r0, r3
    e9c2:	3710      	adds	r7, #16
    e9c4:	46bd      	mov	sp, r7
    e9c6:	bd80      	pop	{r7, pc}
    e9c8:	00025944 	.word	0x00025944
    e9cc:	000263d8 	.word	0x000263d8

0000e9d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
    e9d0:	b580      	push	{r7, lr}
    e9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
    e9d4:	2200      	movs	r2, #0
    e9d6:	4912      	ldr	r1, [pc, #72]	; (ea20 <MX_USB_DEVICE_Init+0x50>)
    e9d8:	4812      	ldr	r0, [pc, #72]	; (ea24 <MX_USB_DEVICE_Init+0x54>)
    e9da:	f7fe f8a9 	bl	cb30 <USBD_Init>
    e9de:	4603      	mov	r3, r0
    e9e0:	2b00      	cmp	r3, #0
    e9e2:	d001      	beq.n	e9e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
    e9e4:	f7ff fa51 	bl	de8a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
    e9e8:	490f      	ldr	r1, [pc, #60]	; (ea28 <MX_USB_DEVICE_Init+0x58>)
    e9ea:	480e      	ldr	r0, [pc, #56]	; (ea24 <MX_USB_DEVICE_Init+0x54>)
    e9ec:	f7fe f8d8 	bl	cba0 <USBD_RegisterClass>
    e9f0:	4603      	mov	r3, r0
    e9f2:	2b00      	cmp	r3, #0
    e9f4:	d001      	beq.n	e9fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
    e9f6:	f7ff fa48 	bl	de8a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
    e9fa:	490c      	ldr	r1, [pc, #48]	; (ea2c <MX_USB_DEVICE_Init+0x5c>)
    e9fc:	4809      	ldr	r0, [pc, #36]	; (ea24 <MX_USB_DEVICE_Init+0x54>)
    e9fe:	f7fd fffb 	bl	c9f8 <USBD_CDC_RegisterInterface>
    ea02:	4603      	mov	r3, r0
    ea04:	2b00      	cmp	r3, #0
    ea06:	d001      	beq.n	ea0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
    ea08:	f7ff fa3f 	bl	de8a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
    ea0c:	4805      	ldr	r0, [pc, #20]	; (ea24 <MX_USB_DEVICE_Init+0x54>)
    ea0e:	f7fe f8ed 	bl	cbec <USBD_Start>
    ea12:	4603      	mov	r3, r0
    ea14:	2b00      	cmp	r3, #0
    ea16:	d001      	beq.n	ea1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
    ea18:	f7ff fa37 	bl	de8a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
    ea1c:	bf00      	nop
    ea1e:	bd80      	pop	{r7, pc}
    ea20:	00025704 	.word	0x00025704
    ea24:	00025c9c 	.word	0x00025c9c
    ea28:	000251c8 	.word	0x000251c8
    ea2c:	000256f4 	.word	0x000256f4

0000ea30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
    ea30:	b580      	push	{r7, lr}
    ea32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
    ea34:	2200      	movs	r2, #0
    ea36:	4905      	ldr	r1, [pc, #20]	; (ea4c <CDC_Init_FS+0x1c>)
    ea38:	4805      	ldr	r0, [pc, #20]	; (ea50 <CDC_Init_FS+0x20>)
    ea3a:	f7fd fff3 	bl	ca24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
    ea3e:	4905      	ldr	r1, [pc, #20]	; (ea54 <CDC_Init_FS+0x24>)
    ea40:	4803      	ldr	r0, [pc, #12]	; (ea50 <CDC_Init_FS+0x20>)
    ea42:	f7fe f808 	bl	ca56 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
    ea46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
    ea48:	4618      	mov	r0, r3
    ea4a:	bd80      	pop	{r7, pc}
    ea4c:	00025f64 	.word	0x00025f64
    ea50:	00025c9c 	.word	0x00025c9c
    ea54:	00025f60 	.word	0x00025f60

0000ea58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
    ea58:	b480      	push	{r7}
    ea5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
    ea5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
    ea5e:	4618      	mov	r0, r3
    ea60:	46bd      	mov	sp, r7
    ea62:	bc80      	pop	{r7}
    ea64:	4770      	bx	lr
	...

0000ea68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
    ea68:	b480      	push	{r7}
    ea6a:	b083      	sub	sp, #12
    ea6c:	af00      	add	r7, sp, #0
    ea6e:	4603      	mov	r3, r0
    ea70:	6039      	str	r1, [r7, #0]
    ea72:	71fb      	strb	r3, [r7, #7]
    ea74:	4613      	mov	r3, r2
    ea76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
    ea78:	79fb      	ldrb	r3, [r7, #7]
    ea7a:	2b23      	cmp	r3, #35	; 0x23
    ea7c:	d84a      	bhi.n	eb14 <CDC_Control_FS+0xac>
    ea7e:	a201      	add	r2, pc, #4	; (adr r2, ea84 <CDC_Control_FS+0x1c>)
    ea80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ea84:	0000eb15 	.word	0x0000eb15
    ea88:	0000eb15 	.word	0x0000eb15
    ea8c:	0000eb15 	.word	0x0000eb15
    ea90:	0000eb15 	.word	0x0000eb15
    ea94:	0000eb15 	.word	0x0000eb15
    ea98:	0000eb15 	.word	0x0000eb15
    ea9c:	0000eb15 	.word	0x0000eb15
    eaa0:	0000eb15 	.word	0x0000eb15
    eaa4:	0000eb15 	.word	0x0000eb15
    eaa8:	0000eb15 	.word	0x0000eb15
    eaac:	0000eb15 	.word	0x0000eb15
    eab0:	0000eb15 	.word	0x0000eb15
    eab4:	0000eb15 	.word	0x0000eb15
    eab8:	0000eb15 	.word	0x0000eb15
    eabc:	0000eb15 	.word	0x0000eb15
    eac0:	0000eb15 	.word	0x0000eb15
    eac4:	0000eb15 	.word	0x0000eb15
    eac8:	0000eb15 	.word	0x0000eb15
    eacc:	0000eb15 	.word	0x0000eb15
    ead0:	0000eb15 	.word	0x0000eb15
    ead4:	0000eb15 	.word	0x0000eb15
    ead8:	0000eb15 	.word	0x0000eb15
    eadc:	0000eb15 	.word	0x0000eb15
    eae0:	0000eb15 	.word	0x0000eb15
    eae4:	0000eb15 	.word	0x0000eb15
    eae8:	0000eb15 	.word	0x0000eb15
    eaec:	0000eb15 	.word	0x0000eb15
    eaf0:	0000eb15 	.word	0x0000eb15
    eaf4:	0000eb15 	.word	0x0000eb15
    eaf8:	0000eb15 	.word	0x0000eb15
    eafc:	0000eb15 	.word	0x0000eb15
    eb00:	0000eb15 	.word	0x0000eb15
    eb04:	0000eb15 	.word	0x0000eb15
    eb08:	0000eb15 	.word	0x0000eb15
    eb0c:	0000eb15 	.word	0x0000eb15
    eb10:	0000eb15 	.word	0x0000eb15
  case CDC_SEND_BREAK:
 
    break;    
    
  default:
    break;
    eb14:	bf00      	nop
  }

  return (USBD_OK);
    eb16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
    eb18:	4618      	mov	r0, r3
    eb1a:	370c      	adds	r7, #12
    eb1c:	46bd      	mov	sp, r7
    eb1e:	bc80      	pop	{r7}
    eb20:	4770      	bx	lr
    eb22:	bf00      	nop

0000eb24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
    eb24:	b580      	push	{r7, lr}
    eb26:	b082      	sub	sp, #8
    eb28:	af00      	add	r7, sp, #0
    eb2a:	6078      	str	r0, [r7, #4]
    eb2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
    eb2e:	6879      	ldr	r1, [r7, #4]
    eb30:	4805      	ldr	r0, [pc, #20]	; (eb48 <CDC_Receive_FS+0x24>)
    eb32:	f7fd ff90 	bl	ca56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
    eb36:	4804      	ldr	r0, [pc, #16]	; (eb48 <CDC_Receive_FS+0x24>)
    eb38:	f7fd ffcf 	bl	cada <USBD_CDC_ReceivePacket>
  return (USBD_OK);
    eb3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
    eb3e:	4618      	mov	r0, r3
    eb40:	3708      	adds	r7, #8
    eb42:	46bd      	mov	sp, r7
    eb44:	bd80      	pop	{r7, pc}
    eb46:	bf00      	nop
    eb48:	00025c9c 	.word	0x00025c9c

0000eb4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
    eb4c:	b580      	push	{r7, lr}
    eb4e:	b084      	sub	sp, #16
    eb50:	af00      	add	r7, sp, #0
    eb52:	6078      	str	r0, [r7, #4]
    eb54:	460b      	mov	r3, r1
    eb56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
    eb58:	2300      	movs	r3, #0
    eb5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
    eb5c:	4b0d      	ldr	r3, [pc, #52]	; (eb94 <CDC_Transmit_FS+0x48>)
    eb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
    eb62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
    eb64:	68bb      	ldr	r3, [r7, #8]
    eb66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
    eb6a:	2b00      	cmp	r3, #0
    eb6c:	d001      	beq.n	eb72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
    eb6e:	2301      	movs	r3, #1
    eb70:	e00b      	b.n	eb8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
    eb72:	887b      	ldrh	r3, [r7, #2]
    eb74:	461a      	mov	r2, r3
    eb76:	6879      	ldr	r1, [r7, #4]
    eb78:	4806      	ldr	r0, [pc, #24]	; (eb94 <CDC_Transmit_FS+0x48>)
    eb7a:	f7fd ff53 	bl	ca24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
    eb7e:	4805      	ldr	r0, [pc, #20]	; (eb94 <CDC_Transmit_FS+0x48>)
    eb80:	f7fd ff7c 	bl	ca7c <USBD_CDC_TransmitPacket>
    eb84:	4603      	mov	r3, r0
    eb86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
    eb88:	7bfb      	ldrb	r3, [r7, #15]
}
    eb8a:	4618      	mov	r0, r3
    eb8c:	3710      	adds	r7, #16
    eb8e:	46bd      	mov	sp, r7
    eb90:	bd80      	pop	{r7, pc}
    eb92:	bf00      	nop
    eb94:	00025c9c 	.word	0x00025c9c

0000eb98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
    eb98:	b580      	push	{r7, lr}
    eb9a:	b084      	sub	sp, #16
    eb9c:	af00      	add	r7, sp, #0
    eb9e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
    eba0:	687b      	ldr	r3, [r7, #4]
    eba2:	681b      	ldr	r3, [r3, #0]
    eba4:	4a0d      	ldr	r2, [pc, #52]	; (ebdc <HAL_PCD_MspInit+0x44>)
    eba6:	4293      	cmp	r3, r2
    eba8:	d113      	bne.n	ebd2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
    ebaa:	4b0d      	ldr	r3, [pc, #52]	; (ebe0 <HAL_PCD_MspInit+0x48>)
    ebac:	69db      	ldr	r3, [r3, #28]
    ebae:	4a0c      	ldr	r2, [pc, #48]	; (ebe0 <HAL_PCD_MspInit+0x48>)
    ebb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    ebb4:	61d3      	str	r3, [r2, #28]
    ebb6:	4b0a      	ldr	r3, [pc, #40]	; (ebe0 <HAL_PCD_MspInit+0x48>)
    ebb8:	69db      	ldr	r3, [r3, #28]
    ebba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    ebbe:	60fb      	str	r3, [r7, #12]
    ebc0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
    ebc2:	2200      	movs	r2, #0
    ebc4:	2100      	movs	r1, #0
    ebc6:	2014      	movs	r0, #20
    ebc8:	f7fa f80b 	bl	8be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
    ebcc:	2014      	movs	r0, #20
    ebce:	f7fa f824 	bl	8c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
    ebd2:	bf00      	nop
    ebd4:	3710      	adds	r7, #16
    ebd6:	46bd      	mov	sp, r7
    ebd8:	bd80      	pop	{r7, pc}
    ebda:	bf00      	nop
    ebdc:	40005c00 	.word	0x40005c00
    ebe0:	40021000 	.word	0x40021000

0000ebe4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
    ebe4:	b580      	push	{r7, lr}
    ebe6:	b082      	sub	sp, #8
    ebe8:	af00      	add	r7, sp, #0
    ebea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
    ebec:	4a28      	ldr	r2, [pc, #160]	; (ec90 <USBD_LL_Init+0xac>)
    ebee:	687b      	ldr	r3, [r7, #4]
    ebf0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
    ebf4:	687b      	ldr	r3, [r7, #4]
    ebf6:	4a26      	ldr	r2, [pc, #152]	; (ec90 <USBD_LL_Init+0xac>)
    ebf8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
    ebfc:	4b24      	ldr	r3, [pc, #144]	; (ec90 <USBD_LL_Init+0xac>)
    ebfe:	4a25      	ldr	r2, [pc, #148]	; (ec94 <USBD_LL_Init+0xb0>)
    ec00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
    ec02:	4b23      	ldr	r3, [pc, #140]	; (ec90 <USBD_LL_Init+0xac>)
    ec04:	2208      	movs	r2, #8
    ec06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
    ec08:	4b21      	ldr	r3, [pc, #132]	; (ec90 <USBD_LL_Init+0xac>)
    ec0a:	2202      	movs	r2, #2
    ec0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
    ec0e:	4b20      	ldr	r3, [pc, #128]	; (ec90 <USBD_LL_Init+0xac>)
    ec10:	2200      	movs	r2, #0
    ec12:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
    ec14:	4b1e      	ldr	r3, [pc, #120]	; (ec90 <USBD_LL_Init+0xac>)
    ec16:	2200      	movs	r2, #0
    ec18:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
    ec1a:	4b1d      	ldr	r3, [pc, #116]	; (ec90 <USBD_LL_Init+0xac>)
    ec1c:	2200      	movs	r2, #0
    ec1e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
    ec20:	481b      	ldr	r0, [pc, #108]	; (ec90 <USBD_LL_Init+0xac>)
    ec22:	f7fa fe3d 	bl	98a0 <HAL_PCD_Init>
    ec26:	4603      	mov	r3, r0
    ec28:	2b00      	cmp	r3, #0
    ec2a:	d001      	beq.n	ec30 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
    ec2c:	f7ff f92d 	bl	de8a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
    ec30:	687b      	ldr	r3, [r7, #4]
    ec32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
    ec36:	2318      	movs	r3, #24
    ec38:	2200      	movs	r2, #0
    ec3a:	2100      	movs	r1, #0
    ec3c:	f7fb f8ba 	bl	9db4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
    ec40:	687b      	ldr	r3, [r7, #4]
    ec42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
    ec46:	2358      	movs	r3, #88	; 0x58
    ec48:	2200      	movs	r2, #0
    ec4a:	2180      	movs	r1, #128	; 0x80
    ec4c:	f7fb f8b2 	bl	9db4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
    ec50:	687b      	ldr	r3, [r7, #4]
    ec52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
    ec56:	23c0      	movs	r3, #192	; 0xc0
    ec58:	2200      	movs	r2, #0
    ec5a:	2181      	movs	r1, #129	; 0x81
    ec5c:	f7fb f8aa 	bl	9db4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
    ec60:	687b      	ldr	r3, [r7, #4]
    ec62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
    ec66:	f44f 7388 	mov.w	r3, #272	; 0x110
    ec6a:	2200      	movs	r2, #0
    ec6c:	2101      	movs	r1, #1
    ec6e:	f7fb f8a1 	bl	9db4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
    ec72:	687b      	ldr	r3, [r7, #4]
    ec74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
    ec78:	f44f 7380 	mov.w	r3, #256	; 0x100
    ec7c:	2200      	movs	r2, #0
    ec7e:	2182      	movs	r1, #130	; 0x82
    ec80:	f7fb f898 	bl	9db4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
    ec84:	2300      	movs	r3, #0
}
    ec86:	4618      	mov	r0, r3
    ec88:	3708      	adds	r7, #8
    ec8a:	46bd      	mov	sp, r7
    ec8c:	bd80      	pop	{r7, pc}
    ec8e:	bf00      	nop
    ec90:	00025f68 	.word	0x00025f68
    ec94:	40005c00 	.word	0x40005c00

0000ec98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
    ec98:	b580      	push	{r7, lr}
    ec9a:	b084      	sub	sp, #16
    ec9c:	af00      	add	r7, sp, #0
    ec9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
    eca0:	2300      	movs	r3, #0
    eca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
    eca4:	2300      	movs	r3, #0
    eca6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
    eca8:	687b      	ldr	r3, [r7, #4]
    ecaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    ecae:	4618      	mov	r0, r3
    ecb0:	f7fa fed7 	bl	9a62 <HAL_PCD_Start>
    ecb4:	4603      	mov	r3, r0
    ecb6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
    ecb8:	7bfb      	ldrb	r3, [r7, #15]
    ecba:	4618      	mov	r0, r3
    ecbc:	f000 f8e4 	bl	ee88 <USBD_Get_USB_Status>
    ecc0:	4603      	mov	r3, r0
    ecc2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
    ecc4:	7bbb      	ldrb	r3, [r7, #14]
}
    ecc6:	4618      	mov	r0, r3
    ecc8:	3710      	adds	r7, #16
    ecca:	46bd      	mov	sp, r7
    eccc:	bd80      	pop	{r7, pc}

0000ecce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
    ecce:	b580      	push	{r7, lr}
    ecd0:	b084      	sub	sp, #16
    ecd2:	af00      	add	r7, sp, #0
    ecd4:	6078      	str	r0, [r7, #4]
    ecd6:	4608      	mov	r0, r1
    ecd8:	4611      	mov	r1, r2
    ecda:	461a      	mov	r2, r3
    ecdc:	4603      	mov	r3, r0
    ecde:	70fb      	strb	r3, [r7, #3]
    ece0:	460b      	mov	r3, r1
    ece2:	70bb      	strb	r3, [r7, #2]
    ece4:	4613      	mov	r3, r2
    ece6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
    ece8:	2300      	movs	r3, #0
    ecea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
    ecec:	2300      	movs	r3, #0
    ecee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
    ecf0:	687b      	ldr	r3, [r7, #4]
    ecf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
    ecf6:	78bb      	ldrb	r3, [r7, #2]
    ecf8:	883a      	ldrh	r2, [r7, #0]
    ecfa:	78f9      	ldrb	r1, [r7, #3]
    ecfc:	f7fa fed7 	bl	9aae <HAL_PCD_EP_Open>
    ed00:	4603      	mov	r3, r0
    ed02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
    ed04:	7bfb      	ldrb	r3, [r7, #15]
    ed06:	4618      	mov	r0, r3
    ed08:	f000 f8be 	bl	ee88 <USBD_Get_USB_Status>
    ed0c:	4603      	mov	r3, r0
    ed0e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
    ed10:	7bbb      	ldrb	r3, [r7, #14]
}
    ed12:	4618      	mov	r0, r3
    ed14:	3710      	adds	r7, #16
    ed16:	46bd      	mov	sp, r7
    ed18:	bd80      	pop	{r7, pc}

0000ed1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
    ed1a:	b580      	push	{r7, lr}
    ed1c:	b084      	sub	sp, #16
    ed1e:	af00      	add	r7, sp, #0
    ed20:	6078      	str	r0, [r7, #4]
    ed22:	460b      	mov	r3, r1
    ed24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
    ed26:	2300      	movs	r3, #0
    ed28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
    ed2a:	2300      	movs	r3, #0
    ed2c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
    ed2e:	687b      	ldr	r3, [r7, #4]
    ed30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    ed34:	78fa      	ldrb	r2, [r7, #3]
    ed36:	4611      	mov	r1, r2
    ed38:	4618      	mov	r0, r3
    ed3a:	f7fa ff18 	bl	9b6e <HAL_PCD_EP_Close>
    ed3e:	4603      	mov	r3, r0
    ed40:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
    ed42:	7bfb      	ldrb	r3, [r7, #15]
    ed44:	4618      	mov	r0, r3
    ed46:	f000 f89f 	bl	ee88 <USBD_Get_USB_Status>
    ed4a:	4603      	mov	r3, r0
    ed4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
    ed4e:	7bbb      	ldrb	r3, [r7, #14]
}
    ed50:	4618      	mov	r0, r3
    ed52:	3710      	adds	r7, #16
    ed54:	46bd      	mov	sp, r7
    ed56:	bd80      	pop	{r7, pc}

0000ed58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
    ed58:	b580      	push	{r7, lr}
    ed5a:	b084      	sub	sp, #16
    ed5c:	af00      	add	r7, sp, #0
    ed5e:	6078      	str	r0, [r7, #4]
    ed60:	460b      	mov	r3, r1
    ed62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
    ed64:	2300      	movs	r3, #0
    ed66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
    ed68:	2300      	movs	r3, #0
    ed6a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
    ed6c:	687b      	ldr	r3, [r7, #4]
    ed6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    ed72:	78fa      	ldrb	r2, [r7, #3]
    ed74:	4611      	mov	r1, r2
    ed76:	4618      	mov	r0, r3
    ed78:	f7fa ffc2 	bl	9d00 <HAL_PCD_EP_SetStall>
    ed7c:	4603      	mov	r3, r0
    ed7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
    ed80:	7bfb      	ldrb	r3, [r7, #15]
    ed82:	4618      	mov	r0, r3
    ed84:	f000 f880 	bl	ee88 <USBD_Get_USB_Status>
    ed88:	4603      	mov	r3, r0
    ed8a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
    ed8c:	7bbb      	ldrb	r3, [r7, #14]
}
    ed8e:	4618      	mov	r0, r3
    ed90:	3710      	adds	r7, #16
    ed92:	46bd      	mov	sp, r7
    ed94:	bd80      	pop	{r7, pc}

0000ed96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
    ed96:	b580      	push	{r7, lr}
    ed98:	b086      	sub	sp, #24
    ed9a:	af00      	add	r7, sp, #0
    ed9c:	60f8      	str	r0, [r7, #12]
    ed9e:	607a      	str	r2, [r7, #4]
    eda0:	461a      	mov	r2, r3
    eda2:	460b      	mov	r3, r1
    eda4:	72fb      	strb	r3, [r7, #11]
    eda6:	4613      	mov	r3, r2
    eda8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
    edaa:	2300      	movs	r3, #0
    edac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
    edae:	2300      	movs	r3, #0
    edb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
    edb2:	68fb      	ldr	r3, [r7, #12]
    edb4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
    edb8:	893b      	ldrh	r3, [r7, #8]
    edba:	7af9      	ldrb	r1, [r7, #11]
    edbc:	687a      	ldr	r2, [r7, #4]
    edbe:	f7fa ff66 	bl	9c8e <HAL_PCD_EP_Transmit>
    edc2:	4603      	mov	r3, r0
    edc4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
    edc6:	7dfb      	ldrb	r3, [r7, #23]
    edc8:	4618      	mov	r0, r3
    edca:	f000 f85d 	bl	ee88 <USBD_Get_USB_Status>
    edce:	4603      	mov	r3, r0
    edd0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
    edd2:	7dbb      	ldrb	r3, [r7, #22]
}
    edd4:	4618      	mov	r0, r3
    edd6:	3718      	adds	r7, #24
    edd8:	46bd      	mov	sp, r7
    edda:	bd80      	pop	{r7, pc}

0000eddc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
    eddc:	b580      	push	{r7, lr}
    edde:	b086      	sub	sp, #24
    ede0:	af00      	add	r7, sp, #0
    ede2:	60f8      	str	r0, [r7, #12]
    ede4:	607a      	str	r2, [r7, #4]
    ede6:	461a      	mov	r2, r3
    ede8:	460b      	mov	r3, r1
    edea:	72fb      	strb	r3, [r7, #11]
    edec:	4613      	mov	r3, r2
    edee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
    edf0:	2300      	movs	r3, #0
    edf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
    edf4:	2300      	movs	r3, #0
    edf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
    edf8:	68fb      	ldr	r3, [r7, #12]
    edfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
    edfe:	893b      	ldrh	r3, [r7, #8]
    ee00:	7af9      	ldrb	r1, [r7, #11]
    ee02:	687a      	ldr	r2, [r7, #4]
    ee04:	f7fa fef5 	bl	9bf2 <HAL_PCD_EP_Receive>
    ee08:	4603      	mov	r3, r0
    ee0a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
    ee0c:	7dfb      	ldrb	r3, [r7, #23]
    ee0e:	4618      	mov	r0, r3
    ee10:	f000 f83a 	bl	ee88 <USBD_Get_USB_Status>
    ee14:	4603      	mov	r3, r0
    ee16:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
    ee18:	7dbb      	ldrb	r3, [r7, #22]
}
    ee1a:	4618      	mov	r0, r3
    ee1c:	3718      	adds	r7, #24
    ee1e:	46bd      	mov	sp, r7
    ee20:	bd80      	pop	{r7, pc}

0000ee22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
    ee22:	b580      	push	{r7, lr}
    ee24:	b082      	sub	sp, #8
    ee26:	af00      	add	r7, sp, #0
    ee28:	6078      	str	r0, [r7, #4]
    ee2a:	460b      	mov	r3, r1
    ee2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
    ee2e:	687b      	ldr	r3, [r7, #4]
    ee30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    ee34:	78fa      	ldrb	r2, [r7, #3]
    ee36:	4611      	mov	r1, r2
    ee38:	4618      	mov	r0, r3
    ee3a:	f7fa ff14 	bl	9c66 <HAL_PCD_EP_GetRxCount>
    ee3e:	4603      	mov	r3, r0
}
    ee40:	4618      	mov	r0, r3
    ee42:	3708      	adds	r7, #8
    ee44:	46bd      	mov	sp, r7
    ee46:	bd80      	pop	{r7, pc}

0000ee48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
    ee48:	b480      	push	{r7}
    ee4a:	b083      	sub	sp, #12
    ee4c:	af00      	add	r7, sp, #0
    ee4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
    ee50:	4b02      	ldr	r3, [pc, #8]	; (ee5c <USBD_static_malloc+0x14>)
}
    ee52:	4618      	mov	r0, r3
    ee54:	370c      	adds	r7, #12
    ee56:	46bd      	mov	sp, r7
    ee58:	bc80      	pop	{r7}
    ee5a:	4770      	bx	lr
    ee5c:	00025948 	.word	0x00025948

0000ee60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
    ee60:	b480      	push	{r7}
    ee62:	b083      	sub	sp, #12
    ee64:	af00      	add	r7, sp, #0
    ee66:	6078      	str	r0, [r7, #4]

}
    ee68:	bf00      	nop
    ee6a:	370c      	adds	r7, #12
    ee6c:	46bd      	mov	sp, r7
    ee6e:	bc80      	pop	{r7}
    ee70:	4770      	bx	lr

0000ee72 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
    ee72:	b480      	push	{r7}
    ee74:	b083      	sub	sp, #12
    ee76:	af00      	add	r7, sp, #0
    ee78:	6078      	str	r0, [r7, #4]
    ee7a:	460b      	mov	r3, r1
    ee7c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
    ee7e:	bf00      	nop
    ee80:	370c      	adds	r7, #12
    ee82:	46bd      	mov	sp, r7
    ee84:	bc80      	pop	{r7}
    ee86:	4770      	bx	lr

0000ee88 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
    ee88:	b480      	push	{r7}
    ee8a:	b085      	sub	sp, #20
    ee8c:	af00      	add	r7, sp, #0
    ee8e:	4603      	mov	r3, r0
    ee90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
    ee92:	2300      	movs	r3, #0
    ee94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
    ee96:	79fb      	ldrb	r3, [r7, #7]
    ee98:	2b03      	cmp	r3, #3
    ee9a:	d817      	bhi.n	eecc <USBD_Get_USB_Status+0x44>
    ee9c:	a201      	add	r2, pc, #4	; (adr r2, eea4 <USBD_Get_USB_Status+0x1c>)
    ee9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    eea2:	bf00      	nop
    eea4:	0000eeb5 	.word	0x0000eeb5
    eea8:	0000eebb 	.word	0x0000eebb
    eeac:	0000eec1 	.word	0x0000eec1
    eeb0:	0000eec7 	.word	0x0000eec7
  {
    case HAL_OK :
      usb_status = USBD_OK;
    eeb4:	2300      	movs	r3, #0
    eeb6:	73fb      	strb	r3, [r7, #15]
    break;
    eeb8:	e00b      	b.n	eed2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    eeba:	2302      	movs	r3, #2
    eebc:	73fb      	strb	r3, [r7, #15]
    break;
    eebe:	e008      	b.n	eed2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
    eec0:	2301      	movs	r3, #1
    eec2:	73fb      	strb	r3, [r7, #15]
    break;
    eec4:	e005      	b.n	eed2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
    eec6:	2302      	movs	r3, #2
    eec8:	73fb      	strb	r3, [r7, #15]
    break;
    eeca:	e002      	b.n	eed2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
    eecc:	2302      	movs	r3, #2
    eece:	73fb      	strb	r3, [r7, #15]
    break;
    eed0:	bf00      	nop
  }
  return usb_status;
    eed2:	7bfb      	ldrb	r3, [r7, #15]
}
    eed4:	4618      	mov	r0, r3
    eed6:	3714      	adds	r7, #20
    eed8:	46bd      	mov	sp, r7
    eeda:	bc80      	pop	{r7}
    eedc:	4770      	bx	lr
    eede:	bf00      	nop

0000eee0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
    eee0:	b480      	push	{r7}
    eee2:	b083      	sub	sp, #12
    eee4:	af00      	add	r7, sp, #0
    eee6:	4603      	mov	r3, r0
    eee8:	6039      	str	r1, [r7, #0]
    eeea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
    eeec:	683b      	ldr	r3, [r7, #0]
    eeee:	2212      	movs	r2, #18
    eef0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
    eef2:	4b03      	ldr	r3, [pc, #12]	; (ef00 <USBD_FS_DeviceDescriptor+0x20>)
}
    eef4:	4618      	mov	r0, r3
    eef6:	370c      	adds	r7, #12
    eef8:	46bd      	mov	sp, r7
    eefa:	bc80      	pop	{r7}
    eefc:	4770      	bx	lr
    eefe:	bf00      	nop
    ef00:	00025720 	.word	0x00025720

0000ef04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
    ef04:	b480      	push	{r7}
    ef06:	b083      	sub	sp, #12
    ef08:	af00      	add	r7, sp, #0
    ef0a:	4603      	mov	r3, r0
    ef0c:	6039      	str	r1, [r7, #0]
    ef0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
    ef10:	683b      	ldr	r3, [r7, #0]
    ef12:	2204      	movs	r2, #4
    ef14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
    ef16:	4b03      	ldr	r3, [pc, #12]	; (ef24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
    ef18:	4618      	mov	r0, r3
    ef1a:	370c      	adds	r7, #12
    ef1c:	46bd      	mov	sp, r7
    ef1e:	bc80      	pop	{r7}
    ef20:	4770      	bx	lr
    ef22:	bf00      	nop
    ef24:	00025734 	.word	0x00025734

0000ef28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
    ef28:	b580      	push	{r7, lr}
    ef2a:	b082      	sub	sp, #8
    ef2c:	af00      	add	r7, sp, #0
    ef2e:	4603      	mov	r3, r0
    ef30:	6039      	str	r1, [r7, #0]
    ef32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
    ef34:	79fb      	ldrb	r3, [r7, #7]
    ef36:	2b00      	cmp	r3, #0
    ef38:	d105      	bne.n	ef46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
    ef3a:	683a      	ldr	r2, [r7, #0]
    ef3c:	4907      	ldr	r1, [pc, #28]	; (ef5c <USBD_FS_ProductStrDescriptor+0x34>)
    ef3e:	4808      	ldr	r0, [pc, #32]	; (ef60 <USBD_FS_ProductStrDescriptor+0x38>)
    ef40:	f7fd fe71 	bl	cc26 <USBD_GetString>
    ef44:	e004      	b.n	ef50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
    ef46:	683a      	ldr	r2, [r7, #0]
    ef48:	4904      	ldr	r1, [pc, #16]	; (ef5c <USBD_FS_ProductStrDescriptor+0x34>)
    ef4a:	4805      	ldr	r0, [pc, #20]	; (ef60 <USBD_FS_ProductStrDescriptor+0x38>)
    ef4c:	f7fd fe6b 	bl	cc26 <USBD_GetString>
  }
  return USBD_StrDesc;
    ef50:	4b02      	ldr	r3, [pc, #8]	; (ef5c <USBD_FS_ProductStrDescriptor+0x34>)
}
    ef52:	4618      	mov	r0, r3
    ef54:	3708      	adds	r7, #8
    ef56:	46bd      	mov	sp, r7
    ef58:	bd80      	pop	{r7, pc}
    ef5a:	bf00      	nop
    ef5c:	000261d4 	.word	0x000261d4
    ef60:	00014e34 	.word	0x00014e34

0000ef64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
    ef64:	b580      	push	{r7, lr}
    ef66:	b082      	sub	sp, #8
    ef68:	af00      	add	r7, sp, #0
    ef6a:	4603      	mov	r3, r0
    ef6c:	6039      	str	r1, [r7, #0]
    ef6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
    ef70:	683a      	ldr	r2, [r7, #0]
    ef72:	4904      	ldr	r1, [pc, #16]	; (ef84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
    ef74:	4804      	ldr	r0, [pc, #16]	; (ef88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
    ef76:	f7fd fe56 	bl	cc26 <USBD_GetString>
  return USBD_StrDesc;
    ef7a:	4b02      	ldr	r3, [pc, #8]	; (ef84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
    ef7c:	4618      	mov	r0, r3
    ef7e:	3708      	adds	r7, #8
    ef80:	46bd      	mov	sp, r7
    ef82:	bd80      	pop	{r7, pc}
    ef84:	000261d4 	.word	0x000261d4
    ef88:	00014e4c 	.word	0x00014e4c

0000ef8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
    ef8c:	b580      	push	{r7, lr}
    ef8e:	b082      	sub	sp, #8
    ef90:	af00      	add	r7, sp, #0
    ef92:	4603      	mov	r3, r0
    ef94:	6039      	str	r1, [r7, #0]
    ef96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
    ef98:	683b      	ldr	r3, [r7, #0]
    ef9a:	221a      	movs	r2, #26
    ef9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
    ef9e:	f000 f843 	bl	f028 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
    efa2:	4b02      	ldr	r3, [pc, #8]	; (efac <USBD_FS_SerialStrDescriptor+0x20>)
}
    efa4:	4618      	mov	r0, r3
    efa6:	3708      	adds	r7, #8
    efa8:	46bd      	mov	sp, r7
    efaa:	bd80      	pop	{r7, pc}
    efac:	00025738 	.word	0x00025738

0000efb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
    efb0:	b580      	push	{r7, lr}
    efb2:	b082      	sub	sp, #8
    efb4:	af00      	add	r7, sp, #0
    efb6:	4603      	mov	r3, r0
    efb8:	6039      	str	r1, [r7, #0]
    efba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
    efbc:	79fb      	ldrb	r3, [r7, #7]
    efbe:	2b00      	cmp	r3, #0
    efc0:	d105      	bne.n	efce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
    efc2:	683a      	ldr	r2, [r7, #0]
    efc4:	4907      	ldr	r1, [pc, #28]	; (efe4 <USBD_FS_ConfigStrDescriptor+0x34>)
    efc6:	4808      	ldr	r0, [pc, #32]	; (efe8 <USBD_FS_ConfigStrDescriptor+0x38>)
    efc8:	f7fd fe2d 	bl	cc26 <USBD_GetString>
    efcc:	e004      	b.n	efd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
    efce:	683a      	ldr	r2, [r7, #0]
    efd0:	4904      	ldr	r1, [pc, #16]	; (efe4 <USBD_FS_ConfigStrDescriptor+0x34>)
    efd2:	4805      	ldr	r0, [pc, #20]	; (efe8 <USBD_FS_ConfigStrDescriptor+0x38>)
    efd4:	f7fd fe27 	bl	cc26 <USBD_GetString>
  }
  return USBD_StrDesc;
    efd8:	4b02      	ldr	r3, [pc, #8]	; (efe4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
    efda:	4618      	mov	r0, r3
    efdc:	3708      	adds	r7, #8
    efde:	46bd      	mov	sp, r7
    efe0:	bd80      	pop	{r7, pc}
    efe2:	bf00      	nop
    efe4:	000261d4 	.word	0x000261d4
    efe8:	00014e60 	.word	0x00014e60

0000efec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
    efec:	b580      	push	{r7, lr}
    efee:	b082      	sub	sp, #8
    eff0:	af00      	add	r7, sp, #0
    eff2:	4603      	mov	r3, r0
    eff4:	6039      	str	r1, [r7, #0]
    eff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
    eff8:	79fb      	ldrb	r3, [r7, #7]
    effa:	2b00      	cmp	r3, #0
    effc:	d105      	bne.n	f00a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
    effe:	683a      	ldr	r2, [r7, #0]
    f000:	4907      	ldr	r1, [pc, #28]	; (f020 <USBD_FS_InterfaceStrDescriptor+0x34>)
    f002:	4808      	ldr	r0, [pc, #32]	; (f024 <USBD_FS_InterfaceStrDescriptor+0x38>)
    f004:	f7fd fe0f 	bl	cc26 <USBD_GetString>
    f008:	e004      	b.n	f014 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
    f00a:	683a      	ldr	r2, [r7, #0]
    f00c:	4904      	ldr	r1, [pc, #16]	; (f020 <USBD_FS_InterfaceStrDescriptor+0x34>)
    f00e:	4805      	ldr	r0, [pc, #20]	; (f024 <USBD_FS_InterfaceStrDescriptor+0x38>)
    f010:	f7fd fe09 	bl	cc26 <USBD_GetString>
  }
  return USBD_StrDesc;
    f014:	4b02      	ldr	r3, [pc, #8]	; (f020 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
    f016:	4618      	mov	r0, r3
    f018:	3708      	adds	r7, #8
    f01a:	46bd      	mov	sp, r7
    f01c:	bd80      	pop	{r7, pc}
    f01e:	bf00      	nop
    f020:	000261d4 	.word	0x000261d4
    f024:	00014e6c 	.word	0x00014e6c

0000f028 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
    f028:	b580      	push	{r7, lr}
    f02a:	b084      	sub	sp, #16
    f02c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
    f02e:	4b0f      	ldr	r3, [pc, #60]	; (f06c <Get_SerialNum+0x44>)
    f030:	681b      	ldr	r3, [r3, #0]
    f032:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
    f034:	4b0e      	ldr	r3, [pc, #56]	; (f070 <Get_SerialNum+0x48>)
    f036:	681b      	ldr	r3, [r3, #0]
    f038:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
    f03a:	4b0e      	ldr	r3, [pc, #56]	; (f074 <Get_SerialNum+0x4c>)
    f03c:	681b      	ldr	r3, [r3, #0]
    f03e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
    f040:	68fa      	ldr	r2, [r7, #12]
    f042:	687b      	ldr	r3, [r7, #4]
    f044:	4413      	add	r3, r2
    f046:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
    f048:	68fb      	ldr	r3, [r7, #12]
    f04a:	2b00      	cmp	r3, #0
    f04c:	d009      	beq.n	f062 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
    f04e:	2208      	movs	r2, #8
    f050:	4909      	ldr	r1, [pc, #36]	; (f078 <Get_SerialNum+0x50>)
    f052:	68f8      	ldr	r0, [r7, #12]
    f054:	f000 f814 	bl	f080 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
    f058:	2204      	movs	r2, #4
    f05a:	4908      	ldr	r1, [pc, #32]	; (f07c <Get_SerialNum+0x54>)
    f05c:	68b8      	ldr	r0, [r7, #8]
    f05e:	f000 f80f 	bl	f080 <IntToUnicode>
  }
}
    f062:	bf00      	nop
    f064:	3710      	adds	r7, #16
    f066:	46bd      	mov	sp, r7
    f068:	bd80      	pop	{r7, pc}
    f06a:	bf00      	nop
    f06c:	1ffff7e8 	.word	0x1ffff7e8
    f070:	1ffff7ec 	.word	0x1ffff7ec
    f074:	1ffff7f0 	.word	0x1ffff7f0
    f078:	0002573a 	.word	0x0002573a
    f07c:	0002574a 	.word	0x0002574a

0000f080 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
    f080:	b480      	push	{r7}
    f082:	b087      	sub	sp, #28
    f084:	af00      	add	r7, sp, #0
    f086:	60f8      	str	r0, [r7, #12]
    f088:	60b9      	str	r1, [r7, #8]
    f08a:	4613      	mov	r3, r2
    f08c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
    f08e:	2300      	movs	r3, #0
    f090:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
    f092:	2300      	movs	r3, #0
    f094:	75fb      	strb	r3, [r7, #23]
    f096:	e027      	b.n	f0e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
    f098:	68fb      	ldr	r3, [r7, #12]
    f09a:	0f1b      	lsrs	r3, r3, #28
    f09c:	2b09      	cmp	r3, #9
    f09e:	d80b      	bhi.n	f0b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    f0a0:	68fb      	ldr	r3, [r7, #12]
    f0a2:	0f1b      	lsrs	r3, r3, #28
    f0a4:	b2da      	uxtb	r2, r3
    f0a6:	7dfb      	ldrb	r3, [r7, #23]
    f0a8:	005b      	lsls	r3, r3, #1
    f0aa:	4619      	mov	r1, r3
    f0ac:	68bb      	ldr	r3, [r7, #8]
    f0ae:	440b      	add	r3, r1
    f0b0:	3230      	adds	r2, #48	; 0x30
    f0b2:	b2d2      	uxtb	r2, r2
    f0b4:	701a      	strb	r2, [r3, #0]
    f0b6:	e00a      	b.n	f0ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    f0b8:	68fb      	ldr	r3, [r7, #12]
    f0ba:	0f1b      	lsrs	r3, r3, #28
    f0bc:	b2da      	uxtb	r2, r3
    f0be:	7dfb      	ldrb	r3, [r7, #23]
    f0c0:	005b      	lsls	r3, r3, #1
    f0c2:	4619      	mov	r1, r3
    f0c4:	68bb      	ldr	r3, [r7, #8]
    f0c6:	440b      	add	r3, r1
    f0c8:	3237      	adds	r2, #55	; 0x37
    f0ca:	b2d2      	uxtb	r2, r2
    f0cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
    f0ce:	68fb      	ldr	r3, [r7, #12]
    f0d0:	011b      	lsls	r3, r3, #4
    f0d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
    f0d4:	7dfb      	ldrb	r3, [r7, #23]
    f0d6:	005b      	lsls	r3, r3, #1
    f0d8:	3301      	adds	r3, #1
    f0da:	68ba      	ldr	r2, [r7, #8]
    f0dc:	4413      	add	r3, r2
    f0de:	2200      	movs	r2, #0
    f0e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
    f0e2:	7dfb      	ldrb	r3, [r7, #23]
    f0e4:	3301      	adds	r3, #1
    f0e6:	75fb      	strb	r3, [r7, #23]
    f0e8:	7dfa      	ldrb	r2, [r7, #23]
    f0ea:	79fb      	ldrb	r3, [r7, #7]
    f0ec:	429a      	cmp	r2, r3
    f0ee:	d3d3      	bcc.n	f098 <IntToUnicode+0x18>
  }
}
    f0f0:	bf00      	nop
    f0f2:	371c      	adds	r7, #28
    f0f4:	46bd      	mov	sp, r7
    f0f6:	bc80      	pop	{r7}
    f0f8:	4770      	bx	lr
	...

0000f0fc <__errno>:
    f0fc:	4b01      	ldr	r3, [pc, #4]	; (f104 <__errno+0x8>)
    f0fe:	6818      	ldr	r0, [r3, #0]
    f100:	4770      	bx	lr
    f102:	bf00      	nop
    f104:	00025754 	.word	0x00025754

0000f108 <__libc_init_array>:
    f108:	b570      	push	{r4, r5, r6, lr}
    f10a:	2500      	movs	r5, #0
    f10c:	4e0c      	ldr	r6, [pc, #48]	; (f140 <__libc_init_array+0x38>)
    f10e:	4c0d      	ldr	r4, [pc, #52]	; (f144 <__libc_init_array+0x3c>)
    f110:	1ba4      	subs	r4, r4, r6
    f112:	10a4      	asrs	r4, r4, #2
    f114:	42a5      	cmp	r5, r4
    f116:	d109      	bne.n	f12c <__libc_init_array+0x24>
    f118:	f7f8 ff72 	bl	8000 <_init>
    f11c:	2500      	movs	r5, #0
    f11e:	4e0a      	ldr	r6, [pc, #40]	; (f148 <__libc_init_array+0x40>)
    f120:	4c0a      	ldr	r4, [pc, #40]	; (f14c <__libc_init_array+0x44>)
    f122:	1ba4      	subs	r4, r4, r6
    f124:	10a4      	asrs	r4, r4, #2
    f126:	42a5      	cmp	r5, r4
    f128:	d105      	bne.n	f136 <__libc_init_array+0x2e>
    f12a:	bd70      	pop	{r4, r5, r6, pc}
    f12c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    f130:	4798      	blx	r3
    f132:	3501      	adds	r5, #1
    f134:	e7ee      	b.n	f114 <__libc_init_array+0xc>
    f136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    f13a:	4798      	blx	r3
    f13c:	3501      	adds	r5, #1
    f13e:	e7f2      	b.n	f126 <__libc_init_array+0x1e>
    f140:	000251ac 	.word	0x000251ac
    f144:	000251ac 	.word	0x000251ac
    f148:	000251ac 	.word	0x000251ac
    f14c:	000251b0 	.word	0x000251b0

0000f150 <memset>:
    f150:	4603      	mov	r3, r0
    f152:	4402      	add	r2, r0
    f154:	4293      	cmp	r3, r2
    f156:	d100      	bne.n	f15a <memset+0xa>
    f158:	4770      	bx	lr
    f15a:	f803 1b01 	strb.w	r1, [r3], #1
    f15e:	e7f9      	b.n	f154 <memset+0x4>

0000f160 <__cvt>:
    f160:	2b00      	cmp	r3, #0
    f162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f166:	461e      	mov	r6, r3
    f168:	bfbb      	ittet	lt
    f16a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
    f16e:	461e      	movlt	r6, r3
    f170:	2300      	movge	r3, #0
    f172:	232d      	movlt	r3, #45	; 0x2d
    f174:	b088      	sub	sp, #32
    f176:	9f14      	ldr	r7, [sp, #80]	; 0x50
    f178:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
    f17c:	f027 0720 	bic.w	r7, r7, #32
    f180:	2f46      	cmp	r7, #70	; 0x46
    f182:	4614      	mov	r4, r2
    f184:	9d10      	ldr	r5, [sp, #64]	; 0x40
    f186:	700b      	strb	r3, [r1, #0]
    f188:	d004      	beq.n	f194 <__cvt+0x34>
    f18a:	2f45      	cmp	r7, #69	; 0x45
    f18c:	d100      	bne.n	f190 <__cvt+0x30>
    f18e:	3501      	adds	r5, #1
    f190:	2302      	movs	r3, #2
    f192:	e000      	b.n	f196 <__cvt+0x36>
    f194:	2303      	movs	r3, #3
    f196:	aa07      	add	r2, sp, #28
    f198:	9204      	str	r2, [sp, #16]
    f19a:	aa06      	add	r2, sp, #24
    f19c:	e9cd a202 	strd	sl, r2, [sp, #8]
    f1a0:	e9cd 3500 	strd	r3, r5, [sp]
    f1a4:	4622      	mov	r2, r4
    f1a6:	4633      	mov	r3, r6
    f1a8:	f001 fd8e 	bl	10cc8 <_dtoa_r>
    f1ac:	2f47      	cmp	r7, #71	; 0x47
    f1ae:	4680      	mov	r8, r0
    f1b0:	d102      	bne.n	f1b8 <__cvt+0x58>
    f1b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f1b4:	07db      	lsls	r3, r3, #31
    f1b6:	d526      	bpl.n	f206 <__cvt+0xa6>
    f1b8:	2f46      	cmp	r7, #70	; 0x46
    f1ba:	eb08 0905 	add.w	r9, r8, r5
    f1be:	d111      	bne.n	f1e4 <__cvt+0x84>
    f1c0:	f898 3000 	ldrb.w	r3, [r8]
    f1c4:	2b30      	cmp	r3, #48	; 0x30
    f1c6:	d10a      	bne.n	f1de <__cvt+0x7e>
    f1c8:	2200      	movs	r2, #0
    f1ca:	2300      	movs	r3, #0
    f1cc:	4620      	mov	r0, r4
    f1ce:	4631      	mov	r1, r6
    f1d0:	f004 fdf8 	bl	13dc4 <__aeabi_dcmpeq>
    f1d4:	b918      	cbnz	r0, f1de <__cvt+0x7e>
    f1d6:	f1c5 0501 	rsb	r5, r5, #1
    f1da:	f8ca 5000 	str.w	r5, [sl]
    f1de:	f8da 3000 	ldr.w	r3, [sl]
    f1e2:	4499      	add	r9, r3
    f1e4:	2200      	movs	r2, #0
    f1e6:	2300      	movs	r3, #0
    f1e8:	4620      	mov	r0, r4
    f1ea:	4631      	mov	r1, r6
    f1ec:	f004 fdea 	bl	13dc4 <__aeabi_dcmpeq>
    f1f0:	b938      	cbnz	r0, f202 <__cvt+0xa2>
    f1f2:	2230      	movs	r2, #48	; 0x30
    f1f4:	9b07      	ldr	r3, [sp, #28]
    f1f6:	454b      	cmp	r3, r9
    f1f8:	d205      	bcs.n	f206 <__cvt+0xa6>
    f1fa:	1c59      	adds	r1, r3, #1
    f1fc:	9107      	str	r1, [sp, #28]
    f1fe:	701a      	strb	r2, [r3, #0]
    f200:	e7f8      	b.n	f1f4 <__cvt+0x94>
    f202:	f8cd 901c 	str.w	r9, [sp, #28]
    f206:	4640      	mov	r0, r8
    f208:	9b07      	ldr	r3, [sp, #28]
    f20a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    f20c:	eba3 0308 	sub.w	r3, r3, r8
    f210:	6013      	str	r3, [r2, #0]
    f212:	b008      	add	sp, #32
    f214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f218 <__exponent>:
    f218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f21a:	2900      	cmp	r1, #0
    f21c:	bfb4      	ite	lt
    f21e:	232d      	movlt	r3, #45	; 0x2d
    f220:	232b      	movge	r3, #43	; 0x2b
    f222:	4604      	mov	r4, r0
    f224:	bfb8      	it	lt
    f226:	4249      	neglt	r1, r1
    f228:	2909      	cmp	r1, #9
    f22a:	f804 2b02 	strb.w	r2, [r4], #2
    f22e:	7043      	strb	r3, [r0, #1]
    f230:	dd21      	ble.n	f276 <__exponent+0x5e>
    f232:	f10d 0307 	add.w	r3, sp, #7
    f236:	461f      	mov	r7, r3
    f238:	260a      	movs	r6, #10
    f23a:	fb91 f5f6 	sdiv	r5, r1, r6
    f23e:	fb06 1115 	mls	r1, r6, r5, r1
    f242:	2d09      	cmp	r5, #9
    f244:	f101 0130 	add.w	r1, r1, #48	; 0x30
    f248:	f803 1c01 	strb.w	r1, [r3, #-1]
    f24c:	f103 32ff 	add.w	r2, r3, #4294967295
    f250:	4629      	mov	r1, r5
    f252:	dc09      	bgt.n	f268 <__exponent+0x50>
    f254:	3130      	adds	r1, #48	; 0x30
    f256:	3b02      	subs	r3, #2
    f258:	f802 1c01 	strb.w	r1, [r2, #-1]
    f25c:	42bb      	cmp	r3, r7
    f25e:	4622      	mov	r2, r4
    f260:	d304      	bcc.n	f26c <__exponent+0x54>
    f262:	1a10      	subs	r0, r2, r0
    f264:	b003      	add	sp, #12
    f266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f268:	4613      	mov	r3, r2
    f26a:	e7e6      	b.n	f23a <__exponent+0x22>
    f26c:	f813 2b01 	ldrb.w	r2, [r3], #1
    f270:	f804 2b01 	strb.w	r2, [r4], #1
    f274:	e7f2      	b.n	f25c <__exponent+0x44>
    f276:	2330      	movs	r3, #48	; 0x30
    f278:	4419      	add	r1, r3
    f27a:	7083      	strb	r3, [r0, #2]
    f27c:	1d02      	adds	r2, r0, #4
    f27e:	70c1      	strb	r1, [r0, #3]
    f280:	e7ef      	b.n	f262 <__exponent+0x4a>
	...

0000f284 <_printf_float>:
    f284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f288:	b091      	sub	sp, #68	; 0x44
    f28a:	460c      	mov	r4, r1
    f28c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    f28e:	4693      	mov	fp, r2
    f290:	461e      	mov	r6, r3
    f292:	4605      	mov	r5, r0
    f294:	f002 fec4 	bl	12020 <_localeconv_r>
    f298:	6803      	ldr	r3, [r0, #0]
    f29a:	4618      	mov	r0, r3
    f29c:	9309      	str	r3, [sp, #36]	; 0x24
    f29e:	f000 fddf 	bl	fe60 <strlen>
    f2a2:	2300      	movs	r3, #0
    f2a4:	930e      	str	r3, [sp, #56]	; 0x38
    f2a6:	683b      	ldr	r3, [r7, #0]
    f2a8:	900a      	str	r0, [sp, #40]	; 0x28
    f2aa:	3307      	adds	r3, #7
    f2ac:	f023 0307 	bic.w	r3, r3, #7
    f2b0:	f103 0208 	add.w	r2, r3, #8
    f2b4:	f894 8018 	ldrb.w	r8, [r4, #24]
    f2b8:	f8d4 a000 	ldr.w	sl, [r4]
    f2bc:	603a      	str	r2, [r7, #0]
    f2be:	e9d3 2300 	ldrd	r2, r3, [r3]
    f2c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    f2c6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
    f2ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    f2ce:	930b      	str	r3, [sp, #44]	; 0x2c
    f2d0:	f04f 32ff 	mov.w	r2, #4294967295
    f2d4:	4ba6      	ldr	r3, [pc, #664]	; (f570 <_printf_float+0x2ec>)
    f2d6:	4638      	mov	r0, r7
    f2d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f2da:	f004 fda5 	bl	13e28 <__aeabi_dcmpun>
    f2de:	bb68      	cbnz	r0, f33c <_printf_float+0xb8>
    f2e0:	f04f 32ff 	mov.w	r2, #4294967295
    f2e4:	4ba2      	ldr	r3, [pc, #648]	; (f570 <_printf_float+0x2ec>)
    f2e6:	4638      	mov	r0, r7
    f2e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f2ea:	f004 fd7f 	bl	13dec <__aeabi_dcmple>
    f2ee:	bb28      	cbnz	r0, f33c <_printf_float+0xb8>
    f2f0:	2200      	movs	r2, #0
    f2f2:	2300      	movs	r3, #0
    f2f4:	4638      	mov	r0, r7
    f2f6:	4649      	mov	r1, r9
    f2f8:	f004 fd6e 	bl	13dd8 <__aeabi_dcmplt>
    f2fc:	b110      	cbz	r0, f304 <_printf_float+0x80>
    f2fe:	232d      	movs	r3, #45	; 0x2d
    f300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    f304:	4f9b      	ldr	r7, [pc, #620]	; (f574 <_printf_float+0x2f0>)
    f306:	4b9c      	ldr	r3, [pc, #624]	; (f578 <_printf_float+0x2f4>)
    f308:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    f30c:	bf98      	it	ls
    f30e:	461f      	movls	r7, r3
    f310:	2303      	movs	r3, #3
    f312:	f04f 0900 	mov.w	r9, #0
    f316:	6123      	str	r3, [r4, #16]
    f318:	f02a 0304 	bic.w	r3, sl, #4
    f31c:	6023      	str	r3, [r4, #0]
    f31e:	9600      	str	r6, [sp, #0]
    f320:	465b      	mov	r3, fp
    f322:	aa0f      	add	r2, sp, #60	; 0x3c
    f324:	4621      	mov	r1, r4
    f326:	4628      	mov	r0, r5
    f328:	f000 f9e2 	bl	f6f0 <_printf_common>
    f32c:	3001      	adds	r0, #1
    f32e:	f040 8090 	bne.w	f452 <_printf_float+0x1ce>
    f332:	f04f 30ff 	mov.w	r0, #4294967295
    f336:	b011      	add	sp, #68	; 0x44
    f338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f33c:	463a      	mov	r2, r7
    f33e:	464b      	mov	r3, r9
    f340:	4638      	mov	r0, r7
    f342:	4649      	mov	r1, r9
    f344:	f004 fd70 	bl	13e28 <__aeabi_dcmpun>
    f348:	b110      	cbz	r0, f350 <_printf_float+0xcc>
    f34a:	4f8c      	ldr	r7, [pc, #560]	; (f57c <_printf_float+0x2f8>)
    f34c:	4b8c      	ldr	r3, [pc, #560]	; (f580 <_printf_float+0x2fc>)
    f34e:	e7db      	b.n	f308 <_printf_float+0x84>
    f350:	6863      	ldr	r3, [r4, #4]
    f352:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
    f356:	1c59      	adds	r1, r3, #1
    f358:	a80d      	add	r0, sp, #52	; 0x34
    f35a:	a90e      	add	r1, sp, #56	; 0x38
    f35c:	d140      	bne.n	f3e0 <_printf_float+0x15c>
    f35e:	2306      	movs	r3, #6
    f360:	6063      	str	r3, [r4, #4]
    f362:	f04f 0c00 	mov.w	ip, #0
    f366:	f10d 0333 	add.w	r3, sp, #51	; 0x33
    f36a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    f36e:	6863      	ldr	r3, [r4, #4]
    f370:	6022      	str	r2, [r4, #0]
    f372:	e9cd 0803 	strd	r0, r8, [sp, #12]
    f376:	9300      	str	r3, [sp, #0]
    f378:	463a      	mov	r2, r7
    f37a:	464b      	mov	r3, r9
    f37c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
    f380:	4628      	mov	r0, r5
    f382:	f7ff feed 	bl	f160 <__cvt>
    f386:	f008 03df 	and.w	r3, r8, #223	; 0xdf
    f38a:	2b47      	cmp	r3, #71	; 0x47
    f38c:	4607      	mov	r7, r0
    f38e:	d109      	bne.n	f3a4 <_printf_float+0x120>
    f390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f392:	1cd8      	adds	r0, r3, #3
    f394:	db02      	blt.n	f39c <_printf_float+0x118>
    f396:	6862      	ldr	r2, [r4, #4]
    f398:	4293      	cmp	r3, r2
    f39a:	dd47      	ble.n	f42c <_printf_float+0x1a8>
    f39c:	f1a8 0802 	sub.w	r8, r8, #2
    f3a0:	fa5f f888 	uxtb.w	r8, r8
    f3a4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    f3a8:	990d      	ldr	r1, [sp, #52]	; 0x34
    f3aa:	d824      	bhi.n	f3f6 <_printf_float+0x172>
    f3ac:	3901      	subs	r1, #1
    f3ae:	4642      	mov	r2, r8
    f3b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
    f3b4:	910d      	str	r1, [sp, #52]	; 0x34
    f3b6:	f7ff ff2f 	bl	f218 <__exponent>
    f3ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f3bc:	4681      	mov	r9, r0
    f3be:	1813      	adds	r3, r2, r0
    f3c0:	2a01      	cmp	r2, #1
    f3c2:	6123      	str	r3, [r4, #16]
    f3c4:	dc02      	bgt.n	f3cc <_printf_float+0x148>
    f3c6:	6822      	ldr	r2, [r4, #0]
    f3c8:	07d1      	lsls	r1, r2, #31
    f3ca:	d501      	bpl.n	f3d0 <_printf_float+0x14c>
    f3cc:	3301      	adds	r3, #1
    f3ce:	6123      	str	r3, [r4, #16]
    f3d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    f3d4:	2b00      	cmp	r3, #0
    f3d6:	d0a2      	beq.n	f31e <_printf_float+0x9a>
    f3d8:	232d      	movs	r3, #45	; 0x2d
    f3da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    f3de:	e79e      	b.n	f31e <_printf_float+0x9a>
    f3e0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
    f3e4:	f000 816e 	beq.w	f6c4 <_printf_float+0x440>
    f3e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
    f3ec:	d1b9      	bne.n	f362 <_printf_float+0xde>
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	d1b7      	bne.n	f362 <_printf_float+0xde>
    f3f2:	2301      	movs	r3, #1
    f3f4:	e7b4      	b.n	f360 <_printf_float+0xdc>
    f3f6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
    f3fa:	d119      	bne.n	f430 <_printf_float+0x1ac>
    f3fc:	2900      	cmp	r1, #0
    f3fe:	6863      	ldr	r3, [r4, #4]
    f400:	dd0c      	ble.n	f41c <_printf_float+0x198>
    f402:	6121      	str	r1, [r4, #16]
    f404:	b913      	cbnz	r3, f40c <_printf_float+0x188>
    f406:	6822      	ldr	r2, [r4, #0]
    f408:	07d2      	lsls	r2, r2, #31
    f40a:	d502      	bpl.n	f412 <_printf_float+0x18e>
    f40c:	3301      	adds	r3, #1
    f40e:	440b      	add	r3, r1
    f410:	6123      	str	r3, [r4, #16]
    f412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f414:	f04f 0900 	mov.w	r9, #0
    f418:	65a3      	str	r3, [r4, #88]	; 0x58
    f41a:	e7d9      	b.n	f3d0 <_printf_float+0x14c>
    f41c:	b913      	cbnz	r3, f424 <_printf_float+0x1a0>
    f41e:	6822      	ldr	r2, [r4, #0]
    f420:	07d0      	lsls	r0, r2, #31
    f422:	d501      	bpl.n	f428 <_printf_float+0x1a4>
    f424:	3302      	adds	r3, #2
    f426:	e7f3      	b.n	f410 <_printf_float+0x18c>
    f428:	2301      	movs	r3, #1
    f42a:	e7f1      	b.n	f410 <_printf_float+0x18c>
    f42c:	f04f 0867 	mov.w	r8, #103	; 0x67
    f430:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
    f434:	4293      	cmp	r3, r2
    f436:	db05      	blt.n	f444 <_printf_float+0x1c0>
    f438:	6822      	ldr	r2, [r4, #0]
    f43a:	6123      	str	r3, [r4, #16]
    f43c:	07d1      	lsls	r1, r2, #31
    f43e:	d5e8      	bpl.n	f412 <_printf_float+0x18e>
    f440:	3301      	adds	r3, #1
    f442:	e7e5      	b.n	f410 <_printf_float+0x18c>
    f444:	2b00      	cmp	r3, #0
    f446:	bfcc      	ite	gt
    f448:	2301      	movgt	r3, #1
    f44a:	f1c3 0302 	rsble	r3, r3, #2
    f44e:	4413      	add	r3, r2
    f450:	e7de      	b.n	f410 <_printf_float+0x18c>
    f452:	6823      	ldr	r3, [r4, #0]
    f454:	055a      	lsls	r2, r3, #21
    f456:	d407      	bmi.n	f468 <_printf_float+0x1e4>
    f458:	6923      	ldr	r3, [r4, #16]
    f45a:	463a      	mov	r2, r7
    f45c:	4659      	mov	r1, fp
    f45e:	4628      	mov	r0, r5
    f460:	47b0      	blx	r6
    f462:	3001      	adds	r0, #1
    f464:	d129      	bne.n	f4ba <_printf_float+0x236>
    f466:	e764      	b.n	f332 <_printf_float+0xae>
    f468:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
    f46c:	f240 80d7 	bls.w	f61e <_printf_float+0x39a>
    f470:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    f474:	2200      	movs	r2, #0
    f476:	2300      	movs	r3, #0
    f478:	f004 fca4 	bl	13dc4 <__aeabi_dcmpeq>
    f47c:	b388      	cbz	r0, f4e2 <_printf_float+0x25e>
    f47e:	2301      	movs	r3, #1
    f480:	4a40      	ldr	r2, [pc, #256]	; (f584 <_printf_float+0x300>)
    f482:	4659      	mov	r1, fp
    f484:	4628      	mov	r0, r5
    f486:	47b0      	blx	r6
    f488:	3001      	adds	r0, #1
    f48a:	f43f af52 	beq.w	f332 <_printf_float+0xae>
    f48e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    f492:	429a      	cmp	r2, r3
    f494:	db02      	blt.n	f49c <_printf_float+0x218>
    f496:	6823      	ldr	r3, [r4, #0]
    f498:	07d8      	lsls	r0, r3, #31
    f49a:	d50e      	bpl.n	f4ba <_printf_float+0x236>
    f49c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    f4a0:	4659      	mov	r1, fp
    f4a2:	4628      	mov	r0, r5
    f4a4:	47b0      	blx	r6
    f4a6:	3001      	adds	r0, #1
    f4a8:	f43f af43 	beq.w	f332 <_printf_float+0xae>
    f4ac:	2700      	movs	r7, #0
    f4ae:	f104 081a 	add.w	r8, r4, #26
    f4b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f4b4:	3b01      	subs	r3, #1
    f4b6:	42bb      	cmp	r3, r7
    f4b8:	dc09      	bgt.n	f4ce <_printf_float+0x24a>
    f4ba:	6823      	ldr	r3, [r4, #0]
    f4bc:	079f      	lsls	r7, r3, #30
    f4be:	f100 80fd 	bmi.w	f6bc <_printf_float+0x438>
    f4c2:	68e0      	ldr	r0, [r4, #12]
    f4c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f4c6:	4298      	cmp	r0, r3
    f4c8:	bfb8      	it	lt
    f4ca:	4618      	movlt	r0, r3
    f4cc:	e733      	b.n	f336 <_printf_float+0xb2>
    f4ce:	2301      	movs	r3, #1
    f4d0:	4642      	mov	r2, r8
    f4d2:	4659      	mov	r1, fp
    f4d4:	4628      	mov	r0, r5
    f4d6:	47b0      	blx	r6
    f4d8:	3001      	adds	r0, #1
    f4da:	f43f af2a 	beq.w	f332 <_printf_float+0xae>
    f4de:	3701      	adds	r7, #1
    f4e0:	e7e7      	b.n	f4b2 <_printf_float+0x22e>
    f4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	dc2b      	bgt.n	f540 <_printf_float+0x2bc>
    f4e8:	2301      	movs	r3, #1
    f4ea:	4a26      	ldr	r2, [pc, #152]	; (f584 <_printf_float+0x300>)
    f4ec:	4659      	mov	r1, fp
    f4ee:	4628      	mov	r0, r5
    f4f0:	47b0      	blx	r6
    f4f2:	3001      	adds	r0, #1
    f4f4:	f43f af1d 	beq.w	f332 <_printf_float+0xae>
    f4f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f4fa:	b923      	cbnz	r3, f506 <_printf_float+0x282>
    f4fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f4fe:	b913      	cbnz	r3, f506 <_printf_float+0x282>
    f500:	6823      	ldr	r3, [r4, #0]
    f502:	07d9      	lsls	r1, r3, #31
    f504:	d5d9      	bpl.n	f4ba <_printf_float+0x236>
    f506:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    f50a:	4659      	mov	r1, fp
    f50c:	4628      	mov	r0, r5
    f50e:	47b0      	blx	r6
    f510:	3001      	adds	r0, #1
    f512:	f43f af0e 	beq.w	f332 <_printf_float+0xae>
    f516:	f04f 0800 	mov.w	r8, #0
    f51a:	f104 091a 	add.w	r9, r4, #26
    f51e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f520:	425b      	negs	r3, r3
    f522:	4543      	cmp	r3, r8
    f524:	dc01      	bgt.n	f52a <_printf_float+0x2a6>
    f526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f528:	e797      	b.n	f45a <_printf_float+0x1d6>
    f52a:	2301      	movs	r3, #1
    f52c:	464a      	mov	r2, r9
    f52e:	4659      	mov	r1, fp
    f530:	4628      	mov	r0, r5
    f532:	47b0      	blx	r6
    f534:	3001      	adds	r0, #1
    f536:	f43f aefc 	beq.w	f332 <_printf_float+0xae>
    f53a:	f108 0801 	add.w	r8, r8, #1
    f53e:	e7ee      	b.n	f51e <_printf_float+0x29a>
    f540:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f542:	6da3      	ldr	r3, [r4, #88]	; 0x58
    f544:	429a      	cmp	r2, r3
    f546:	bfa8      	it	ge
    f548:	461a      	movge	r2, r3
    f54a:	2a00      	cmp	r2, #0
    f54c:	4690      	mov	r8, r2
    f54e:	dd07      	ble.n	f560 <_printf_float+0x2dc>
    f550:	4613      	mov	r3, r2
    f552:	4659      	mov	r1, fp
    f554:	463a      	mov	r2, r7
    f556:	4628      	mov	r0, r5
    f558:	47b0      	blx	r6
    f55a:	3001      	adds	r0, #1
    f55c:	f43f aee9 	beq.w	f332 <_printf_float+0xae>
    f560:	f104 031a 	add.w	r3, r4, #26
    f564:	f04f 0a00 	mov.w	sl, #0
    f568:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
    f56c:	930b      	str	r3, [sp, #44]	; 0x2c
    f56e:	e015      	b.n	f59c <_printf_float+0x318>
    f570:	7fefffff 	.word	0x7fefffff
    f574:	00014e84 	.word	0x00014e84
    f578:	00014e80 	.word	0x00014e80
    f57c:	00014e8c 	.word	0x00014e8c
    f580:	00014e88 	.word	0x00014e88
    f584:	00014e90 	.word	0x00014e90
    f588:	2301      	movs	r3, #1
    f58a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f58c:	4659      	mov	r1, fp
    f58e:	4628      	mov	r0, r5
    f590:	47b0      	blx	r6
    f592:	3001      	adds	r0, #1
    f594:	f43f aecd 	beq.w	f332 <_printf_float+0xae>
    f598:	f10a 0a01 	add.w	sl, sl, #1
    f59c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
    f5a0:	eba9 0308 	sub.w	r3, r9, r8
    f5a4:	4553      	cmp	r3, sl
    f5a6:	dcef      	bgt.n	f588 <_printf_float+0x304>
    f5a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    f5ac:	429a      	cmp	r2, r3
    f5ae:	444f      	add	r7, r9
    f5b0:	db14      	blt.n	f5dc <_printf_float+0x358>
    f5b2:	6823      	ldr	r3, [r4, #0]
    f5b4:	07da      	lsls	r2, r3, #31
    f5b6:	d411      	bmi.n	f5dc <_printf_float+0x358>
    f5b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f5ba:	990d      	ldr	r1, [sp, #52]	; 0x34
    f5bc:	eba3 0209 	sub.w	r2, r3, r9
    f5c0:	eba3 0901 	sub.w	r9, r3, r1
    f5c4:	4591      	cmp	r9, r2
    f5c6:	bfa8      	it	ge
    f5c8:	4691      	movge	r9, r2
    f5ca:	f1b9 0f00 	cmp.w	r9, #0
    f5ce:	dc0d      	bgt.n	f5ec <_printf_float+0x368>
    f5d0:	2700      	movs	r7, #0
    f5d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
    f5d6:	f104 081a 	add.w	r8, r4, #26
    f5da:	e018      	b.n	f60e <_printf_float+0x38a>
    f5dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    f5e0:	4659      	mov	r1, fp
    f5e2:	4628      	mov	r0, r5
    f5e4:	47b0      	blx	r6
    f5e6:	3001      	adds	r0, #1
    f5e8:	d1e6      	bne.n	f5b8 <_printf_float+0x334>
    f5ea:	e6a2      	b.n	f332 <_printf_float+0xae>
    f5ec:	464b      	mov	r3, r9
    f5ee:	463a      	mov	r2, r7
    f5f0:	4659      	mov	r1, fp
    f5f2:	4628      	mov	r0, r5
    f5f4:	47b0      	blx	r6
    f5f6:	3001      	adds	r0, #1
    f5f8:	d1ea      	bne.n	f5d0 <_printf_float+0x34c>
    f5fa:	e69a      	b.n	f332 <_printf_float+0xae>
    f5fc:	2301      	movs	r3, #1
    f5fe:	4642      	mov	r2, r8
    f600:	4659      	mov	r1, fp
    f602:	4628      	mov	r0, r5
    f604:	47b0      	blx	r6
    f606:	3001      	adds	r0, #1
    f608:	f43f ae93 	beq.w	f332 <_printf_float+0xae>
    f60c:	3701      	adds	r7, #1
    f60e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
    f612:	1a9b      	subs	r3, r3, r2
    f614:	eba3 0309 	sub.w	r3, r3, r9
    f618:	42bb      	cmp	r3, r7
    f61a:	dcef      	bgt.n	f5fc <_printf_float+0x378>
    f61c:	e74d      	b.n	f4ba <_printf_float+0x236>
    f61e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f620:	2a01      	cmp	r2, #1
    f622:	dc01      	bgt.n	f628 <_printf_float+0x3a4>
    f624:	07db      	lsls	r3, r3, #31
    f626:	d538      	bpl.n	f69a <_printf_float+0x416>
    f628:	2301      	movs	r3, #1
    f62a:	463a      	mov	r2, r7
    f62c:	4659      	mov	r1, fp
    f62e:	4628      	mov	r0, r5
    f630:	47b0      	blx	r6
    f632:	3001      	adds	r0, #1
    f634:	f43f ae7d 	beq.w	f332 <_printf_float+0xae>
    f638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    f63c:	4659      	mov	r1, fp
    f63e:	4628      	mov	r0, r5
    f640:	47b0      	blx	r6
    f642:	3001      	adds	r0, #1
    f644:	f107 0701 	add.w	r7, r7, #1
    f648:	f43f ae73 	beq.w	f332 <_printf_float+0xae>
    f64c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
    f650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f652:	2200      	movs	r2, #0
    f654:	f103 38ff 	add.w	r8, r3, #4294967295
    f658:	2300      	movs	r3, #0
    f65a:	f004 fbb3 	bl	13dc4 <__aeabi_dcmpeq>
    f65e:	b9c0      	cbnz	r0, f692 <_printf_float+0x40e>
    f660:	4643      	mov	r3, r8
    f662:	463a      	mov	r2, r7
    f664:	4659      	mov	r1, fp
    f666:	4628      	mov	r0, r5
    f668:	47b0      	blx	r6
    f66a:	3001      	adds	r0, #1
    f66c:	d10d      	bne.n	f68a <_printf_float+0x406>
    f66e:	e660      	b.n	f332 <_printf_float+0xae>
    f670:	2301      	movs	r3, #1
    f672:	4642      	mov	r2, r8
    f674:	4659      	mov	r1, fp
    f676:	4628      	mov	r0, r5
    f678:	47b0      	blx	r6
    f67a:	3001      	adds	r0, #1
    f67c:	f43f ae59 	beq.w	f332 <_printf_float+0xae>
    f680:	3701      	adds	r7, #1
    f682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f684:	3b01      	subs	r3, #1
    f686:	42bb      	cmp	r3, r7
    f688:	dcf2      	bgt.n	f670 <_printf_float+0x3ec>
    f68a:	464b      	mov	r3, r9
    f68c:	f104 0250 	add.w	r2, r4, #80	; 0x50
    f690:	e6e4      	b.n	f45c <_printf_float+0x1d8>
    f692:	2700      	movs	r7, #0
    f694:	f104 081a 	add.w	r8, r4, #26
    f698:	e7f3      	b.n	f682 <_printf_float+0x3fe>
    f69a:	2301      	movs	r3, #1
    f69c:	e7e1      	b.n	f662 <_printf_float+0x3de>
    f69e:	2301      	movs	r3, #1
    f6a0:	4642      	mov	r2, r8
    f6a2:	4659      	mov	r1, fp
    f6a4:	4628      	mov	r0, r5
    f6a6:	47b0      	blx	r6
    f6a8:	3001      	adds	r0, #1
    f6aa:	f43f ae42 	beq.w	f332 <_printf_float+0xae>
    f6ae:	3701      	adds	r7, #1
    f6b0:	68e3      	ldr	r3, [r4, #12]
    f6b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f6b4:	1a9b      	subs	r3, r3, r2
    f6b6:	42bb      	cmp	r3, r7
    f6b8:	dcf1      	bgt.n	f69e <_printf_float+0x41a>
    f6ba:	e702      	b.n	f4c2 <_printf_float+0x23e>
    f6bc:	2700      	movs	r7, #0
    f6be:	f104 0819 	add.w	r8, r4, #25
    f6c2:	e7f5      	b.n	f6b0 <_printf_float+0x42c>
    f6c4:	2b00      	cmp	r3, #0
    f6c6:	f43f ae94 	beq.w	f3f2 <_printf_float+0x16e>
    f6ca:	f04f 0c00 	mov.w	ip, #0
    f6ce:	e9cd 1c05 	strd	r1, ip, [sp, #20]
    f6d2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
    f6d6:	6022      	str	r2, [r4, #0]
    f6d8:	e9cd 0803 	strd	r0, r8, [sp, #12]
    f6dc:	e9cd 2101 	strd	r2, r1, [sp, #4]
    f6e0:	9300      	str	r3, [sp, #0]
    f6e2:	463a      	mov	r2, r7
    f6e4:	464b      	mov	r3, r9
    f6e6:	4628      	mov	r0, r5
    f6e8:	f7ff fd3a 	bl	f160 <__cvt>
    f6ec:	4607      	mov	r7, r0
    f6ee:	e64f      	b.n	f390 <_printf_float+0x10c>

0000f6f0 <_printf_common>:
    f6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f6f4:	4691      	mov	r9, r2
    f6f6:	461f      	mov	r7, r3
    f6f8:	688a      	ldr	r2, [r1, #8]
    f6fa:	690b      	ldr	r3, [r1, #16]
    f6fc:	4606      	mov	r6, r0
    f6fe:	4293      	cmp	r3, r2
    f700:	bfb8      	it	lt
    f702:	4613      	movlt	r3, r2
    f704:	f8c9 3000 	str.w	r3, [r9]
    f708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f70c:	460c      	mov	r4, r1
    f70e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    f712:	b112      	cbz	r2, f71a <_printf_common+0x2a>
    f714:	3301      	adds	r3, #1
    f716:	f8c9 3000 	str.w	r3, [r9]
    f71a:	6823      	ldr	r3, [r4, #0]
    f71c:	0699      	lsls	r1, r3, #26
    f71e:	bf42      	ittt	mi
    f720:	f8d9 3000 	ldrmi.w	r3, [r9]
    f724:	3302      	addmi	r3, #2
    f726:	f8c9 3000 	strmi.w	r3, [r9]
    f72a:	6825      	ldr	r5, [r4, #0]
    f72c:	f015 0506 	ands.w	r5, r5, #6
    f730:	d107      	bne.n	f742 <_printf_common+0x52>
    f732:	f104 0a19 	add.w	sl, r4, #25
    f736:	68e3      	ldr	r3, [r4, #12]
    f738:	f8d9 2000 	ldr.w	r2, [r9]
    f73c:	1a9b      	subs	r3, r3, r2
    f73e:	42ab      	cmp	r3, r5
    f740:	dc29      	bgt.n	f796 <_printf_common+0xa6>
    f742:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    f746:	6822      	ldr	r2, [r4, #0]
    f748:	3300      	adds	r3, #0
    f74a:	bf18      	it	ne
    f74c:	2301      	movne	r3, #1
    f74e:	0692      	lsls	r2, r2, #26
    f750:	d42e      	bmi.n	f7b0 <_printf_common+0xc0>
    f752:	f104 0243 	add.w	r2, r4, #67	; 0x43
    f756:	4639      	mov	r1, r7
    f758:	4630      	mov	r0, r6
    f75a:	47c0      	blx	r8
    f75c:	3001      	adds	r0, #1
    f75e:	d021      	beq.n	f7a4 <_printf_common+0xb4>
    f760:	6823      	ldr	r3, [r4, #0]
    f762:	68e5      	ldr	r5, [r4, #12]
    f764:	f003 0306 	and.w	r3, r3, #6
    f768:	2b04      	cmp	r3, #4
    f76a:	bf18      	it	ne
    f76c:	2500      	movne	r5, #0
    f76e:	f8d9 2000 	ldr.w	r2, [r9]
    f772:	f04f 0900 	mov.w	r9, #0
    f776:	bf08      	it	eq
    f778:	1aad      	subeq	r5, r5, r2
    f77a:	68a3      	ldr	r3, [r4, #8]
    f77c:	6922      	ldr	r2, [r4, #16]
    f77e:	bf08      	it	eq
    f780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    f784:	4293      	cmp	r3, r2
    f786:	bfc4      	itt	gt
    f788:	1a9b      	subgt	r3, r3, r2
    f78a:	18ed      	addgt	r5, r5, r3
    f78c:	341a      	adds	r4, #26
    f78e:	454d      	cmp	r5, r9
    f790:	d11a      	bne.n	f7c8 <_printf_common+0xd8>
    f792:	2000      	movs	r0, #0
    f794:	e008      	b.n	f7a8 <_printf_common+0xb8>
    f796:	2301      	movs	r3, #1
    f798:	4652      	mov	r2, sl
    f79a:	4639      	mov	r1, r7
    f79c:	4630      	mov	r0, r6
    f79e:	47c0      	blx	r8
    f7a0:	3001      	adds	r0, #1
    f7a2:	d103      	bne.n	f7ac <_printf_common+0xbc>
    f7a4:	f04f 30ff 	mov.w	r0, #4294967295
    f7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f7ac:	3501      	adds	r5, #1
    f7ae:	e7c2      	b.n	f736 <_printf_common+0x46>
    f7b0:	2030      	movs	r0, #48	; 0x30
    f7b2:	18e1      	adds	r1, r4, r3
    f7b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    f7b8:	1c5a      	adds	r2, r3, #1
    f7ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    f7be:	4422      	add	r2, r4
    f7c0:	3302      	adds	r3, #2
    f7c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    f7c6:	e7c4      	b.n	f752 <_printf_common+0x62>
    f7c8:	2301      	movs	r3, #1
    f7ca:	4622      	mov	r2, r4
    f7cc:	4639      	mov	r1, r7
    f7ce:	4630      	mov	r0, r6
    f7d0:	47c0      	blx	r8
    f7d2:	3001      	adds	r0, #1
    f7d4:	d0e6      	beq.n	f7a4 <_printf_common+0xb4>
    f7d6:	f109 0901 	add.w	r9, r9, #1
    f7da:	e7d8      	b.n	f78e <_printf_common+0x9e>

0000f7dc <_printf_i>:
    f7dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f7e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
    f7e4:	460c      	mov	r4, r1
    f7e6:	7e09      	ldrb	r1, [r1, #24]
    f7e8:	b085      	sub	sp, #20
    f7ea:	296e      	cmp	r1, #110	; 0x6e
    f7ec:	4617      	mov	r7, r2
    f7ee:	4606      	mov	r6, r0
    f7f0:	4698      	mov	r8, r3
    f7f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f7f4:	f000 80b3 	beq.w	f95e <_printf_i+0x182>
    f7f8:	d822      	bhi.n	f840 <_printf_i+0x64>
    f7fa:	2963      	cmp	r1, #99	; 0x63
    f7fc:	d036      	beq.n	f86c <_printf_i+0x90>
    f7fe:	d80a      	bhi.n	f816 <_printf_i+0x3a>
    f800:	2900      	cmp	r1, #0
    f802:	f000 80b9 	beq.w	f978 <_printf_i+0x19c>
    f806:	2958      	cmp	r1, #88	; 0x58
    f808:	f000 8083 	beq.w	f912 <_printf_i+0x136>
    f80c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    f810:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    f814:	e032      	b.n	f87c <_printf_i+0xa0>
    f816:	2964      	cmp	r1, #100	; 0x64
    f818:	d001      	beq.n	f81e <_printf_i+0x42>
    f81a:	2969      	cmp	r1, #105	; 0x69
    f81c:	d1f6      	bne.n	f80c <_printf_i+0x30>
    f81e:	6820      	ldr	r0, [r4, #0]
    f820:	6813      	ldr	r3, [r2, #0]
    f822:	0605      	lsls	r5, r0, #24
    f824:	f103 0104 	add.w	r1, r3, #4
    f828:	d52a      	bpl.n	f880 <_printf_i+0xa4>
    f82a:	681b      	ldr	r3, [r3, #0]
    f82c:	6011      	str	r1, [r2, #0]
    f82e:	2b00      	cmp	r3, #0
    f830:	da03      	bge.n	f83a <_printf_i+0x5e>
    f832:	222d      	movs	r2, #45	; 0x2d
    f834:	425b      	negs	r3, r3
    f836:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    f83a:	486f      	ldr	r0, [pc, #444]	; (f9f8 <_printf_i+0x21c>)
    f83c:	220a      	movs	r2, #10
    f83e:	e039      	b.n	f8b4 <_printf_i+0xd8>
    f840:	2973      	cmp	r1, #115	; 0x73
    f842:	f000 809d 	beq.w	f980 <_printf_i+0x1a4>
    f846:	d808      	bhi.n	f85a <_printf_i+0x7e>
    f848:	296f      	cmp	r1, #111	; 0x6f
    f84a:	d020      	beq.n	f88e <_printf_i+0xb2>
    f84c:	2970      	cmp	r1, #112	; 0x70
    f84e:	d1dd      	bne.n	f80c <_printf_i+0x30>
    f850:	6823      	ldr	r3, [r4, #0]
    f852:	f043 0320 	orr.w	r3, r3, #32
    f856:	6023      	str	r3, [r4, #0]
    f858:	e003      	b.n	f862 <_printf_i+0x86>
    f85a:	2975      	cmp	r1, #117	; 0x75
    f85c:	d017      	beq.n	f88e <_printf_i+0xb2>
    f85e:	2978      	cmp	r1, #120	; 0x78
    f860:	d1d4      	bne.n	f80c <_printf_i+0x30>
    f862:	2378      	movs	r3, #120	; 0x78
    f864:	4865      	ldr	r0, [pc, #404]	; (f9fc <_printf_i+0x220>)
    f866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    f86a:	e055      	b.n	f918 <_printf_i+0x13c>
    f86c:	6813      	ldr	r3, [r2, #0]
    f86e:	f104 0542 	add.w	r5, r4, #66	; 0x42
    f872:	1d19      	adds	r1, r3, #4
    f874:	681b      	ldr	r3, [r3, #0]
    f876:	6011      	str	r1, [r2, #0]
    f878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    f87c:	2301      	movs	r3, #1
    f87e:	e08c      	b.n	f99a <_printf_i+0x1be>
    f880:	681b      	ldr	r3, [r3, #0]
    f882:	f010 0f40 	tst.w	r0, #64	; 0x40
    f886:	6011      	str	r1, [r2, #0]
    f888:	bf18      	it	ne
    f88a:	b21b      	sxthne	r3, r3
    f88c:	e7cf      	b.n	f82e <_printf_i+0x52>
    f88e:	6813      	ldr	r3, [r2, #0]
    f890:	6825      	ldr	r5, [r4, #0]
    f892:	1d18      	adds	r0, r3, #4
    f894:	6010      	str	r0, [r2, #0]
    f896:	0628      	lsls	r0, r5, #24
    f898:	d501      	bpl.n	f89e <_printf_i+0xc2>
    f89a:	681b      	ldr	r3, [r3, #0]
    f89c:	e002      	b.n	f8a4 <_printf_i+0xc8>
    f89e:	0668      	lsls	r0, r5, #25
    f8a0:	d5fb      	bpl.n	f89a <_printf_i+0xbe>
    f8a2:	881b      	ldrh	r3, [r3, #0]
    f8a4:	296f      	cmp	r1, #111	; 0x6f
    f8a6:	bf14      	ite	ne
    f8a8:	220a      	movne	r2, #10
    f8aa:	2208      	moveq	r2, #8
    f8ac:	4852      	ldr	r0, [pc, #328]	; (f9f8 <_printf_i+0x21c>)
    f8ae:	2100      	movs	r1, #0
    f8b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    f8b4:	6865      	ldr	r5, [r4, #4]
    f8b6:	2d00      	cmp	r5, #0
    f8b8:	60a5      	str	r5, [r4, #8]
    f8ba:	f2c0 8095 	blt.w	f9e8 <_printf_i+0x20c>
    f8be:	6821      	ldr	r1, [r4, #0]
    f8c0:	f021 0104 	bic.w	r1, r1, #4
    f8c4:	6021      	str	r1, [r4, #0]
    f8c6:	2b00      	cmp	r3, #0
    f8c8:	d13d      	bne.n	f946 <_printf_i+0x16a>
    f8ca:	2d00      	cmp	r5, #0
    f8cc:	f040 808e 	bne.w	f9ec <_printf_i+0x210>
    f8d0:	4665      	mov	r5, ip
    f8d2:	2a08      	cmp	r2, #8
    f8d4:	d10b      	bne.n	f8ee <_printf_i+0x112>
    f8d6:	6823      	ldr	r3, [r4, #0]
    f8d8:	07db      	lsls	r3, r3, #31
    f8da:	d508      	bpl.n	f8ee <_printf_i+0x112>
    f8dc:	6923      	ldr	r3, [r4, #16]
    f8de:	6862      	ldr	r2, [r4, #4]
    f8e0:	429a      	cmp	r2, r3
    f8e2:	bfde      	ittt	le
    f8e4:	2330      	movle	r3, #48	; 0x30
    f8e6:	f805 3c01 	strble.w	r3, [r5, #-1]
    f8ea:	f105 35ff 	addle.w	r5, r5, #4294967295
    f8ee:	ebac 0305 	sub.w	r3, ip, r5
    f8f2:	6123      	str	r3, [r4, #16]
    f8f4:	f8cd 8000 	str.w	r8, [sp]
    f8f8:	463b      	mov	r3, r7
    f8fa:	aa03      	add	r2, sp, #12
    f8fc:	4621      	mov	r1, r4
    f8fe:	4630      	mov	r0, r6
    f900:	f7ff fef6 	bl	f6f0 <_printf_common>
    f904:	3001      	adds	r0, #1
    f906:	d14d      	bne.n	f9a4 <_printf_i+0x1c8>
    f908:	f04f 30ff 	mov.w	r0, #4294967295
    f90c:	b005      	add	sp, #20
    f90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f912:	4839      	ldr	r0, [pc, #228]	; (f9f8 <_printf_i+0x21c>)
    f914:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
    f918:	6813      	ldr	r3, [r2, #0]
    f91a:	6821      	ldr	r1, [r4, #0]
    f91c:	1d1d      	adds	r5, r3, #4
    f91e:	681b      	ldr	r3, [r3, #0]
    f920:	6015      	str	r5, [r2, #0]
    f922:	060a      	lsls	r2, r1, #24
    f924:	d50b      	bpl.n	f93e <_printf_i+0x162>
    f926:	07ca      	lsls	r2, r1, #31
    f928:	bf44      	itt	mi
    f92a:	f041 0120 	orrmi.w	r1, r1, #32
    f92e:	6021      	strmi	r1, [r4, #0]
    f930:	b91b      	cbnz	r3, f93a <_printf_i+0x15e>
    f932:	6822      	ldr	r2, [r4, #0]
    f934:	f022 0220 	bic.w	r2, r2, #32
    f938:	6022      	str	r2, [r4, #0]
    f93a:	2210      	movs	r2, #16
    f93c:	e7b7      	b.n	f8ae <_printf_i+0xd2>
    f93e:	064d      	lsls	r5, r1, #25
    f940:	bf48      	it	mi
    f942:	b29b      	uxthmi	r3, r3
    f944:	e7ef      	b.n	f926 <_printf_i+0x14a>
    f946:	4665      	mov	r5, ip
    f948:	fbb3 f1f2 	udiv	r1, r3, r2
    f94c:	fb02 3311 	mls	r3, r2, r1, r3
    f950:	5cc3      	ldrb	r3, [r0, r3]
    f952:	f805 3d01 	strb.w	r3, [r5, #-1]!
    f956:	460b      	mov	r3, r1
    f958:	2900      	cmp	r1, #0
    f95a:	d1f5      	bne.n	f948 <_printf_i+0x16c>
    f95c:	e7b9      	b.n	f8d2 <_printf_i+0xf6>
    f95e:	6813      	ldr	r3, [r2, #0]
    f960:	6825      	ldr	r5, [r4, #0]
    f962:	1d18      	adds	r0, r3, #4
    f964:	6961      	ldr	r1, [r4, #20]
    f966:	6010      	str	r0, [r2, #0]
    f968:	0628      	lsls	r0, r5, #24
    f96a:	681b      	ldr	r3, [r3, #0]
    f96c:	d501      	bpl.n	f972 <_printf_i+0x196>
    f96e:	6019      	str	r1, [r3, #0]
    f970:	e002      	b.n	f978 <_printf_i+0x19c>
    f972:	066a      	lsls	r2, r5, #25
    f974:	d5fb      	bpl.n	f96e <_printf_i+0x192>
    f976:	8019      	strh	r1, [r3, #0]
    f978:	2300      	movs	r3, #0
    f97a:	4665      	mov	r5, ip
    f97c:	6123      	str	r3, [r4, #16]
    f97e:	e7b9      	b.n	f8f4 <_printf_i+0x118>
    f980:	6813      	ldr	r3, [r2, #0]
    f982:	1d19      	adds	r1, r3, #4
    f984:	6011      	str	r1, [r2, #0]
    f986:	681d      	ldr	r5, [r3, #0]
    f988:	6862      	ldr	r2, [r4, #4]
    f98a:	2100      	movs	r1, #0
    f98c:	4628      	mov	r0, r5
    f98e:	f002 fb6f 	bl	12070 <memchr>
    f992:	b108      	cbz	r0, f998 <_printf_i+0x1bc>
    f994:	1b40      	subs	r0, r0, r5
    f996:	6060      	str	r0, [r4, #4]
    f998:	6863      	ldr	r3, [r4, #4]
    f99a:	6123      	str	r3, [r4, #16]
    f99c:	2300      	movs	r3, #0
    f99e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    f9a2:	e7a7      	b.n	f8f4 <_printf_i+0x118>
    f9a4:	6923      	ldr	r3, [r4, #16]
    f9a6:	462a      	mov	r2, r5
    f9a8:	4639      	mov	r1, r7
    f9aa:	4630      	mov	r0, r6
    f9ac:	47c0      	blx	r8
    f9ae:	3001      	adds	r0, #1
    f9b0:	d0aa      	beq.n	f908 <_printf_i+0x12c>
    f9b2:	6823      	ldr	r3, [r4, #0]
    f9b4:	079b      	lsls	r3, r3, #30
    f9b6:	d413      	bmi.n	f9e0 <_printf_i+0x204>
    f9b8:	68e0      	ldr	r0, [r4, #12]
    f9ba:	9b03      	ldr	r3, [sp, #12]
    f9bc:	4298      	cmp	r0, r3
    f9be:	bfb8      	it	lt
    f9c0:	4618      	movlt	r0, r3
    f9c2:	e7a3      	b.n	f90c <_printf_i+0x130>
    f9c4:	2301      	movs	r3, #1
    f9c6:	464a      	mov	r2, r9
    f9c8:	4639      	mov	r1, r7
    f9ca:	4630      	mov	r0, r6
    f9cc:	47c0      	blx	r8
    f9ce:	3001      	adds	r0, #1
    f9d0:	d09a      	beq.n	f908 <_printf_i+0x12c>
    f9d2:	3501      	adds	r5, #1
    f9d4:	68e3      	ldr	r3, [r4, #12]
    f9d6:	9a03      	ldr	r2, [sp, #12]
    f9d8:	1a9b      	subs	r3, r3, r2
    f9da:	42ab      	cmp	r3, r5
    f9dc:	dcf2      	bgt.n	f9c4 <_printf_i+0x1e8>
    f9de:	e7eb      	b.n	f9b8 <_printf_i+0x1dc>
    f9e0:	2500      	movs	r5, #0
    f9e2:	f104 0919 	add.w	r9, r4, #25
    f9e6:	e7f5      	b.n	f9d4 <_printf_i+0x1f8>
    f9e8:	2b00      	cmp	r3, #0
    f9ea:	d1ac      	bne.n	f946 <_printf_i+0x16a>
    f9ec:	7803      	ldrb	r3, [r0, #0]
    f9ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
    f9f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    f9f6:	e76c      	b.n	f8d2 <_printf_i+0xf6>
    f9f8:	00014e92 	.word	0x00014e92
    f9fc:	00014ea3 	.word	0x00014ea3

0000fa00 <_scanf_float>:
    fa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa04:	469a      	mov	sl, r3
    fa06:	688b      	ldr	r3, [r1, #8]
    fa08:	4616      	mov	r6, r2
    fa0a:	1e5a      	subs	r2, r3, #1
    fa0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
    fa10:	bf88      	it	hi
    fa12:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
    fa16:	b087      	sub	sp, #28
    fa18:	bf85      	ittet	hi
    fa1a:	189b      	addhi	r3, r3, r2
    fa1c:	9301      	strhi	r3, [sp, #4]
    fa1e:	2300      	movls	r3, #0
    fa20:	f240 135d 	movwhi	r3, #349	; 0x15d
    fa24:	4688      	mov	r8, r1
    fa26:	f04f 0b00 	mov.w	fp, #0
    fa2a:	bf8c      	ite	hi
    fa2c:	608b      	strhi	r3, [r1, #8]
    fa2e:	9301      	strls	r3, [sp, #4]
    fa30:	680b      	ldr	r3, [r1, #0]
    fa32:	4607      	mov	r7, r0
    fa34:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
    fa38:	f848 3b1c 	str.w	r3, [r8], #28
    fa3c:	460c      	mov	r4, r1
    fa3e:	4645      	mov	r5, r8
    fa40:	465a      	mov	r2, fp
    fa42:	46d9      	mov	r9, fp
    fa44:	e9cd bb03 	strd	fp, fp, [sp, #12]
    fa48:	f8cd b008 	str.w	fp, [sp, #8]
    fa4c:	68a1      	ldr	r1, [r4, #8]
    fa4e:	b181      	cbz	r1, fa72 <_scanf_float+0x72>
    fa50:	6833      	ldr	r3, [r6, #0]
    fa52:	781b      	ldrb	r3, [r3, #0]
    fa54:	2b49      	cmp	r3, #73	; 0x49
    fa56:	d071      	beq.n	fb3c <_scanf_float+0x13c>
    fa58:	d84d      	bhi.n	faf6 <_scanf_float+0xf6>
    fa5a:	2b39      	cmp	r3, #57	; 0x39
    fa5c:	d840      	bhi.n	fae0 <_scanf_float+0xe0>
    fa5e:	2b31      	cmp	r3, #49	; 0x31
    fa60:	f080 8088 	bcs.w	fb74 <_scanf_float+0x174>
    fa64:	2b2d      	cmp	r3, #45	; 0x2d
    fa66:	f000 8090 	beq.w	fb8a <_scanf_float+0x18a>
    fa6a:	d815      	bhi.n	fa98 <_scanf_float+0x98>
    fa6c:	2b2b      	cmp	r3, #43	; 0x2b
    fa6e:	f000 808c 	beq.w	fb8a <_scanf_float+0x18a>
    fa72:	f1b9 0f00 	cmp.w	r9, #0
    fa76:	d003      	beq.n	fa80 <_scanf_float+0x80>
    fa78:	6823      	ldr	r3, [r4, #0]
    fa7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    fa7e:	6023      	str	r3, [r4, #0]
    fa80:	3a01      	subs	r2, #1
    fa82:	2a01      	cmp	r2, #1
    fa84:	f200 80ea 	bhi.w	fc5c <_scanf_float+0x25c>
    fa88:	4545      	cmp	r5, r8
    fa8a:	f200 80dc 	bhi.w	fc46 <_scanf_float+0x246>
    fa8e:	2601      	movs	r6, #1
    fa90:	4630      	mov	r0, r6
    fa92:	b007      	add	sp, #28
    fa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa98:	2b2e      	cmp	r3, #46	; 0x2e
    fa9a:	f000 809f 	beq.w	fbdc <_scanf_float+0x1dc>
    fa9e:	2b30      	cmp	r3, #48	; 0x30
    faa0:	d1e7      	bne.n	fa72 <_scanf_float+0x72>
    faa2:	6820      	ldr	r0, [r4, #0]
    faa4:	f410 7f80 	tst.w	r0, #256	; 0x100
    faa8:	d064      	beq.n	fb74 <_scanf_float+0x174>
    faaa:	9b01      	ldr	r3, [sp, #4]
    faac:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    fab0:	6020      	str	r0, [r4, #0]
    fab2:	f109 0901 	add.w	r9, r9, #1
    fab6:	b11b      	cbz	r3, fac0 <_scanf_float+0xc0>
    fab8:	3b01      	subs	r3, #1
    faba:	3101      	adds	r1, #1
    fabc:	9301      	str	r3, [sp, #4]
    fabe:	60a1      	str	r1, [r4, #8]
    fac0:	68a3      	ldr	r3, [r4, #8]
    fac2:	3b01      	subs	r3, #1
    fac4:	60a3      	str	r3, [r4, #8]
    fac6:	6923      	ldr	r3, [r4, #16]
    fac8:	3301      	adds	r3, #1
    faca:	6123      	str	r3, [r4, #16]
    facc:	6873      	ldr	r3, [r6, #4]
    face:	3b01      	subs	r3, #1
    fad0:	2b00      	cmp	r3, #0
    fad2:	6073      	str	r3, [r6, #4]
    fad4:	f340 80ac 	ble.w	fc30 <_scanf_float+0x230>
    fad8:	6833      	ldr	r3, [r6, #0]
    fada:	3301      	adds	r3, #1
    fadc:	6033      	str	r3, [r6, #0]
    fade:	e7b5      	b.n	fa4c <_scanf_float+0x4c>
    fae0:	2b45      	cmp	r3, #69	; 0x45
    fae2:	f000 8085 	beq.w	fbf0 <_scanf_float+0x1f0>
    fae6:	2b46      	cmp	r3, #70	; 0x46
    fae8:	d06a      	beq.n	fbc0 <_scanf_float+0x1c0>
    faea:	2b41      	cmp	r3, #65	; 0x41
    faec:	d1c1      	bne.n	fa72 <_scanf_float+0x72>
    faee:	2a01      	cmp	r2, #1
    faf0:	d1bf      	bne.n	fa72 <_scanf_float+0x72>
    faf2:	2202      	movs	r2, #2
    faf4:	e046      	b.n	fb84 <_scanf_float+0x184>
    faf6:	2b65      	cmp	r3, #101	; 0x65
    faf8:	d07a      	beq.n	fbf0 <_scanf_float+0x1f0>
    fafa:	d818      	bhi.n	fb2e <_scanf_float+0x12e>
    fafc:	2b54      	cmp	r3, #84	; 0x54
    fafe:	d066      	beq.n	fbce <_scanf_float+0x1ce>
    fb00:	d811      	bhi.n	fb26 <_scanf_float+0x126>
    fb02:	2b4e      	cmp	r3, #78	; 0x4e
    fb04:	d1b5      	bne.n	fa72 <_scanf_float+0x72>
    fb06:	2a00      	cmp	r2, #0
    fb08:	d146      	bne.n	fb98 <_scanf_float+0x198>
    fb0a:	f1b9 0f00 	cmp.w	r9, #0
    fb0e:	d145      	bne.n	fb9c <_scanf_float+0x19c>
    fb10:	6821      	ldr	r1, [r4, #0]
    fb12:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
    fb16:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    fb1a:	d13f      	bne.n	fb9c <_scanf_float+0x19c>
    fb1c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
    fb20:	6021      	str	r1, [r4, #0]
    fb22:	2201      	movs	r2, #1
    fb24:	e02e      	b.n	fb84 <_scanf_float+0x184>
    fb26:	2b59      	cmp	r3, #89	; 0x59
    fb28:	d01e      	beq.n	fb68 <_scanf_float+0x168>
    fb2a:	2b61      	cmp	r3, #97	; 0x61
    fb2c:	e7de      	b.n	faec <_scanf_float+0xec>
    fb2e:	2b6e      	cmp	r3, #110	; 0x6e
    fb30:	d0e9      	beq.n	fb06 <_scanf_float+0x106>
    fb32:	d815      	bhi.n	fb60 <_scanf_float+0x160>
    fb34:	2b66      	cmp	r3, #102	; 0x66
    fb36:	d043      	beq.n	fbc0 <_scanf_float+0x1c0>
    fb38:	2b69      	cmp	r3, #105	; 0x69
    fb3a:	d19a      	bne.n	fa72 <_scanf_float+0x72>
    fb3c:	f1bb 0f00 	cmp.w	fp, #0
    fb40:	d138      	bne.n	fbb4 <_scanf_float+0x1b4>
    fb42:	f1b9 0f00 	cmp.w	r9, #0
    fb46:	d197      	bne.n	fa78 <_scanf_float+0x78>
    fb48:	6821      	ldr	r1, [r4, #0]
    fb4a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
    fb4e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    fb52:	d195      	bne.n	fa80 <_scanf_float+0x80>
    fb54:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
    fb58:	6021      	str	r1, [r4, #0]
    fb5a:	f04f 0b01 	mov.w	fp, #1
    fb5e:	e011      	b.n	fb84 <_scanf_float+0x184>
    fb60:	2b74      	cmp	r3, #116	; 0x74
    fb62:	d034      	beq.n	fbce <_scanf_float+0x1ce>
    fb64:	2b79      	cmp	r3, #121	; 0x79
    fb66:	d184      	bne.n	fa72 <_scanf_float+0x72>
    fb68:	f1bb 0f07 	cmp.w	fp, #7
    fb6c:	d181      	bne.n	fa72 <_scanf_float+0x72>
    fb6e:	f04f 0b08 	mov.w	fp, #8
    fb72:	e007      	b.n	fb84 <_scanf_float+0x184>
    fb74:	eb12 0f0b 	cmn.w	r2, fp
    fb78:	f47f af7b 	bne.w	fa72 <_scanf_float+0x72>
    fb7c:	6821      	ldr	r1, [r4, #0]
    fb7e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
    fb82:	6021      	str	r1, [r4, #0]
    fb84:	702b      	strb	r3, [r5, #0]
    fb86:	3501      	adds	r5, #1
    fb88:	e79a      	b.n	fac0 <_scanf_float+0xc0>
    fb8a:	6821      	ldr	r1, [r4, #0]
    fb8c:	0608      	lsls	r0, r1, #24
    fb8e:	f57f af70 	bpl.w	fa72 <_scanf_float+0x72>
    fb92:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    fb96:	e7f4      	b.n	fb82 <_scanf_float+0x182>
    fb98:	2a02      	cmp	r2, #2
    fb9a:	d047      	beq.n	fc2c <_scanf_float+0x22c>
    fb9c:	f1bb 0f01 	cmp.w	fp, #1
    fba0:	d003      	beq.n	fbaa <_scanf_float+0x1aa>
    fba2:	f1bb 0f04 	cmp.w	fp, #4
    fba6:	f47f af64 	bne.w	fa72 <_scanf_float+0x72>
    fbaa:	f10b 0b01 	add.w	fp, fp, #1
    fbae:	fa5f fb8b 	uxtb.w	fp, fp
    fbb2:	e7e7      	b.n	fb84 <_scanf_float+0x184>
    fbb4:	f1bb 0f03 	cmp.w	fp, #3
    fbb8:	d0f7      	beq.n	fbaa <_scanf_float+0x1aa>
    fbba:	f1bb 0f05 	cmp.w	fp, #5
    fbbe:	e7f2      	b.n	fba6 <_scanf_float+0x1a6>
    fbc0:	f1bb 0f02 	cmp.w	fp, #2
    fbc4:	f47f af55 	bne.w	fa72 <_scanf_float+0x72>
    fbc8:	f04f 0b03 	mov.w	fp, #3
    fbcc:	e7da      	b.n	fb84 <_scanf_float+0x184>
    fbce:	f1bb 0f06 	cmp.w	fp, #6
    fbd2:	f47f af4e 	bne.w	fa72 <_scanf_float+0x72>
    fbd6:	f04f 0b07 	mov.w	fp, #7
    fbda:	e7d3      	b.n	fb84 <_scanf_float+0x184>
    fbdc:	6821      	ldr	r1, [r4, #0]
    fbde:	0588      	lsls	r0, r1, #22
    fbe0:	f57f af47 	bpl.w	fa72 <_scanf_float+0x72>
    fbe4:	f421 7120 	bic.w	r1, r1, #640	; 0x280
    fbe8:	6021      	str	r1, [r4, #0]
    fbea:	f8cd 9008 	str.w	r9, [sp, #8]
    fbee:	e7c9      	b.n	fb84 <_scanf_float+0x184>
    fbf0:	6821      	ldr	r1, [r4, #0]
    fbf2:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
    fbf6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    fbfa:	d006      	beq.n	fc0a <_scanf_float+0x20a>
    fbfc:	0548      	lsls	r0, r1, #21
    fbfe:	f57f af38 	bpl.w	fa72 <_scanf_float+0x72>
    fc02:	f1b9 0f00 	cmp.w	r9, #0
    fc06:	f43f af3b 	beq.w	fa80 <_scanf_float+0x80>
    fc0a:	0588      	lsls	r0, r1, #22
    fc0c:	bf58      	it	pl
    fc0e:	9802      	ldrpl	r0, [sp, #8]
    fc10:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
    fc14:	bf58      	it	pl
    fc16:	eba9 0000 	subpl.w	r0, r9, r0
    fc1a:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
    fc1e:	bf58      	it	pl
    fc20:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
    fc24:	6021      	str	r1, [r4, #0]
    fc26:	f04f 0900 	mov.w	r9, #0
    fc2a:	e7ab      	b.n	fb84 <_scanf_float+0x184>
    fc2c:	2203      	movs	r2, #3
    fc2e:	e7a9      	b.n	fb84 <_scanf_float+0x184>
    fc30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    fc34:	4631      	mov	r1, r6
    fc36:	4638      	mov	r0, r7
    fc38:	9205      	str	r2, [sp, #20]
    fc3a:	4798      	blx	r3
    fc3c:	9a05      	ldr	r2, [sp, #20]
    fc3e:	2800      	cmp	r0, #0
    fc40:	f43f af04 	beq.w	fa4c <_scanf_float+0x4c>
    fc44:	e715      	b.n	fa72 <_scanf_float+0x72>
    fc46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    fc4a:	4632      	mov	r2, r6
    fc4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    fc50:	4638      	mov	r0, r7
    fc52:	4798      	blx	r3
    fc54:	6923      	ldr	r3, [r4, #16]
    fc56:	3b01      	subs	r3, #1
    fc58:	6123      	str	r3, [r4, #16]
    fc5a:	e715      	b.n	fa88 <_scanf_float+0x88>
    fc5c:	f10b 33ff 	add.w	r3, fp, #4294967295
    fc60:	2b06      	cmp	r3, #6
    fc62:	d80a      	bhi.n	fc7a <_scanf_float+0x27a>
    fc64:	f1bb 0f02 	cmp.w	fp, #2
    fc68:	d967      	bls.n	fd3a <_scanf_float+0x33a>
    fc6a:	f1ab 0b03 	sub.w	fp, fp, #3
    fc6e:	fa5f fb8b 	uxtb.w	fp, fp
    fc72:	eba5 0b0b 	sub.w	fp, r5, fp
    fc76:	455d      	cmp	r5, fp
    fc78:	d14a      	bne.n	fd10 <_scanf_float+0x310>
    fc7a:	6823      	ldr	r3, [r4, #0]
    fc7c:	05da      	lsls	r2, r3, #23
    fc7e:	d51f      	bpl.n	fcc0 <_scanf_float+0x2c0>
    fc80:	055b      	lsls	r3, r3, #21
    fc82:	d467      	bmi.n	fd54 <_scanf_float+0x354>
    fc84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    fc88:	6923      	ldr	r3, [r4, #16]
    fc8a:	2965      	cmp	r1, #101	; 0x65
    fc8c:	f103 33ff 	add.w	r3, r3, #4294967295
    fc90:	f105 3bff 	add.w	fp, r5, #4294967295
    fc94:	6123      	str	r3, [r4, #16]
    fc96:	d00d      	beq.n	fcb4 <_scanf_float+0x2b4>
    fc98:	2945      	cmp	r1, #69	; 0x45
    fc9a:	d00b      	beq.n	fcb4 <_scanf_float+0x2b4>
    fc9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    fca0:	4632      	mov	r2, r6
    fca2:	4638      	mov	r0, r7
    fca4:	4798      	blx	r3
    fca6:	6923      	ldr	r3, [r4, #16]
    fca8:	f815 1c02 	ldrb.w	r1, [r5, #-2]
    fcac:	3b01      	subs	r3, #1
    fcae:	f1a5 0b02 	sub.w	fp, r5, #2
    fcb2:	6123      	str	r3, [r4, #16]
    fcb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    fcb8:	4632      	mov	r2, r6
    fcba:	4638      	mov	r0, r7
    fcbc:	4798      	blx	r3
    fcbe:	465d      	mov	r5, fp
    fcc0:	6826      	ldr	r6, [r4, #0]
    fcc2:	f016 0610 	ands.w	r6, r6, #16
    fcc6:	d176      	bne.n	fdb6 <_scanf_float+0x3b6>
    fcc8:	702e      	strb	r6, [r5, #0]
    fcca:	6823      	ldr	r3, [r4, #0]
    fccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    fcd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    fcd4:	d141      	bne.n	fd5a <_scanf_float+0x35a>
    fcd6:	9b02      	ldr	r3, [sp, #8]
    fcd8:	eba9 0303 	sub.w	r3, r9, r3
    fcdc:	425a      	negs	r2, r3
    fcde:	2b00      	cmp	r3, #0
    fce0:	d148      	bne.n	fd74 <_scanf_float+0x374>
    fce2:	4641      	mov	r1, r8
    fce4:	2200      	movs	r2, #0
    fce6:	4638      	mov	r0, r7
    fce8:	f000 fec2 	bl	10a70 <_strtod_r>
    fcec:	6825      	ldr	r5, [r4, #0]
    fcee:	4680      	mov	r8, r0
    fcf0:	f015 0f02 	tst.w	r5, #2
    fcf4:	4689      	mov	r9, r1
    fcf6:	f8da 3000 	ldr.w	r3, [sl]
    fcfa:	d046      	beq.n	fd8a <_scanf_float+0x38a>
    fcfc:	1d1a      	adds	r2, r3, #4
    fcfe:	f8ca 2000 	str.w	r2, [sl]
    fd02:	681b      	ldr	r3, [r3, #0]
    fd04:	e9c3 8900 	strd	r8, r9, [r3]
    fd08:	68e3      	ldr	r3, [r4, #12]
    fd0a:	3301      	adds	r3, #1
    fd0c:	60e3      	str	r3, [r4, #12]
    fd0e:	e6bf      	b.n	fa90 <_scanf_float+0x90>
    fd10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    fd14:	4632      	mov	r2, r6
    fd16:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    fd1a:	4638      	mov	r0, r7
    fd1c:	4798      	blx	r3
    fd1e:	6923      	ldr	r3, [r4, #16]
    fd20:	3b01      	subs	r3, #1
    fd22:	6123      	str	r3, [r4, #16]
    fd24:	e7a7      	b.n	fc76 <_scanf_float+0x276>
    fd26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    fd2a:	4632      	mov	r2, r6
    fd2c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    fd30:	4638      	mov	r0, r7
    fd32:	4798      	blx	r3
    fd34:	6923      	ldr	r3, [r4, #16]
    fd36:	3b01      	subs	r3, #1
    fd38:	6123      	str	r3, [r4, #16]
    fd3a:	4545      	cmp	r5, r8
    fd3c:	d8f3      	bhi.n	fd26 <_scanf_float+0x326>
    fd3e:	e6a6      	b.n	fa8e <_scanf_float+0x8e>
    fd40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    fd44:	4632      	mov	r2, r6
    fd46:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    fd4a:	4638      	mov	r0, r7
    fd4c:	4798      	blx	r3
    fd4e:	6923      	ldr	r3, [r4, #16]
    fd50:	3b01      	subs	r3, #1
    fd52:	6123      	str	r3, [r4, #16]
    fd54:	4545      	cmp	r5, r8
    fd56:	d8f3      	bhi.n	fd40 <_scanf_float+0x340>
    fd58:	e699      	b.n	fa8e <_scanf_float+0x8e>
    fd5a:	9b03      	ldr	r3, [sp, #12]
    fd5c:	2b00      	cmp	r3, #0
    fd5e:	d0c0      	beq.n	fce2 <_scanf_float+0x2e2>
    fd60:	9904      	ldr	r1, [sp, #16]
    fd62:	230a      	movs	r3, #10
    fd64:	4632      	mov	r2, r6
    fd66:	3101      	adds	r1, #1
    fd68:	4638      	mov	r0, r7
    fd6a:	f000 ff0d 	bl	10b88 <_strtol_r>
    fd6e:	9b03      	ldr	r3, [sp, #12]
    fd70:	9d04      	ldr	r5, [sp, #16]
    fd72:	1ac2      	subs	r2, r0, r3
    fd74:	f204 136f 	addw	r3, r4, #367	; 0x16f
    fd78:	429d      	cmp	r5, r3
    fd7a:	bf28      	it	cs
    fd7c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
    fd80:	490e      	ldr	r1, [pc, #56]	; (fdbc <_scanf_float+0x3bc>)
    fd82:	4628      	mov	r0, r5
    fd84:	f000 f84c 	bl	fe20 <siprintf>
    fd88:	e7ab      	b.n	fce2 <_scanf_float+0x2e2>
    fd8a:	1d1f      	adds	r7, r3, #4
    fd8c:	f015 0504 	ands.w	r5, r5, #4
    fd90:	f8ca 7000 	str.w	r7, [sl]
    fd94:	d1b5      	bne.n	fd02 <_scanf_float+0x302>
    fd96:	681f      	ldr	r7, [r3, #0]
    fd98:	4602      	mov	r2, r0
    fd9a:	460b      	mov	r3, r1
    fd9c:	f004 f844 	bl	13e28 <__aeabi_dcmpun>
    fda0:	b120      	cbz	r0, fdac <_scanf_float+0x3ac>
    fda2:	4628      	mov	r0, r5
    fda4:	f000 f838 	bl	fe18 <nanf>
    fda8:	6038      	str	r0, [r7, #0]
    fdaa:	e7ad      	b.n	fd08 <_scanf_float+0x308>
    fdac:	4640      	mov	r0, r8
    fdae:	4649      	mov	r1, r9
    fdb0:	f004 f898 	bl	13ee4 <__aeabi_d2f>
    fdb4:	e7f8      	b.n	fda8 <_scanf_float+0x3a8>
    fdb6:	2600      	movs	r6, #0
    fdb8:	e66a      	b.n	fa90 <_scanf_float+0x90>
    fdba:	bf00      	nop
    fdbc:	00014eb4 	.word	0x00014eb4

0000fdc0 <iprintf>:
    fdc0:	b40f      	push	{r0, r1, r2, r3}
    fdc2:	4b0a      	ldr	r3, [pc, #40]	; (fdec <iprintf+0x2c>)
    fdc4:	b513      	push	{r0, r1, r4, lr}
    fdc6:	681c      	ldr	r4, [r3, #0]
    fdc8:	b124      	cbz	r4, fdd4 <iprintf+0x14>
    fdca:	69a3      	ldr	r3, [r4, #24]
    fdcc:	b913      	cbnz	r3, fdd4 <iprintf+0x14>
    fdce:	4620      	mov	r0, r4
    fdd0:	f001 fd6e 	bl	118b0 <__sinit>
    fdd4:	ab05      	add	r3, sp, #20
    fdd6:	9a04      	ldr	r2, [sp, #16]
    fdd8:	68a1      	ldr	r1, [r4, #8]
    fdda:	4620      	mov	r0, r4
    fddc:	9301      	str	r3, [sp, #4]
    fdde:	f002 ff87 	bl	12cf0 <_vfiprintf_r>
    fde2:	b002      	add	sp, #8
    fde4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fde8:	b004      	add	sp, #16
    fdea:	4770      	bx	lr
    fdec:	00025754 	.word	0x00025754

0000fdf0 <putchar>:
    fdf0:	b538      	push	{r3, r4, r5, lr}
    fdf2:	4b08      	ldr	r3, [pc, #32]	; (fe14 <putchar+0x24>)
    fdf4:	4605      	mov	r5, r0
    fdf6:	681c      	ldr	r4, [r3, #0]
    fdf8:	b124      	cbz	r4, fe04 <putchar+0x14>
    fdfa:	69a3      	ldr	r3, [r4, #24]
    fdfc:	b913      	cbnz	r3, fe04 <putchar+0x14>
    fdfe:	4620      	mov	r0, r4
    fe00:	f001 fd56 	bl	118b0 <__sinit>
    fe04:	68a2      	ldr	r2, [r4, #8]
    fe06:	4629      	mov	r1, r5
    fe08:	4620      	mov	r0, r4
    fe0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fe0e:	f003 b885 	b.w	12f1c <_putc_r>
    fe12:	bf00      	nop
    fe14:	00025754 	.word	0x00025754

0000fe18 <nanf>:
    fe18:	4800      	ldr	r0, [pc, #0]	; (fe1c <nanf+0x4>)
    fe1a:	4770      	bx	lr
    fe1c:	7fc00000 	.word	0x7fc00000

0000fe20 <siprintf>:
    fe20:	b40e      	push	{r1, r2, r3}
    fe22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fe26:	b500      	push	{lr}
    fe28:	b09c      	sub	sp, #112	; 0x70
    fe2a:	ab1d      	add	r3, sp, #116	; 0x74
    fe2c:	9002      	str	r0, [sp, #8]
    fe2e:	9006      	str	r0, [sp, #24]
    fe30:	9107      	str	r1, [sp, #28]
    fe32:	9104      	str	r1, [sp, #16]
    fe34:	4808      	ldr	r0, [pc, #32]	; (fe58 <siprintf+0x38>)
    fe36:	4909      	ldr	r1, [pc, #36]	; (fe5c <siprintf+0x3c>)
    fe38:	f853 2b04 	ldr.w	r2, [r3], #4
    fe3c:	9105      	str	r1, [sp, #20]
    fe3e:	6800      	ldr	r0, [r0, #0]
    fe40:	a902      	add	r1, sp, #8
    fe42:	9301      	str	r3, [sp, #4]
    fe44:	f002 fe34 	bl	12ab0 <_svfiprintf_r>
    fe48:	2200      	movs	r2, #0
    fe4a:	9b02      	ldr	r3, [sp, #8]
    fe4c:	701a      	strb	r2, [r3, #0]
    fe4e:	b01c      	add	sp, #112	; 0x70
    fe50:	f85d eb04 	ldr.w	lr, [sp], #4
    fe54:	b003      	add	sp, #12
    fe56:	4770      	bx	lr
    fe58:	00025754 	.word	0x00025754
    fe5c:	ffff0208 	.word	0xffff0208

0000fe60 <strlen>:
    fe60:	4603      	mov	r3, r0
    fe62:	f813 2b01 	ldrb.w	r2, [r3], #1
    fe66:	2a00      	cmp	r2, #0
    fe68:	d1fb      	bne.n	fe62 <strlen+0x2>
    fe6a:	1a18      	subs	r0, r3, r0
    fe6c:	3801      	subs	r0, #1
    fe6e:	4770      	bx	lr

0000fe70 <_strtod_l>:
    fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe74:	461f      	mov	r7, r3
    fe76:	2300      	movs	r3, #0
    fe78:	b0a1      	sub	sp, #132	; 0x84
    fe7a:	4683      	mov	fp, r0
    fe7c:	4638      	mov	r0, r7
    fe7e:	460e      	mov	r6, r1
    fe80:	9217      	str	r2, [sp, #92]	; 0x5c
    fe82:	931c      	str	r3, [sp, #112]	; 0x70
    fe84:	f002 f8c9 	bl	1201a <__localeconv_l>
    fe88:	4680      	mov	r8, r0
    fe8a:	6800      	ldr	r0, [r0, #0]
    fe8c:	f7ff ffe8 	bl	fe60 <strlen>
    fe90:	f04f 0900 	mov.w	r9, #0
    fe94:	4604      	mov	r4, r0
    fe96:	f04f 0a00 	mov.w	sl, #0
    fe9a:	961b      	str	r6, [sp, #108]	; 0x6c
    fe9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fe9e:	781a      	ldrb	r2, [r3, #0]
    fea0:	2a0d      	cmp	r2, #13
    fea2:	d832      	bhi.n	ff0a <_strtod_l+0x9a>
    fea4:	2a09      	cmp	r2, #9
    fea6:	d236      	bcs.n	ff16 <_strtod_l+0xa6>
    fea8:	2a00      	cmp	r2, #0
    feaa:	d03e      	beq.n	ff2a <_strtod_l+0xba>
    feac:	2300      	movs	r3, #0
    feae:	930d      	str	r3, [sp, #52]	; 0x34
    feb0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    feb2:	782b      	ldrb	r3, [r5, #0]
    feb4:	2b30      	cmp	r3, #48	; 0x30
    feb6:	f040 80ac 	bne.w	10012 <_strtod_l+0x1a2>
    feba:	786b      	ldrb	r3, [r5, #1]
    febc:	2b58      	cmp	r3, #88	; 0x58
    febe:	d001      	beq.n	fec4 <_strtod_l+0x54>
    fec0:	2b78      	cmp	r3, #120	; 0x78
    fec2:	d167      	bne.n	ff94 <_strtod_l+0x124>
    fec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fec6:	9702      	str	r7, [sp, #8]
    fec8:	9301      	str	r3, [sp, #4]
    feca:	ab1c      	add	r3, sp, #112	; 0x70
    fecc:	9300      	str	r3, [sp, #0]
    fece:	4a89      	ldr	r2, [pc, #548]	; (100f4 <_strtod_l+0x284>)
    fed0:	ab1d      	add	r3, sp, #116	; 0x74
    fed2:	a91b      	add	r1, sp, #108	; 0x6c
    fed4:	4658      	mov	r0, fp
    fed6:	f001 fdc5 	bl	11a64 <__gethex>
    feda:	f010 0407 	ands.w	r4, r0, #7
    fede:	4606      	mov	r6, r0
    fee0:	d005      	beq.n	feee <_strtod_l+0x7e>
    fee2:	2c06      	cmp	r4, #6
    fee4:	d12b      	bne.n	ff3e <_strtod_l+0xce>
    fee6:	2300      	movs	r3, #0
    fee8:	3501      	adds	r5, #1
    feea:	951b      	str	r5, [sp, #108]	; 0x6c
    feec:	930d      	str	r3, [sp, #52]	; 0x34
    feee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fef0:	2b00      	cmp	r3, #0
    fef2:	f040 85a6 	bne.w	10a42 <_strtod_l+0xbd2>
    fef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fef8:	b1e3      	cbz	r3, ff34 <_strtod_l+0xc4>
    fefa:	464a      	mov	r2, r9
    fefc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
    ff00:	4610      	mov	r0, r2
    ff02:	4619      	mov	r1, r3
    ff04:	b021      	add	sp, #132	; 0x84
    ff06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff0a:	2a2b      	cmp	r2, #43	; 0x2b
    ff0c:	d015      	beq.n	ff3a <_strtod_l+0xca>
    ff0e:	2a2d      	cmp	r2, #45	; 0x2d
    ff10:	d004      	beq.n	ff1c <_strtod_l+0xac>
    ff12:	2a20      	cmp	r2, #32
    ff14:	d1ca      	bne.n	feac <_strtod_l+0x3c>
    ff16:	3301      	adds	r3, #1
    ff18:	931b      	str	r3, [sp, #108]	; 0x6c
    ff1a:	e7bf      	b.n	fe9c <_strtod_l+0x2c>
    ff1c:	2201      	movs	r2, #1
    ff1e:	920d      	str	r2, [sp, #52]	; 0x34
    ff20:	1c5a      	adds	r2, r3, #1
    ff22:	921b      	str	r2, [sp, #108]	; 0x6c
    ff24:	785b      	ldrb	r3, [r3, #1]
    ff26:	2b00      	cmp	r3, #0
    ff28:	d1c2      	bne.n	feb0 <_strtod_l+0x40>
    ff2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ff2c:	961b      	str	r6, [sp, #108]	; 0x6c
    ff2e:	2b00      	cmp	r3, #0
    ff30:	f040 8585 	bne.w	10a3e <_strtod_l+0xbce>
    ff34:	464a      	mov	r2, r9
    ff36:	4653      	mov	r3, sl
    ff38:	e7e2      	b.n	ff00 <_strtod_l+0x90>
    ff3a:	2200      	movs	r2, #0
    ff3c:	e7ef      	b.n	ff1e <_strtod_l+0xae>
    ff3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ff40:	b13a      	cbz	r2, ff52 <_strtod_l+0xe2>
    ff42:	2135      	movs	r1, #53	; 0x35
    ff44:	a81e      	add	r0, sp, #120	; 0x78
    ff46:	f002 fc6a 	bl	1281e <__copybits>
    ff4a:	991c      	ldr	r1, [sp, #112]	; 0x70
    ff4c:	4658      	mov	r0, fp
    ff4e:	f002 f8dc 	bl	1210a <_Bfree>
    ff52:	3c01      	subs	r4, #1
    ff54:	2c04      	cmp	r4, #4
    ff56:	d806      	bhi.n	ff66 <_strtod_l+0xf6>
    ff58:	e8df f004 	tbb	[pc, r4]
    ff5c:	1714030a 	.word	0x1714030a
    ff60:	0a          	.byte	0x0a
    ff61:	00          	.byte	0x00
    ff62:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
    ff66:	0731      	lsls	r1, r6, #28
    ff68:	d5c1      	bpl.n	feee <_strtod_l+0x7e>
    ff6a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
    ff6e:	e7be      	b.n	feee <_strtod_l+0x7e>
    ff70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    ff72:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
    ff76:	f202 4233 	addw	r2, r2, #1075	; 0x433
    ff7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    ff7e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
    ff82:	e7f0      	b.n	ff66 <_strtod_l+0xf6>
    ff84:	f8df a170 	ldr.w	sl, [pc, #368]	; 100f8 <_strtod_l+0x288>
    ff88:	e7ed      	b.n	ff66 <_strtod_l+0xf6>
    ff8a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    ff8e:	f04f 39ff 	mov.w	r9, #4294967295
    ff92:	e7e8      	b.n	ff66 <_strtod_l+0xf6>
    ff94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ff96:	1c5a      	adds	r2, r3, #1
    ff98:	921b      	str	r2, [sp, #108]	; 0x6c
    ff9a:	785b      	ldrb	r3, [r3, #1]
    ff9c:	2b30      	cmp	r3, #48	; 0x30
    ff9e:	d0f9      	beq.n	ff94 <_strtod_l+0x124>
    ffa0:	2b00      	cmp	r3, #0
    ffa2:	d0a4      	beq.n	feee <_strtod_l+0x7e>
    ffa4:	2301      	movs	r3, #1
    ffa6:	2500      	movs	r5, #0
    ffa8:	220a      	movs	r2, #10
    ffaa:	9307      	str	r3, [sp, #28]
    ffac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ffae:	9506      	str	r5, [sp, #24]
    ffb0:	9308      	str	r3, [sp, #32]
    ffb2:	9504      	str	r5, [sp, #16]
    ffb4:	981b      	ldr	r0, [sp, #108]	; 0x6c
    ffb6:	7807      	ldrb	r7, [r0, #0]
    ffb8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
    ffbc:	b2d9      	uxtb	r1, r3
    ffbe:	2909      	cmp	r1, #9
    ffc0:	d929      	bls.n	10016 <_strtod_l+0x1a6>
    ffc2:	4622      	mov	r2, r4
    ffc4:	f8d8 1000 	ldr.w	r1, [r8]
    ffc8:	f003 f831 	bl	1302e <strncmp>
    ffcc:	2800      	cmp	r0, #0
    ffce:	d031      	beq.n	10034 <_strtod_l+0x1c4>
    ffd0:	2000      	movs	r0, #0
    ffd2:	463b      	mov	r3, r7
    ffd4:	4602      	mov	r2, r0
    ffd6:	9c04      	ldr	r4, [sp, #16]
    ffd8:	9005      	str	r0, [sp, #20]
    ffda:	2b65      	cmp	r3, #101	; 0x65
    ffdc:	d001      	beq.n	ffe2 <_strtod_l+0x172>
    ffde:	2b45      	cmp	r3, #69	; 0x45
    ffe0:	d114      	bne.n	1000c <_strtod_l+0x19c>
    ffe2:	b924      	cbnz	r4, ffee <_strtod_l+0x17e>
    ffe4:	b910      	cbnz	r0, ffec <_strtod_l+0x17c>
    ffe6:	9b07      	ldr	r3, [sp, #28]
    ffe8:	2b00      	cmp	r3, #0
    ffea:	d09e      	beq.n	ff2a <_strtod_l+0xba>
    ffec:	2400      	movs	r4, #0
    ffee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
    fff0:	1c73      	adds	r3, r6, #1
    fff2:	931b      	str	r3, [sp, #108]	; 0x6c
    fff4:	7873      	ldrb	r3, [r6, #1]
    fff6:	2b2b      	cmp	r3, #43	; 0x2b
    fff8:	d078      	beq.n	100ec <_strtod_l+0x27c>
    fffa:	2b2d      	cmp	r3, #45	; 0x2d
    fffc:	d070      	beq.n	100e0 <_strtod_l+0x270>
    fffe:	f04f 0c00 	mov.w	ip, #0
   10002:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
   10006:	2f09      	cmp	r7, #9
   10008:	d97c      	bls.n	10104 <_strtod_l+0x294>
   1000a:	961b      	str	r6, [sp, #108]	; 0x6c
   1000c:	f04f 0e00 	mov.w	lr, #0
   10010:	e09a      	b.n	10148 <_strtod_l+0x2d8>
   10012:	2300      	movs	r3, #0
   10014:	e7c7      	b.n	ffa6 <_strtod_l+0x136>
   10016:	9904      	ldr	r1, [sp, #16]
   10018:	3001      	adds	r0, #1
   1001a:	2908      	cmp	r1, #8
   1001c:	bfd7      	itett	le
   1001e:	9906      	ldrle	r1, [sp, #24]
   10020:	fb02 3505 	mlagt	r5, r2, r5, r3
   10024:	fb02 3301 	mlale	r3, r2, r1, r3
   10028:	9306      	strle	r3, [sp, #24]
   1002a:	9b04      	ldr	r3, [sp, #16]
   1002c:	901b      	str	r0, [sp, #108]	; 0x6c
   1002e:	3301      	adds	r3, #1
   10030:	9304      	str	r3, [sp, #16]
   10032:	e7bf      	b.n	ffb4 <_strtod_l+0x144>
   10034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10036:	191a      	adds	r2, r3, r4
   10038:	921b      	str	r2, [sp, #108]	; 0x6c
   1003a:	9a04      	ldr	r2, [sp, #16]
   1003c:	5d1b      	ldrb	r3, [r3, r4]
   1003e:	2a00      	cmp	r2, #0
   10040:	d037      	beq.n	100b2 <_strtod_l+0x242>
   10042:	4602      	mov	r2, r0
   10044:	9c04      	ldr	r4, [sp, #16]
   10046:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1004a:	2909      	cmp	r1, #9
   1004c:	d913      	bls.n	10076 <_strtod_l+0x206>
   1004e:	2101      	movs	r1, #1
   10050:	9105      	str	r1, [sp, #20]
   10052:	e7c2      	b.n	ffda <_strtod_l+0x16a>
   10054:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10056:	3001      	adds	r0, #1
   10058:	1c5a      	adds	r2, r3, #1
   1005a:	921b      	str	r2, [sp, #108]	; 0x6c
   1005c:	785b      	ldrb	r3, [r3, #1]
   1005e:	2b30      	cmp	r3, #48	; 0x30
   10060:	d0f8      	beq.n	10054 <_strtod_l+0x1e4>
   10062:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   10066:	2a08      	cmp	r2, #8
   10068:	f200 84f0 	bhi.w	10a4c <_strtod_l+0xbdc>
   1006c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1006e:	9208      	str	r2, [sp, #32]
   10070:	4602      	mov	r2, r0
   10072:	2000      	movs	r0, #0
   10074:	4604      	mov	r4, r0
   10076:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
   1007a:	f100 0101 	add.w	r1, r0, #1
   1007e:	d012      	beq.n	100a6 <_strtod_l+0x236>
   10080:	440a      	add	r2, r1
   10082:	270a      	movs	r7, #10
   10084:	4621      	mov	r1, r4
   10086:	eb00 0c04 	add.w	ip, r0, r4
   1008a:	458c      	cmp	ip, r1
   1008c:	d113      	bne.n	100b6 <_strtod_l+0x246>
   1008e:	1821      	adds	r1, r4, r0
   10090:	2908      	cmp	r1, #8
   10092:	f104 0401 	add.w	r4, r4, #1
   10096:	4404      	add	r4, r0
   10098:	dc19      	bgt.n	100ce <_strtod_l+0x25e>
   1009a:	210a      	movs	r1, #10
   1009c:	9b06      	ldr	r3, [sp, #24]
   1009e:	fb01 e303 	mla	r3, r1, r3, lr
   100a2:	9306      	str	r3, [sp, #24]
   100a4:	2100      	movs	r1, #0
   100a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   100a8:	1c58      	adds	r0, r3, #1
   100aa:	901b      	str	r0, [sp, #108]	; 0x6c
   100ac:	785b      	ldrb	r3, [r3, #1]
   100ae:	4608      	mov	r0, r1
   100b0:	e7c9      	b.n	10046 <_strtod_l+0x1d6>
   100b2:	9804      	ldr	r0, [sp, #16]
   100b4:	e7d3      	b.n	1005e <_strtod_l+0x1ee>
   100b6:	2908      	cmp	r1, #8
   100b8:	f101 0101 	add.w	r1, r1, #1
   100bc:	dc03      	bgt.n	100c6 <_strtod_l+0x256>
   100be:	9b06      	ldr	r3, [sp, #24]
   100c0:	437b      	muls	r3, r7
   100c2:	9306      	str	r3, [sp, #24]
   100c4:	e7e1      	b.n	1008a <_strtod_l+0x21a>
   100c6:	2910      	cmp	r1, #16
   100c8:	bfd8      	it	le
   100ca:	437d      	mulle	r5, r7
   100cc:	e7dd      	b.n	1008a <_strtod_l+0x21a>
   100ce:	2c10      	cmp	r4, #16
   100d0:	bfdc      	itt	le
   100d2:	210a      	movle	r1, #10
   100d4:	fb01 e505 	mlale	r5, r1, r5, lr
   100d8:	e7e4      	b.n	100a4 <_strtod_l+0x234>
   100da:	2301      	movs	r3, #1
   100dc:	9305      	str	r3, [sp, #20]
   100de:	e781      	b.n	ffe4 <_strtod_l+0x174>
   100e0:	f04f 0c01 	mov.w	ip, #1
   100e4:	1cb3      	adds	r3, r6, #2
   100e6:	931b      	str	r3, [sp, #108]	; 0x6c
   100e8:	78b3      	ldrb	r3, [r6, #2]
   100ea:	e78a      	b.n	10002 <_strtod_l+0x192>
   100ec:	f04f 0c00 	mov.w	ip, #0
   100f0:	e7f8      	b.n	100e4 <_strtod_l+0x274>
   100f2:	bf00      	nop
   100f4:	00014ebc 	.word	0x00014ebc
   100f8:	7ff00000 	.word	0x7ff00000
   100fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   100fe:	1c5f      	adds	r7, r3, #1
   10100:	971b      	str	r7, [sp, #108]	; 0x6c
   10102:	785b      	ldrb	r3, [r3, #1]
   10104:	2b30      	cmp	r3, #48	; 0x30
   10106:	d0f9      	beq.n	100fc <_strtod_l+0x28c>
   10108:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
   1010c:	2f08      	cmp	r7, #8
   1010e:	f63f af7d 	bhi.w	1000c <_strtod_l+0x19c>
   10112:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   10116:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10118:	9309      	str	r3, [sp, #36]	; 0x24
   1011a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1011c:	1c5f      	adds	r7, r3, #1
   1011e:	971b      	str	r7, [sp, #108]	; 0x6c
   10120:	785b      	ldrb	r3, [r3, #1]
   10122:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
   10126:	f1b8 0f09 	cmp.w	r8, #9
   1012a:	d937      	bls.n	1019c <_strtod_l+0x32c>
   1012c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1012e:	1a7f      	subs	r7, r7, r1
   10130:	2f08      	cmp	r7, #8
   10132:	f644 671f 	movw	r7, #19999	; 0x4e1f
   10136:	dc37      	bgt.n	101a8 <_strtod_l+0x338>
   10138:	45be      	cmp	lr, r7
   1013a:	bfa8      	it	ge
   1013c:	46be      	movge	lr, r7
   1013e:	f1bc 0f00 	cmp.w	ip, #0
   10142:	d001      	beq.n	10148 <_strtod_l+0x2d8>
   10144:	f1ce 0e00 	rsb	lr, lr, #0
   10148:	2c00      	cmp	r4, #0
   1014a:	d151      	bne.n	101f0 <_strtod_l+0x380>
   1014c:	2800      	cmp	r0, #0
   1014e:	f47f aece 	bne.w	feee <_strtod_l+0x7e>
   10152:	9a07      	ldr	r2, [sp, #28]
   10154:	2a00      	cmp	r2, #0
   10156:	f47f aeca 	bne.w	feee <_strtod_l+0x7e>
   1015a:	9a05      	ldr	r2, [sp, #20]
   1015c:	2a00      	cmp	r2, #0
   1015e:	f47f aee4 	bne.w	ff2a <_strtod_l+0xba>
   10162:	2b4e      	cmp	r3, #78	; 0x4e
   10164:	d027      	beq.n	101b6 <_strtod_l+0x346>
   10166:	dc21      	bgt.n	101ac <_strtod_l+0x33c>
   10168:	2b49      	cmp	r3, #73	; 0x49
   1016a:	f47f aede 	bne.w	ff2a <_strtod_l+0xba>
   1016e:	49a4      	ldr	r1, [pc, #656]	; (10400 <_strtod_l+0x590>)
   10170:	a81b      	add	r0, sp, #108	; 0x6c
   10172:	f001 feab 	bl	11ecc <__match>
   10176:	2800      	cmp	r0, #0
   10178:	f43f aed7 	beq.w	ff2a <_strtod_l+0xba>
   1017c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1017e:	49a1      	ldr	r1, [pc, #644]	; (10404 <_strtod_l+0x594>)
   10180:	3b01      	subs	r3, #1
   10182:	a81b      	add	r0, sp, #108	; 0x6c
   10184:	931b      	str	r3, [sp, #108]	; 0x6c
   10186:	f001 fea1 	bl	11ecc <__match>
   1018a:	b910      	cbnz	r0, 10192 <_strtod_l+0x322>
   1018c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1018e:	3301      	adds	r3, #1
   10190:	931b      	str	r3, [sp, #108]	; 0x6c
   10192:	f8df a284 	ldr.w	sl, [pc, #644]	; 10418 <_strtod_l+0x5a8>
   10196:	f04f 0900 	mov.w	r9, #0
   1019a:	e6a8      	b.n	feee <_strtod_l+0x7e>
   1019c:	210a      	movs	r1, #10
   1019e:	fb01 3e0e 	mla	lr, r1, lr, r3
   101a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   101a6:	e7b8      	b.n	1011a <_strtod_l+0x2aa>
   101a8:	46be      	mov	lr, r7
   101aa:	e7c8      	b.n	1013e <_strtod_l+0x2ce>
   101ac:	2b69      	cmp	r3, #105	; 0x69
   101ae:	d0de      	beq.n	1016e <_strtod_l+0x2fe>
   101b0:	2b6e      	cmp	r3, #110	; 0x6e
   101b2:	f47f aeba 	bne.w	ff2a <_strtod_l+0xba>
   101b6:	4994      	ldr	r1, [pc, #592]	; (10408 <_strtod_l+0x598>)
   101b8:	a81b      	add	r0, sp, #108	; 0x6c
   101ba:	f001 fe87 	bl	11ecc <__match>
   101be:	2800      	cmp	r0, #0
   101c0:	f43f aeb3 	beq.w	ff2a <_strtod_l+0xba>
   101c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   101c6:	781b      	ldrb	r3, [r3, #0]
   101c8:	2b28      	cmp	r3, #40	; 0x28
   101ca:	d10e      	bne.n	101ea <_strtod_l+0x37a>
   101cc:	aa1e      	add	r2, sp, #120	; 0x78
   101ce:	498f      	ldr	r1, [pc, #572]	; (1040c <_strtod_l+0x59c>)
   101d0:	a81b      	add	r0, sp, #108	; 0x6c
   101d2:	f001 fe8f 	bl	11ef4 <__hexnan>
   101d6:	2805      	cmp	r0, #5
   101d8:	d107      	bne.n	101ea <_strtod_l+0x37a>
   101da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   101dc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
   101e0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
   101e4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
   101e8:	e681      	b.n	feee <_strtod_l+0x7e>
   101ea:	f8df a234 	ldr.w	sl, [pc, #564]	; 10420 <_strtod_l+0x5b0>
   101ee:	e7d2      	b.n	10196 <_strtod_l+0x326>
   101f0:	ebae 0302 	sub.w	r3, lr, r2
   101f4:	9307      	str	r3, [sp, #28]
   101f6:	9b04      	ldr	r3, [sp, #16]
   101f8:	9806      	ldr	r0, [sp, #24]
   101fa:	2b00      	cmp	r3, #0
   101fc:	bf08      	it	eq
   101fe:	4623      	moveq	r3, r4
   10200:	2c10      	cmp	r4, #16
   10202:	9304      	str	r3, [sp, #16]
   10204:	46a0      	mov	r8, r4
   10206:	bfa8      	it	ge
   10208:	f04f 0810 	movge.w	r8, #16
   1020c:	f003 faf8 	bl	13800 <__aeabi_ui2d>
   10210:	2c09      	cmp	r4, #9
   10212:	4681      	mov	r9, r0
   10214:	468a      	mov	sl, r1
   10216:	dc13      	bgt.n	10240 <_strtod_l+0x3d0>
   10218:	9b07      	ldr	r3, [sp, #28]
   1021a:	2b00      	cmp	r3, #0
   1021c:	f43f ae67 	beq.w	feee <_strtod_l+0x7e>
   10220:	9b07      	ldr	r3, [sp, #28]
   10222:	dd7e      	ble.n	10322 <_strtod_l+0x4b2>
   10224:	2b16      	cmp	r3, #22
   10226:	dc65      	bgt.n	102f4 <_strtod_l+0x484>
   10228:	4a79      	ldr	r2, [pc, #484]	; (10410 <_strtod_l+0x5a0>)
   1022a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
   1022e:	464a      	mov	r2, r9
   10230:	e9de 0100 	ldrd	r0, r1, [lr]
   10234:	4653      	mov	r3, sl
   10236:	f003 fb5d 	bl	138f4 <__aeabi_dmul>
   1023a:	4681      	mov	r9, r0
   1023c:	468a      	mov	sl, r1
   1023e:	e656      	b.n	feee <_strtod_l+0x7e>
   10240:	4b73      	ldr	r3, [pc, #460]	; (10410 <_strtod_l+0x5a0>)
   10242:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   10246:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1024a:	f003 fb53 	bl	138f4 <__aeabi_dmul>
   1024e:	4606      	mov	r6, r0
   10250:	4628      	mov	r0, r5
   10252:	460f      	mov	r7, r1
   10254:	f003 fad4 	bl	13800 <__aeabi_ui2d>
   10258:	4602      	mov	r2, r0
   1025a:	460b      	mov	r3, r1
   1025c:	4630      	mov	r0, r6
   1025e:	4639      	mov	r1, r7
   10260:	f003 f992 	bl	13588 <__adddf3>
   10264:	2c0f      	cmp	r4, #15
   10266:	4681      	mov	r9, r0
   10268:	468a      	mov	sl, r1
   1026a:	ddd5      	ble.n	10218 <_strtod_l+0x3a8>
   1026c:	9b07      	ldr	r3, [sp, #28]
   1026e:	eba4 0808 	sub.w	r8, r4, r8
   10272:	4498      	add	r8, r3
   10274:	f1b8 0f00 	cmp.w	r8, #0
   10278:	f340 809a 	ble.w	103b0 <_strtod_l+0x540>
   1027c:	f018 030f 	ands.w	r3, r8, #15
   10280:	d00a      	beq.n	10298 <_strtod_l+0x428>
   10282:	4963      	ldr	r1, [pc, #396]	; (10410 <_strtod_l+0x5a0>)
   10284:	464a      	mov	r2, r9
   10286:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1028a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1028e:	4653      	mov	r3, sl
   10290:	f003 fb30 	bl	138f4 <__aeabi_dmul>
   10294:	4681      	mov	r9, r0
   10296:	468a      	mov	sl, r1
   10298:	f038 080f 	bics.w	r8, r8, #15
   1029c:	d077      	beq.n	1038e <_strtod_l+0x51e>
   1029e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   102a2:	dd4b      	ble.n	1033c <_strtod_l+0x4cc>
   102a4:	f04f 0800 	mov.w	r8, #0
   102a8:	f8cd 8010 	str.w	r8, [sp, #16]
   102ac:	f8cd 8020 	str.w	r8, [sp, #32]
   102b0:	f8cd 8018 	str.w	r8, [sp, #24]
   102b4:	2322      	movs	r3, #34	; 0x22
   102b6:	f04f 0900 	mov.w	r9, #0
   102ba:	f8df a15c 	ldr.w	sl, [pc, #348]	; 10418 <_strtod_l+0x5a8>
   102be:	f8cb 3000 	str.w	r3, [fp]
   102c2:	9b08      	ldr	r3, [sp, #32]
   102c4:	2b00      	cmp	r3, #0
   102c6:	f43f ae12 	beq.w	feee <_strtod_l+0x7e>
   102ca:	991c      	ldr	r1, [sp, #112]	; 0x70
   102cc:	4658      	mov	r0, fp
   102ce:	f001 ff1c 	bl	1210a <_Bfree>
   102d2:	9906      	ldr	r1, [sp, #24]
   102d4:	4658      	mov	r0, fp
   102d6:	f001 ff18 	bl	1210a <_Bfree>
   102da:	9904      	ldr	r1, [sp, #16]
   102dc:	4658      	mov	r0, fp
   102de:	f001 ff14 	bl	1210a <_Bfree>
   102e2:	9908      	ldr	r1, [sp, #32]
   102e4:	4658      	mov	r0, fp
   102e6:	f001 ff10 	bl	1210a <_Bfree>
   102ea:	4641      	mov	r1, r8
   102ec:	4658      	mov	r0, fp
   102ee:	f001 ff0c 	bl	1210a <_Bfree>
   102f2:	e5fc      	b.n	feee <_strtod_l+0x7e>
   102f4:	9a07      	ldr	r2, [sp, #28]
   102f6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
   102fa:	4293      	cmp	r3, r2
   102fc:	dbb6      	blt.n	1026c <_strtod_l+0x3fc>
   102fe:	4d44      	ldr	r5, [pc, #272]	; (10410 <_strtod_l+0x5a0>)
   10300:	f1c4 040f 	rsb	r4, r4, #15
   10304:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
   10308:	464a      	mov	r2, r9
   1030a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1030e:	4653      	mov	r3, sl
   10310:	f003 faf0 	bl	138f4 <__aeabi_dmul>
   10314:	9b07      	ldr	r3, [sp, #28]
   10316:	1b1c      	subs	r4, r3, r4
   10318:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1031c:	e9d5 2300 	ldrd	r2, r3, [r5]
   10320:	e789      	b.n	10236 <_strtod_l+0x3c6>
   10322:	f113 0f16 	cmn.w	r3, #22
   10326:	dba1      	blt.n	1026c <_strtod_l+0x3fc>
   10328:	4a39      	ldr	r2, [pc, #228]	; (10410 <_strtod_l+0x5a0>)
   1032a:	4648      	mov	r0, r9
   1032c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
   10330:	e9d2 2300 	ldrd	r2, r3, [r2]
   10334:	4651      	mov	r1, sl
   10336:	f003 fc07 	bl	13b48 <__aeabi_ddiv>
   1033a:	e77e      	b.n	1023a <_strtod_l+0x3ca>
   1033c:	2300      	movs	r3, #0
   1033e:	4648      	mov	r0, r9
   10340:	4651      	mov	r1, sl
   10342:	461d      	mov	r5, r3
   10344:	4e33      	ldr	r6, [pc, #204]	; (10414 <_strtod_l+0x5a4>)
   10346:	ea4f 1828 	mov.w	r8, r8, asr #4
   1034a:	f1b8 0f01 	cmp.w	r8, #1
   1034e:	dc21      	bgt.n	10394 <_strtod_l+0x524>
   10350:	b10b      	cbz	r3, 10356 <_strtod_l+0x4e6>
   10352:	4681      	mov	r9, r0
   10354:	468a      	mov	sl, r1
   10356:	4b2f      	ldr	r3, [pc, #188]	; (10414 <_strtod_l+0x5a4>)
   10358:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
   1035c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   10360:	464a      	mov	r2, r9
   10362:	e9d5 0100 	ldrd	r0, r1, [r5]
   10366:	4653      	mov	r3, sl
   10368:	f003 fac4 	bl	138f4 <__aeabi_dmul>
   1036c:	4b2a      	ldr	r3, [pc, #168]	; (10418 <_strtod_l+0x5a8>)
   1036e:	460a      	mov	r2, r1
   10370:	400b      	ands	r3, r1
   10372:	492a      	ldr	r1, [pc, #168]	; (1041c <_strtod_l+0x5ac>)
   10374:	4681      	mov	r9, r0
   10376:	428b      	cmp	r3, r1
   10378:	d894      	bhi.n	102a4 <_strtod_l+0x434>
   1037a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1037e:	428b      	cmp	r3, r1
   10380:	bf86      	itte	hi
   10382:	f04f 39ff 	movhi.w	r9, #4294967295
   10386:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 10424 <_strtod_l+0x5b4>
   1038a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
   1038e:	2300      	movs	r3, #0
   10390:	9305      	str	r3, [sp, #20]
   10392:	e07b      	b.n	1048c <_strtod_l+0x61c>
   10394:	f018 0f01 	tst.w	r8, #1
   10398:	d006      	beq.n	103a8 <_strtod_l+0x538>
   1039a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   1039e:	e9d3 2300 	ldrd	r2, r3, [r3]
   103a2:	f003 faa7 	bl	138f4 <__aeabi_dmul>
   103a6:	2301      	movs	r3, #1
   103a8:	3501      	adds	r5, #1
   103aa:	ea4f 0868 	mov.w	r8, r8, asr #1
   103ae:	e7cc      	b.n	1034a <_strtod_l+0x4da>
   103b0:	d0ed      	beq.n	1038e <_strtod_l+0x51e>
   103b2:	f1c8 0800 	rsb	r8, r8, #0
   103b6:	f018 020f 	ands.w	r2, r8, #15
   103ba:	d00a      	beq.n	103d2 <_strtod_l+0x562>
   103bc:	4b14      	ldr	r3, [pc, #80]	; (10410 <_strtod_l+0x5a0>)
   103be:	4648      	mov	r0, r9
   103c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   103c4:	4651      	mov	r1, sl
   103c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   103ca:	f003 fbbd 	bl	13b48 <__aeabi_ddiv>
   103ce:	4681      	mov	r9, r0
   103d0:	468a      	mov	sl, r1
   103d2:	ea5f 1828 	movs.w	r8, r8, asr #4
   103d6:	d0da      	beq.n	1038e <_strtod_l+0x51e>
   103d8:	f1b8 0f1f 	cmp.w	r8, #31
   103dc:	dd24      	ble.n	10428 <_strtod_l+0x5b8>
   103de:	f04f 0800 	mov.w	r8, #0
   103e2:	f8cd 8010 	str.w	r8, [sp, #16]
   103e6:	f8cd 8020 	str.w	r8, [sp, #32]
   103ea:	f8cd 8018 	str.w	r8, [sp, #24]
   103ee:	2322      	movs	r3, #34	; 0x22
   103f0:	f04f 0900 	mov.w	r9, #0
   103f4:	f04f 0a00 	mov.w	sl, #0
   103f8:	f8cb 3000 	str.w	r3, [fp]
   103fc:	e761      	b.n	102c2 <_strtod_l+0x452>
   103fe:	bf00      	nop
   10400:	00014e85 	.word	0x00014e85
   10404:	00014f13 	.word	0x00014f13
   10408:	00014e8d 	.word	0x00014e8d
   1040c:	00014ed0 	.word	0x00014ed0
   10410:	00014fb8 	.word	0x00014fb8
   10414:	00014f90 	.word	0x00014f90
   10418:	7ff00000 	.word	0x7ff00000
   1041c:	7ca00000 	.word	0x7ca00000
   10420:	fff80000 	.word	0xfff80000
   10424:	7fefffff 	.word	0x7fefffff
   10428:	f018 0310 	ands.w	r3, r8, #16
   1042c:	bf18      	it	ne
   1042e:	236a      	movne	r3, #106	; 0x6a
   10430:	4648      	mov	r0, r9
   10432:	9305      	str	r3, [sp, #20]
   10434:	4651      	mov	r1, sl
   10436:	2300      	movs	r3, #0
   10438:	4da1      	ldr	r5, [pc, #644]	; (106c0 <_strtod_l+0x850>)
   1043a:	f1b8 0f00 	cmp.w	r8, #0
   1043e:	f300 8113 	bgt.w	10668 <_strtod_l+0x7f8>
   10442:	b10b      	cbz	r3, 10448 <_strtod_l+0x5d8>
   10444:	4681      	mov	r9, r0
   10446:	468a      	mov	sl, r1
   10448:	9b05      	ldr	r3, [sp, #20]
   1044a:	b1bb      	cbz	r3, 1047c <_strtod_l+0x60c>
   1044c:	f3ca 530a 	ubfx	r3, sl, #20, #11
   10450:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   10454:	2b00      	cmp	r3, #0
   10456:	4651      	mov	r1, sl
   10458:	dd10      	ble.n	1047c <_strtod_l+0x60c>
   1045a:	2b1f      	cmp	r3, #31
   1045c:	f340 8110 	ble.w	10680 <_strtod_l+0x810>
   10460:	2b34      	cmp	r3, #52	; 0x34
   10462:	bfd8      	it	le
   10464:	f04f 32ff 	movle.w	r2, #4294967295
   10468:	f04f 0900 	mov.w	r9, #0
   1046c:	bfcf      	iteee	gt
   1046e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
   10472:	3b20      	suble	r3, #32
   10474:	fa02 f303 	lslle.w	r3, r2, r3
   10478:	ea03 0a01 	andle.w	sl, r3, r1
   1047c:	2200      	movs	r2, #0
   1047e:	2300      	movs	r3, #0
   10480:	4648      	mov	r0, r9
   10482:	4651      	mov	r1, sl
   10484:	f003 fc9e 	bl	13dc4 <__aeabi_dcmpeq>
   10488:	2800      	cmp	r0, #0
   1048a:	d1a8      	bne.n	103de <_strtod_l+0x56e>
   1048c:	9b06      	ldr	r3, [sp, #24]
   1048e:	9a04      	ldr	r2, [sp, #16]
   10490:	9300      	str	r3, [sp, #0]
   10492:	9908      	ldr	r1, [sp, #32]
   10494:	4623      	mov	r3, r4
   10496:	4658      	mov	r0, fp
   10498:	f001 fe89 	bl	121ae <__s2b>
   1049c:	9008      	str	r0, [sp, #32]
   1049e:	2800      	cmp	r0, #0
   104a0:	f43f af00 	beq.w	102a4 <_strtod_l+0x434>
   104a4:	9a07      	ldr	r2, [sp, #28]
   104a6:	9b07      	ldr	r3, [sp, #28]
   104a8:	2a00      	cmp	r2, #0
   104aa:	f1c3 0300 	rsb	r3, r3, #0
   104ae:	bfa8      	it	ge
   104b0:	2300      	movge	r3, #0
   104b2:	f04f 0800 	mov.w	r8, #0
   104b6:	930e      	str	r3, [sp, #56]	; 0x38
   104b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   104bc:	9316      	str	r3, [sp, #88]	; 0x58
   104be:	f8cd 8010 	str.w	r8, [sp, #16]
   104c2:	9b08      	ldr	r3, [sp, #32]
   104c4:	4658      	mov	r0, fp
   104c6:	6859      	ldr	r1, [r3, #4]
   104c8:	f001 fdeb 	bl	120a2 <_Balloc>
   104cc:	9006      	str	r0, [sp, #24]
   104ce:	2800      	cmp	r0, #0
   104d0:	f43f aef0 	beq.w	102b4 <_strtod_l+0x444>
   104d4:	9b08      	ldr	r3, [sp, #32]
   104d6:	300c      	adds	r0, #12
   104d8:	691a      	ldr	r2, [r3, #16]
   104da:	f103 010c 	add.w	r1, r3, #12
   104de:	3202      	adds	r2, #2
   104e0:	0092      	lsls	r2, r2, #2
   104e2:	f001 fdd3 	bl	1208c <memcpy>
   104e6:	ab1e      	add	r3, sp, #120	; 0x78
   104e8:	9301      	str	r3, [sp, #4]
   104ea:	ab1d      	add	r3, sp, #116	; 0x74
   104ec:	9300      	str	r3, [sp, #0]
   104ee:	464a      	mov	r2, r9
   104f0:	4653      	mov	r3, sl
   104f2:	4658      	mov	r0, fp
   104f4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
   104f8:	f002 f914 	bl	12724 <__d2b>
   104fc:	901c      	str	r0, [sp, #112]	; 0x70
   104fe:	2800      	cmp	r0, #0
   10500:	f43f aed8 	beq.w	102b4 <_strtod_l+0x444>
   10504:	2101      	movs	r1, #1
   10506:	4658      	mov	r0, fp
   10508:	f001 fedd 	bl	122c6 <__i2b>
   1050c:	9004      	str	r0, [sp, #16]
   1050e:	4603      	mov	r3, r0
   10510:	2800      	cmp	r0, #0
   10512:	f43f aecf 	beq.w	102b4 <_strtod_l+0x444>
   10516:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   10518:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1051a:	2d00      	cmp	r5, #0
   1051c:	bfab      	itete	ge
   1051e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
   10520:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
   10522:	18ee      	addge	r6, r5, r3
   10524:	1b5c      	sublt	r4, r3, r5
   10526:	9b05      	ldr	r3, [sp, #20]
   10528:	bfa8      	it	ge
   1052a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
   1052c:	eba5 0503 	sub.w	r5, r5, r3
   10530:	4415      	add	r5, r2
   10532:	4b64      	ldr	r3, [pc, #400]	; (106c4 <_strtod_l+0x854>)
   10534:	f105 35ff 	add.w	r5, r5, #4294967295
   10538:	bfb8      	it	lt
   1053a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
   1053c:	429d      	cmp	r5, r3
   1053e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   10542:	f280 80af 	bge.w	106a4 <_strtod_l+0x834>
   10546:	1b5b      	subs	r3, r3, r5
   10548:	2b1f      	cmp	r3, #31
   1054a:	eba2 0203 	sub.w	r2, r2, r3
   1054e:	f04f 0701 	mov.w	r7, #1
   10552:	f300 809c 	bgt.w	1068e <_strtod_l+0x81e>
   10556:	2500      	movs	r5, #0
   10558:	fa07 f303 	lsl.w	r3, r7, r3
   1055c:	930f      	str	r3, [sp, #60]	; 0x3c
   1055e:	18b7      	adds	r7, r6, r2
   10560:	9b05      	ldr	r3, [sp, #20]
   10562:	42be      	cmp	r6, r7
   10564:	4414      	add	r4, r2
   10566:	441c      	add	r4, r3
   10568:	4633      	mov	r3, r6
   1056a:	bfa8      	it	ge
   1056c:	463b      	movge	r3, r7
   1056e:	42a3      	cmp	r3, r4
   10570:	bfa8      	it	ge
   10572:	4623      	movge	r3, r4
   10574:	2b00      	cmp	r3, #0
   10576:	bfc2      	ittt	gt
   10578:	1aff      	subgt	r7, r7, r3
   1057a:	1ae4      	subgt	r4, r4, r3
   1057c:	1af6      	subgt	r6, r6, r3
   1057e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10580:	b1bb      	cbz	r3, 105b2 <_strtod_l+0x742>
   10582:	461a      	mov	r2, r3
   10584:	9904      	ldr	r1, [sp, #16]
   10586:	4658      	mov	r0, fp
   10588:	f001 ff3c 	bl	12404 <__pow5mult>
   1058c:	9004      	str	r0, [sp, #16]
   1058e:	2800      	cmp	r0, #0
   10590:	f43f ae90 	beq.w	102b4 <_strtod_l+0x444>
   10594:	4601      	mov	r1, r0
   10596:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10598:	4658      	mov	r0, fp
   1059a:	f001 fe9d 	bl	122d8 <__multiply>
   1059e:	9009      	str	r0, [sp, #36]	; 0x24
   105a0:	2800      	cmp	r0, #0
   105a2:	f43f ae87 	beq.w	102b4 <_strtod_l+0x444>
   105a6:	991c      	ldr	r1, [sp, #112]	; 0x70
   105a8:	4658      	mov	r0, fp
   105aa:	f001 fdae 	bl	1210a <_Bfree>
   105ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   105b0:	931c      	str	r3, [sp, #112]	; 0x70
   105b2:	2f00      	cmp	r7, #0
   105b4:	dc7a      	bgt.n	106ac <_strtod_l+0x83c>
   105b6:	9b07      	ldr	r3, [sp, #28]
   105b8:	2b00      	cmp	r3, #0
   105ba:	dd08      	ble.n	105ce <_strtod_l+0x75e>
   105bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   105be:	9906      	ldr	r1, [sp, #24]
   105c0:	4658      	mov	r0, fp
   105c2:	f001 ff1f 	bl	12404 <__pow5mult>
   105c6:	9006      	str	r0, [sp, #24]
   105c8:	2800      	cmp	r0, #0
   105ca:	f43f ae73 	beq.w	102b4 <_strtod_l+0x444>
   105ce:	2c00      	cmp	r4, #0
   105d0:	dd08      	ble.n	105e4 <_strtod_l+0x774>
   105d2:	4622      	mov	r2, r4
   105d4:	9906      	ldr	r1, [sp, #24]
   105d6:	4658      	mov	r0, fp
   105d8:	f001 ff62 	bl	124a0 <__lshift>
   105dc:	9006      	str	r0, [sp, #24]
   105de:	2800      	cmp	r0, #0
   105e0:	f43f ae68 	beq.w	102b4 <_strtod_l+0x444>
   105e4:	2e00      	cmp	r6, #0
   105e6:	dd08      	ble.n	105fa <_strtod_l+0x78a>
   105e8:	4632      	mov	r2, r6
   105ea:	9904      	ldr	r1, [sp, #16]
   105ec:	4658      	mov	r0, fp
   105ee:	f001 ff57 	bl	124a0 <__lshift>
   105f2:	9004      	str	r0, [sp, #16]
   105f4:	2800      	cmp	r0, #0
   105f6:	f43f ae5d 	beq.w	102b4 <_strtod_l+0x444>
   105fa:	9a06      	ldr	r2, [sp, #24]
   105fc:	991c      	ldr	r1, [sp, #112]	; 0x70
   105fe:	4658      	mov	r0, fp
   10600:	f001 ffbc 	bl	1257c <__mdiff>
   10604:	4680      	mov	r8, r0
   10606:	2800      	cmp	r0, #0
   10608:	f43f ae54 	beq.w	102b4 <_strtod_l+0x444>
   1060c:	2400      	movs	r4, #0
   1060e:	68c3      	ldr	r3, [r0, #12]
   10610:	9904      	ldr	r1, [sp, #16]
   10612:	60c4      	str	r4, [r0, #12]
   10614:	930c      	str	r3, [sp, #48]	; 0x30
   10616:	f001 ff97 	bl	12548 <__mcmp>
   1061a:	42a0      	cmp	r0, r4
   1061c:	da54      	bge.n	106c8 <_strtod_l+0x858>
   1061e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10620:	b9f3      	cbnz	r3, 10660 <_strtod_l+0x7f0>
   10622:	f1b9 0f00 	cmp.w	r9, #0
   10626:	d11b      	bne.n	10660 <_strtod_l+0x7f0>
   10628:	f3ca 0313 	ubfx	r3, sl, #0, #20
   1062c:	b9c3      	cbnz	r3, 10660 <_strtod_l+0x7f0>
   1062e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   10632:	0d1b      	lsrs	r3, r3, #20
   10634:	051b      	lsls	r3, r3, #20
   10636:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1063a:	d911      	bls.n	10660 <_strtod_l+0x7f0>
   1063c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   10640:	b91b      	cbnz	r3, 1064a <_strtod_l+0x7da>
   10642:	f8d8 3010 	ldr.w	r3, [r8, #16]
   10646:	2b01      	cmp	r3, #1
   10648:	dd0a      	ble.n	10660 <_strtod_l+0x7f0>
   1064a:	4641      	mov	r1, r8
   1064c:	2201      	movs	r2, #1
   1064e:	4658      	mov	r0, fp
   10650:	f001 ff26 	bl	124a0 <__lshift>
   10654:	9904      	ldr	r1, [sp, #16]
   10656:	4680      	mov	r8, r0
   10658:	f001 ff76 	bl	12548 <__mcmp>
   1065c:	2800      	cmp	r0, #0
   1065e:	dc68      	bgt.n	10732 <_strtod_l+0x8c2>
   10660:	9b05      	ldr	r3, [sp, #20]
   10662:	2b00      	cmp	r3, #0
   10664:	d172      	bne.n	1074c <_strtod_l+0x8dc>
   10666:	e630      	b.n	102ca <_strtod_l+0x45a>
   10668:	f018 0f01 	tst.w	r8, #1
   1066c:	d004      	beq.n	10678 <_strtod_l+0x808>
   1066e:	e9d5 2300 	ldrd	r2, r3, [r5]
   10672:	f003 f93f 	bl	138f4 <__aeabi_dmul>
   10676:	2301      	movs	r3, #1
   10678:	ea4f 0868 	mov.w	r8, r8, asr #1
   1067c:	3508      	adds	r5, #8
   1067e:	e6dc      	b.n	1043a <_strtod_l+0x5ca>
   10680:	f04f 32ff 	mov.w	r2, #4294967295
   10684:	fa02 f303 	lsl.w	r3, r2, r3
   10688:	ea03 0909 	and.w	r9, r3, r9
   1068c:	e6f6      	b.n	1047c <_strtod_l+0x60c>
   1068e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
   10692:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
   10696:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
   1069a:	35e2      	adds	r5, #226	; 0xe2
   1069c:	fa07 f505 	lsl.w	r5, r7, r5
   106a0:	970f      	str	r7, [sp, #60]	; 0x3c
   106a2:	e75c      	b.n	1055e <_strtod_l+0x6ee>
   106a4:	2301      	movs	r3, #1
   106a6:	2500      	movs	r5, #0
   106a8:	930f      	str	r3, [sp, #60]	; 0x3c
   106aa:	e758      	b.n	1055e <_strtod_l+0x6ee>
   106ac:	463a      	mov	r2, r7
   106ae:	991c      	ldr	r1, [sp, #112]	; 0x70
   106b0:	4658      	mov	r0, fp
   106b2:	f001 fef5 	bl	124a0 <__lshift>
   106b6:	901c      	str	r0, [sp, #112]	; 0x70
   106b8:	2800      	cmp	r0, #0
   106ba:	f47f af7c 	bne.w	105b6 <_strtod_l+0x746>
   106be:	e5f9      	b.n	102b4 <_strtod_l+0x444>
   106c0:	00014ee8 	.word	0x00014ee8
   106c4:	fffffc02 	.word	0xfffffc02
   106c8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   106cc:	f040 8089 	bne.w	107e2 <_strtod_l+0x972>
   106d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   106d2:	f3ca 0313 	ubfx	r3, sl, #0, #20
   106d6:	b342      	cbz	r2, 1072a <_strtod_l+0x8ba>
   106d8:	4aaf      	ldr	r2, [pc, #700]	; (10998 <_strtod_l+0xb28>)
   106da:	4293      	cmp	r3, r2
   106dc:	d156      	bne.n	1078c <_strtod_l+0x91c>
   106de:	9b05      	ldr	r3, [sp, #20]
   106e0:	4648      	mov	r0, r9
   106e2:	b1eb      	cbz	r3, 10720 <_strtod_l+0x8b0>
   106e4:	4653      	mov	r3, sl
   106e6:	4aad      	ldr	r2, [pc, #692]	; (1099c <_strtod_l+0xb2c>)
   106e8:	f04f 31ff 	mov.w	r1, #4294967295
   106ec:	401a      	ands	r2, r3
   106ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   106f2:	d818      	bhi.n	10726 <_strtod_l+0x8b6>
   106f4:	0d12      	lsrs	r2, r2, #20
   106f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   106fa:	fa01 f303 	lsl.w	r3, r1, r3
   106fe:	4298      	cmp	r0, r3
   10700:	d144      	bne.n	1078c <_strtod_l+0x91c>
   10702:	4ba7      	ldr	r3, [pc, #668]	; (109a0 <_strtod_l+0xb30>)
   10704:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10706:	429a      	cmp	r2, r3
   10708:	d102      	bne.n	10710 <_strtod_l+0x8a0>
   1070a:	3001      	adds	r0, #1
   1070c:	f43f add2 	beq.w	102b4 <_strtod_l+0x444>
   10710:	4ba2      	ldr	r3, [pc, #648]	; (1099c <_strtod_l+0xb2c>)
   10712:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10714:	f04f 0900 	mov.w	r9, #0
   10718:	401a      	ands	r2, r3
   1071a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
   1071e:	e79f      	b.n	10660 <_strtod_l+0x7f0>
   10720:	f04f 33ff 	mov.w	r3, #4294967295
   10724:	e7eb      	b.n	106fe <_strtod_l+0x88e>
   10726:	460b      	mov	r3, r1
   10728:	e7e9      	b.n	106fe <_strtod_l+0x88e>
   1072a:	bb7b      	cbnz	r3, 1078c <_strtod_l+0x91c>
   1072c:	f1b9 0f00 	cmp.w	r9, #0
   10730:	d12c      	bne.n	1078c <_strtod_l+0x91c>
   10732:	9905      	ldr	r1, [sp, #20]
   10734:	4653      	mov	r3, sl
   10736:	4a99      	ldr	r2, [pc, #612]	; (1099c <_strtod_l+0xb2c>)
   10738:	b1f1      	cbz	r1, 10778 <_strtod_l+0x908>
   1073a:	ea02 010a 	and.w	r1, r2, sl
   1073e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   10742:	dc19      	bgt.n	10778 <_strtod_l+0x908>
   10744:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   10748:	f77f ae51 	ble.w	103ee <_strtod_l+0x57e>
   1074c:	2300      	movs	r3, #0
   1074e:	4a95      	ldr	r2, [pc, #596]	; (109a4 <_strtod_l+0xb34>)
   10750:	4648      	mov	r0, r9
   10752:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
   10756:	4651      	mov	r1, sl
   10758:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1075c:	f003 f8ca 	bl	138f4 <__aeabi_dmul>
   10760:	4681      	mov	r9, r0
   10762:	468a      	mov	sl, r1
   10764:	2900      	cmp	r1, #0
   10766:	f47f adb0 	bne.w	102ca <_strtod_l+0x45a>
   1076a:	2800      	cmp	r0, #0
   1076c:	f47f adad 	bne.w	102ca <_strtod_l+0x45a>
   10770:	2322      	movs	r3, #34	; 0x22
   10772:	f8cb 3000 	str.w	r3, [fp]
   10776:	e5a8      	b.n	102ca <_strtod_l+0x45a>
   10778:	4013      	ands	r3, r2
   1077a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1077e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
   10782:	f04f 39ff 	mov.w	r9, #4294967295
   10786:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
   1078a:	e769      	b.n	10660 <_strtod_l+0x7f0>
   1078c:	b19d      	cbz	r5, 107b6 <_strtod_l+0x946>
   1078e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10790:	421d      	tst	r5, r3
   10792:	f43f af65 	beq.w	10660 <_strtod_l+0x7f0>
   10796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10798:	9a05      	ldr	r2, [sp, #20]
   1079a:	4648      	mov	r0, r9
   1079c:	4651      	mov	r1, sl
   1079e:	b173      	cbz	r3, 107be <_strtod_l+0x94e>
   107a0:	f7f7 fc36 	bl	8010 <sulp>
   107a4:	4602      	mov	r2, r0
   107a6:	460b      	mov	r3, r1
   107a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   107ac:	f002 feec 	bl	13588 <__adddf3>
   107b0:	4681      	mov	r9, r0
   107b2:	468a      	mov	sl, r1
   107b4:	e754      	b.n	10660 <_strtod_l+0x7f0>
   107b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   107b8:	ea13 0f09 	tst.w	r3, r9
   107bc:	e7e9      	b.n	10792 <_strtod_l+0x922>
   107be:	f7f7 fc27 	bl	8010 <sulp>
   107c2:	4602      	mov	r2, r0
   107c4:	460b      	mov	r3, r1
   107c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   107ca:	f002 fedb 	bl	13584 <__aeabi_dsub>
   107ce:	2200      	movs	r2, #0
   107d0:	2300      	movs	r3, #0
   107d2:	4681      	mov	r9, r0
   107d4:	468a      	mov	sl, r1
   107d6:	f003 faf5 	bl	13dc4 <__aeabi_dcmpeq>
   107da:	2800      	cmp	r0, #0
   107dc:	f47f ae07 	bne.w	103ee <_strtod_l+0x57e>
   107e0:	e73e      	b.n	10660 <_strtod_l+0x7f0>
   107e2:	9904      	ldr	r1, [sp, #16]
   107e4:	4640      	mov	r0, r8
   107e6:	f001 ffec 	bl	127c2 <__ratio>
   107ea:	2200      	movs	r2, #0
   107ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   107f0:	4606      	mov	r6, r0
   107f2:	460f      	mov	r7, r1
   107f4:	f003 fafa 	bl	13dec <__aeabi_dcmple>
   107f8:	2800      	cmp	r0, #0
   107fa:	d075      	beq.n	108e8 <_strtod_l+0xa78>
   107fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   107fe:	2b00      	cmp	r3, #0
   10800:	d047      	beq.n	10892 <_strtod_l+0xa22>
   10802:	2600      	movs	r6, #0
   10804:	4f68      	ldr	r7, [pc, #416]	; (109a8 <_strtod_l+0xb38>)
   10806:	4d68      	ldr	r5, [pc, #416]	; (109a8 <_strtod_l+0xb38>)
   10808:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1080a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1080e:	0d1b      	lsrs	r3, r3, #20
   10810:	051b      	lsls	r3, r3, #20
   10812:	930f      	str	r3, [sp, #60]	; 0x3c
   10814:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10816:	4b65      	ldr	r3, [pc, #404]	; (109ac <_strtod_l+0xb3c>)
   10818:	429a      	cmp	r2, r3
   1081a:	f040 80cf 	bne.w	109bc <_strtod_l+0xb4c>
   1081e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10822:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   10826:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10828:	4648      	mov	r0, r9
   1082a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
   1082e:	4651      	mov	r1, sl
   10830:	f001 ff02 	bl	12638 <__ulp>
   10834:	4602      	mov	r2, r0
   10836:	460b      	mov	r3, r1
   10838:	4630      	mov	r0, r6
   1083a:	4639      	mov	r1, r7
   1083c:	f003 f85a 	bl	138f4 <__aeabi_dmul>
   10840:	464a      	mov	r2, r9
   10842:	4653      	mov	r3, sl
   10844:	f002 fea0 	bl	13588 <__adddf3>
   10848:	460b      	mov	r3, r1
   1084a:	4954      	ldr	r1, [pc, #336]	; (1099c <_strtod_l+0xb2c>)
   1084c:	4a58      	ldr	r2, [pc, #352]	; (109b0 <_strtod_l+0xb40>)
   1084e:	4019      	ands	r1, r3
   10850:	4291      	cmp	r1, r2
   10852:	4681      	mov	r9, r0
   10854:	d95e      	bls.n	10914 <_strtod_l+0xaa4>
   10856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10858:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1085c:	4293      	cmp	r3, r2
   1085e:	d103      	bne.n	10868 <_strtod_l+0x9f8>
   10860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10862:	3301      	adds	r3, #1
   10864:	f43f ad26 	beq.w	102b4 <_strtod_l+0x444>
   10868:	f04f 39ff 	mov.w	r9, #4294967295
   1086c:	f8df a130 	ldr.w	sl, [pc, #304]	; 109a0 <_strtod_l+0xb30>
   10870:	991c      	ldr	r1, [sp, #112]	; 0x70
   10872:	4658      	mov	r0, fp
   10874:	f001 fc49 	bl	1210a <_Bfree>
   10878:	9906      	ldr	r1, [sp, #24]
   1087a:	4658      	mov	r0, fp
   1087c:	f001 fc45 	bl	1210a <_Bfree>
   10880:	9904      	ldr	r1, [sp, #16]
   10882:	4658      	mov	r0, fp
   10884:	f001 fc41 	bl	1210a <_Bfree>
   10888:	4641      	mov	r1, r8
   1088a:	4658      	mov	r0, fp
   1088c:	f001 fc3d 	bl	1210a <_Bfree>
   10890:	e617      	b.n	104c2 <_strtod_l+0x652>
   10892:	f1b9 0f00 	cmp.w	r9, #0
   10896:	d119      	bne.n	108cc <_strtod_l+0xa5c>
   10898:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1089a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1089e:	b9e3      	cbnz	r3, 108da <_strtod_l+0xa6a>
   108a0:	2200      	movs	r2, #0
   108a2:	4b41      	ldr	r3, [pc, #260]	; (109a8 <_strtod_l+0xb38>)
   108a4:	4630      	mov	r0, r6
   108a6:	4639      	mov	r1, r7
   108a8:	f003 fa96 	bl	13dd8 <__aeabi_dcmplt>
   108ac:	b9c8      	cbnz	r0, 108e2 <_strtod_l+0xa72>
   108ae:	2200      	movs	r2, #0
   108b0:	4b40      	ldr	r3, [pc, #256]	; (109b4 <_strtod_l+0xb44>)
   108b2:	4630      	mov	r0, r6
   108b4:	4639      	mov	r1, r7
   108b6:	f003 f81d 	bl	138f4 <__aeabi_dmul>
   108ba:	4604      	mov	r4, r0
   108bc:	460d      	mov	r5, r1
   108be:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   108c2:	9418      	str	r4, [sp, #96]	; 0x60
   108c4:	9319      	str	r3, [sp, #100]	; 0x64
   108c6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
   108ca:	e79d      	b.n	10808 <_strtod_l+0x998>
   108cc:	f1b9 0f01 	cmp.w	r9, #1
   108d0:	d103      	bne.n	108da <_strtod_l+0xa6a>
   108d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   108d4:	2b00      	cmp	r3, #0
   108d6:	f43f ad8a 	beq.w	103ee <_strtod_l+0x57e>
   108da:	2600      	movs	r6, #0
   108dc:	4f36      	ldr	r7, [pc, #216]	; (109b8 <_strtod_l+0xb48>)
   108de:	2400      	movs	r4, #0
   108e0:	e791      	b.n	10806 <_strtod_l+0x996>
   108e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   108e4:	4d33      	ldr	r5, [pc, #204]	; (109b4 <_strtod_l+0xb44>)
   108e6:	e7ea      	b.n	108be <_strtod_l+0xa4e>
   108e8:	4b32      	ldr	r3, [pc, #200]	; (109b4 <_strtod_l+0xb44>)
   108ea:	2200      	movs	r2, #0
   108ec:	4630      	mov	r0, r6
   108ee:	4639      	mov	r1, r7
   108f0:	f003 f800 	bl	138f4 <__aeabi_dmul>
   108f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   108f6:	4604      	mov	r4, r0
   108f8:	460d      	mov	r5, r1
   108fa:	b933      	cbnz	r3, 1090a <_strtod_l+0xa9a>
   108fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   10900:	9010      	str	r0, [sp, #64]	; 0x40
   10902:	9311      	str	r3, [sp, #68]	; 0x44
   10904:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   10908:	e77e      	b.n	10808 <_strtod_l+0x998>
   1090a:	4602      	mov	r2, r0
   1090c:	460b      	mov	r3, r1
   1090e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   10912:	e7f7      	b.n	10904 <_strtod_l+0xa94>
   10914:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
   10918:	9b05      	ldr	r3, [sp, #20]
   1091a:	2b00      	cmp	r3, #0
   1091c:	d1a8      	bne.n	10870 <_strtod_l+0xa00>
   1091e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   10922:	0d1b      	lsrs	r3, r3, #20
   10924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10926:	051b      	lsls	r3, r3, #20
   10928:	429a      	cmp	r2, r3
   1092a:	4656      	mov	r6, sl
   1092c:	d1a0      	bne.n	10870 <_strtod_l+0xa00>
   1092e:	4629      	mov	r1, r5
   10930:	4620      	mov	r0, r4
   10932:	f003 fa8f 	bl	13e54 <__aeabi_d2iz>
   10936:	f002 ff73 	bl	13820 <__aeabi_i2d>
   1093a:	460b      	mov	r3, r1
   1093c:	4602      	mov	r2, r0
   1093e:	4629      	mov	r1, r5
   10940:	4620      	mov	r0, r4
   10942:	f002 fe1f 	bl	13584 <__aeabi_dsub>
   10946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10948:	4604      	mov	r4, r0
   1094a:	460d      	mov	r5, r1
   1094c:	b933      	cbnz	r3, 1095c <_strtod_l+0xaec>
   1094e:	f1b9 0f00 	cmp.w	r9, #0
   10952:	d103      	bne.n	1095c <_strtod_l+0xaec>
   10954:	f3ca 0613 	ubfx	r6, sl, #0, #20
   10958:	2e00      	cmp	r6, #0
   1095a:	d06a      	beq.n	10a32 <_strtod_l+0xbc2>
   1095c:	a30a      	add	r3, pc, #40	; (adr r3, 10988 <_strtod_l+0xb18>)
   1095e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10962:	4620      	mov	r0, r4
   10964:	4629      	mov	r1, r5
   10966:	f003 fa37 	bl	13dd8 <__aeabi_dcmplt>
   1096a:	2800      	cmp	r0, #0
   1096c:	f47f acad 	bne.w	102ca <_strtod_l+0x45a>
   10970:	a307      	add	r3, pc, #28	; (adr r3, 10990 <_strtod_l+0xb20>)
   10972:	e9d3 2300 	ldrd	r2, r3, [r3]
   10976:	4620      	mov	r0, r4
   10978:	4629      	mov	r1, r5
   1097a:	f003 fa4b 	bl	13e14 <__aeabi_dcmpgt>
   1097e:	2800      	cmp	r0, #0
   10980:	f43f af76 	beq.w	10870 <_strtod_l+0xa00>
   10984:	e4a1      	b.n	102ca <_strtod_l+0x45a>
   10986:	bf00      	nop
   10988:	94a03595 	.word	0x94a03595
   1098c:	3fdfffff 	.word	0x3fdfffff
   10990:	35afe535 	.word	0x35afe535
   10994:	3fe00000 	.word	0x3fe00000
   10998:	000fffff 	.word	0x000fffff
   1099c:	7ff00000 	.word	0x7ff00000
   109a0:	7fefffff 	.word	0x7fefffff
   109a4:	39500000 	.word	0x39500000
   109a8:	3ff00000 	.word	0x3ff00000
   109ac:	7fe00000 	.word	0x7fe00000
   109b0:	7c9fffff 	.word	0x7c9fffff
   109b4:	3fe00000 	.word	0x3fe00000
   109b8:	bff00000 	.word	0xbff00000
   109bc:	9b05      	ldr	r3, [sp, #20]
   109be:	b313      	cbz	r3, 10a06 <_strtod_l+0xb96>
   109c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   109c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   109c6:	d81e      	bhi.n	10a06 <_strtod_l+0xb96>
   109c8:	a325      	add	r3, pc, #148	; (adr r3, 10a60 <_strtod_l+0xbf0>)
   109ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   109ce:	4620      	mov	r0, r4
   109d0:	4629      	mov	r1, r5
   109d2:	f003 fa0b 	bl	13dec <__aeabi_dcmple>
   109d6:	b190      	cbz	r0, 109fe <_strtod_l+0xb8e>
   109d8:	4629      	mov	r1, r5
   109da:	4620      	mov	r0, r4
   109dc:	f003 fa62 	bl	13ea4 <__aeabi_d2uiz>
   109e0:	2800      	cmp	r0, #0
   109e2:	bf08      	it	eq
   109e4:	2001      	moveq	r0, #1
   109e6:	f002 ff0b 	bl	13800 <__aeabi_ui2d>
   109ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   109ec:	4604      	mov	r4, r0
   109ee:	460d      	mov	r5, r1
   109f0:	b9d3      	cbnz	r3, 10a28 <_strtod_l+0xbb8>
   109f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   109f6:	9012      	str	r0, [sp, #72]	; 0x48
   109f8:	9313      	str	r3, [sp, #76]	; 0x4c
   109fa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
   109fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10a00:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
   10a04:	1a9f      	subs	r7, r3, r2
   10a06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10a0a:	f001 fe15 	bl	12638 <__ulp>
   10a0e:	4602      	mov	r2, r0
   10a10:	460b      	mov	r3, r1
   10a12:	4630      	mov	r0, r6
   10a14:	4639      	mov	r1, r7
   10a16:	f002 ff6d 	bl	138f4 <__aeabi_dmul>
   10a1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10a1e:	f002 fdb3 	bl	13588 <__adddf3>
   10a22:	4681      	mov	r9, r0
   10a24:	468a      	mov	sl, r1
   10a26:	e777      	b.n	10918 <_strtod_l+0xaa8>
   10a28:	4602      	mov	r2, r0
   10a2a:	460b      	mov	r3, r1
   10a2c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   10a30:	e7e3      	b.n	109fa <_strtod_l+0xb8a>
   10a32:	a30d      	add	r3, pc, #52	; (adr r3, 10a68 <_strtod_l+0xbf8>)
   10a34:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a38:	f003 f9ce 	bl	13dd8 <__aeabi_dcmplt>
   10a3c:	e79f      	b.n	1097e <_strtod_l+0xb0e>
   10a3e:	2300      	movs	r3, #0
   10a40:	930d      	str	r3, [sp, #52]	; 0x34
   10a42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10a44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10a46:	6013      	str	r3, [r2, #0]
   10a48:	f7ff ba55 	b.w	fef6 <_strtod_l+0x86>
   10a4c:	2b65      	cmp	r3, #101	; 0x65
   10a4e:	f04f 0200 	mov.w	r2, #0
   10a52:	f43f ab42 	beq.w	100da <_strtod_l+0x26a>
   10a56:	2101      	movs	r1, #1
   10a58:	4614      	mov	r4, r2
   10a5a:	9105      	str	r1, [sp, #20]
   10a5c:	f7ff babf 	b.w	ffde <_strtod_l+0x16e>
   10a60:	ffc00000 	.word	0xffc00000
   10a64:	41dfffff 	.word	0x41dfffff
   10a68:	94a03595 	.word	0x94a03595
   10a6c:	3fcfffff 	.word	0x3fcfffff

00010a70 <_strtod_r>:
   10a70:	4b05      	ldr	r3, [pc, #20]	; (10a88 <_strtod_r+0x18>)
   10a72:	b410      	push	{r4}
   10a74:	681b      	ldr	r3, [r3, #0]
   10a76:	4c05      	ldr	r4, [pc, #20]	; (10a8c <_strtod_r+0x1c>)
   10a78:	6a1b      	ldr	r3, [r3, #32]
   10a7a:	2b00      	cmp	r3, #0
   10a7c:	bf08      	it	eq
   10a7e:	4623      	moveq	r3, r4
   10a80:	bc10      	pop	{r4}
   10a82:	f7ff b9f5 	b.w	fe70 <_strtod_l>
   10a86:	bf00      	nop
   10a88:	00025754 	.word	0x00025754
   10a8c:	000257b8 	.word	0x000257b8

00010a90 <_strtol_l.isra.0>:
   10a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a94:	4680      	mov	r8, r0
   10a96:	4689      	mov	r9, r1
   10a98:	4692      	mov	sl, r2
   10a9a:	461e      	mov	r6, r3
   10a9c:	460f      	mov	r7, r1
   10a9e:	463d      	mov	r5, r7
   10aa0:	9808      	ldr	r0, [sp, #32]
   10aa2:	f815 4b01 	ldrb.w	r4, [r5], #1
   10aa6:	f001 fab5 	bl	12014 <__locale_ctype_ptr_l>
   10aaa:	4420      	add	r0, r4
   10aac:	7843      	ldrb	r3, [r0, #1]
   10aae:	f013 0308 	ands.w	r3, r3, #8
   10ab2:	d132      	bne.n	10b1a <_strtol_l.isra.0+0x8a>
   10ab4:	2c2d      	cmp	r4, #45	; 0x2d
   10ab6:	d132      	bne.n	10b1e <_strtol_l.isra.0+0x8e>
   10ab8:	2201      	movs	r2, #1
   10aba:	787c      	ldrb	r4, [r7, #1]
   10abc:	1cbd      	adds	r5, r7, #2
   10abe:	2e00      	cmp	r6, #0
   10ac0:	d05d      	beq.n	10b7e <_strtol_l.isra.0+0xee>
   10ac2:	2e10      	cmp	r6, #16
   10ac4:	d109      	bne.n	10ada <_strtol_l.isra.0+0x4a>
   10ac6:	2c30      	cmp	r4, #48	; 0x30
   10ac8:	d107      	bne.n	10ada <_strtol_l.isra.0+0x4a>
   10aca:	782b      	ldrb	r3, [r5, #0]
   10acc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   10ad0:	2b58      	cmp	r3, #88	; 0x58
   10ad2:	d14f      	bne.n	10b74 <_strtol_l.isra.0+0xe4>
   10ad4:	2610      	movs	r6, #16
   10ad6:	786c      	ldrb	r4, [r5, #1]
   10ad8:	3502      	adds	r5, #2
   10ada:	2a00      	cmp	r2, #0
   10adc:	bf14      	ite	ne
   10ade:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
   10ae2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
   10ae6:	2700      	movs	r7, #0
   10ae8:	fbb1 fcf6 	udiv	ip, r1, r6
   10aec:	4638      	mov	r0, r7
   10aee:	fb06 1e1c 	mls	lr, r6, ip, r1
   10af2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10af6:	2b09      	cmp	r3, #9
   10af8:	d817      	bhi.n	10b2a <_strtol_l.isra.0+0x9a>
   10afa:	461c      	mov	r4, r3
   10afc:	42a6      	cmp	r6, r4
   10afe:	dd23      	ble.n	10b48 <_strtol_l.isra.0+0xb8>
   10b00:	1c7b      	adds	r3, r7, #1
   10b02:	d007      	beq.n	10b14 <_strtol_l.isra.0+0x84>
   10b04:	4584      	cmp	ip, r0
   10b06:	d31c      	bcc.n	10b42 <_strtol_l.isra.0+0xb2>
   10b08:	d101      	bne.n	10b0e <_strtol_l.isra.0+0x7e>
   10b0a:	45a6      	cmp	lr, r4
   10b0c:	db19      	blt.n	10b42 <_strtol_l.isra.0+0xb2>
   10b0e:	2701      	movs	r7, #1
   10b10:	fb00 4006 	mla	r0, r0, r6, r4
   10b14:	f815 4b01 	ldrb.w	r4, [r5], #1
   10b18:	e7eb      	b.n	10af2 <_strtol_l.isra.0+0x62>
   10b1a:	462f      	mov	r7, r5
   10b1c:	e7bf      	b.n	10a9e <_strtol_l.isra.0+0xe>
   10b1e:	2c2b      	cmp	r4, #43	; 0x2b
   10b20:	bf04      	itt	eq
   10b22:	1cbd      	addeq	r5, r7, #2
   10b24:	787c      	ldrbeq	r4, [r7, #1]
   10b26:	461a      	mov	r2, r3
   10b28:	e7c9      	b.n	10abe <_strtol_l.isra.0+0x2e>
   10b2a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   10b2e:	2b19      	cmp	r3, #25
   10b30:	d801      	bhi.n	10b36 <_strtol_l.isra.0+0xa6>
   10b32:	3c37      	subs	r4, #55	; 0x37
   10b34:	e7e2      	b.n	10afc <_strtol_l.isra.0+0x6c>
   10b36:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   10b3a:	2b19      	cmp	r3, #25
   10b3c:	d804      	bhi.n	10b48 <_strtol_l.isra.0+0xb8>
   10b3e:	3c57      	subs	r4, #87	; 0x57
   10b40:	e7dc      	b.n	10afc <_strtol_l.isra.0+0x6c>
   10b42:	f04f 37ff 	mov.w	r7, #4294967295
   10b46:	e7e5      	b.n	10b14 <_strtol_l.isra.0+0x84>
   10b48:	1c7b      	adds	r3, r7, #1
   10b4a:	d108      	bne.n	10b5e <_strtol_l.isra.0+0xce>
   10b4c:	2322      	movs	r3, #34	; 0x22
   10b4e:	4608      	mov	r0, r1
   10b50:	f8c8 3000 	str.w	r3, [r8]
   10b54:	f1ba 0f00 	cmp.w	sl, #0
   10b58:	d107      	bne.n	10b6a <_strtol_l.isra.0+0xda>
   10b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10b5e:	b102      	cbz	r2, 10b62 <_strtol_l.isra.0+0xd2>
   10b60:	4240      	negs	r0, r0
   10b62:	f1ba 0f00 	cmp.w	sl, #0
   10b66:	d0f8      	beq.n	10b5a <_strtol_l.isra.0+0xca>
   10b68:	b10f      	cbz	r7, 10b6e <_strtol_l.isra.0+0xde>
   10b6a:	f105 39ff 	add.w	r9, r5, #4294967295
   10b6e:	f8ca 9000 	str.w	r9, [sl]
   10b72:	e7f2      	b.n	10b5a <_strtol_l.isra.0+0xca>
   10b74:	2430      	movs	r4, #48	; 0x30
   10b76:	2e00      	cmp	r6, #0
   10b78:	d1af      	bne.n	10ada <_strtol_l.isra.0+0x4a>
   10b7a:	2608      	movs	r6, #8
   10b7c:	e7ad      	b.n	10ada <_strtol_l.isra.0+0x4a>
   10b7e:	2c30      	cmp	r4, #48	; 0x30
   10b80:	d0a3      	beq.n	10aca <_strtol_l.isra.0+0x3a>
   10b82:	260a      	movs	r6, #10
   10b84:	e7a9      	b.n	10ada <_strtol_l.isra.0+0x4a>
	...

00010b88 <_strtol_r>:
   10b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10b8a:	4c06      	ldr	r4, [pc, #24]	; (10ba4 <_strtol_r+0x1c>)
   10b8c:	4d06      	ldr	r5, [pc, #24]	; (10ba8 <_strtol_r+0x20>)
   10b8e:	6824      	ldr	r4, [r4, #0]
   10b90:	6a24      	ldr	r4, [r4, #32]
   10b92:	2c00      	cmp	r4, #0
   10b94:	bf08      	it	eq
   10b96:	462c      	moveq	r4, r5
   10b98:	9400      	str	r4, [sp, #0]
   10b9a:	f7ff ff79 	bl	10a90 <_strtol_l.isra.0>
   10b9e:	b003      	add	sp, #12
   10ba0:	bd30      	pop	{r4, r5, pc}
   10ba2:	bf00      	nop
   10ba4:	00025754 	.word	0x00025754
   10ba8:	000257b8 	.word	0x000257b8

00010bac <quorem>:
   10bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bb0:	6903      	ldr	r3, [r0, #16]
   10bb2:	690c      	ldr	r4, [r1, #16]
   10bb4:	4680      	mov	r8, r0
   10bb6:	42a3      	cmp	r3, r4
   10bb8:	f2c0 8084 	blt.w	10cc4 <quorem+0x118>
   10bbc:	3c01      	subs	r4, #1
   10bbe:	f101 0714 	add.w	r7, r1, #20
   10bc2:	f100 0614 	add.w	r6, r0, #20
   10bc6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   10bca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   10bce:	3501      	adds	r5, #1
   10bd0:	fbb0 f5f5 	udiv	r5, r0, r5
   10bd4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   10bd8:	eb06 030c 	add.w	r3, r6, ip
   10bdc:	eb07 090c 	add.w	r9, r7, ip
   10be0:	9301      	str	r3, [sp, #4]
   10be2:	b39d      	cbz	r5, 10c4c <quorem+0xa0>
   10be4:	f04f 0a00 	mov.w	sl, #0
   10be8:	4638      	mov	r0, r7
   10bea:	46b6      	mov	lr, r6
   10bec:	46d3      	mov	fp, sl
   10bee:	f850 2b04 	ldr.w	r2, [r0], #4
   10bf2:	b293      	uxth	r3, r2
   10bf4:	fb05 a303 	mla	r3, r5, r3, sl
   10bf8:	0c12      	lsrs	r2, r2, #16
   10bfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   10bfe:	fb05 a202 	mla	r2, r5, r2, sl
   10c02:	b29b      	uxth	r3, r3
   10c04:	ebab 0303 	sub.w	r3, fp, r3
   10c08:	f8de b000 	ldr.w	fp, [lr]
   10c0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   10c10:	fa1f fb8b 	uxth.w	fp, fp
   10c14:	445b      	add	r3, fp
   10c16:	fa1f fb82 	uxth.w	fp, r2
   10c1a:	f8de 2000 	ldr.w	r2, [lr]
   10c1e:	4581      	cmp	r9, r0
   10c20:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   10c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10c28:	b29b      	uxth	r3, r3
   10c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10c2e:	ea4f 4b22 	mov.w	fp, r2, asr #16
   10c32:	f84e 3b04 	str.w	r3, [lr], #4
   10c36:	d2da      	bcs.n	10bee <quorem+0x42>
   10c38:	f856 300c 	ldr.w	r3, [r6, ip]
   10c3c:	b933      	cbnz	r3, 10c4c <quorem+0xa0>
   10c3e:	9b01      	ldr	r3, [sp, #4]
   10c40:	3b04      	subs	r3, #4
   10c42:	429e      	cmp	r6, r3
   10c44:	461a      	mov	r2, r3
   10c46:	d331      	bcc.n	10cac <quorem+0x100>
   10c48:	f8c8 4010 	str.w	r4, [r8, #16]
   10c4c:	4640      	mov	r0, r8
   10c4e:	f001 fc7b 	bl	12548 <__mcmp>
   10c52:	2800      	cmp	r0, #0
   10c54:	db26      	blt.n	10ca4 <quorem+0xf8>
   10c56:	4630      	mov	r0, r6
   10c58:	f04f 0c00 	mov.w	ip, #0
   10c5c:	3501      	adds	r5, #1
   10c5e:	f857 1b04 	ldr.w	r1, [r7], #4
   10c62:	f8d0 e000 	ldr.w	lr, [r0]
   10c66:	b28b      	uxth	r3, r1
   10c68:	ebac 0303 	sub.w	r3, ip, r3
   10c6c:	fa1f f28e 	uxth.w	r2, lr
   10c70:	4413      	add	r3, r2
   10c72:	0c0a      	lsrs	r2, r1, #16
   10c74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   10c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10c7c:	b29b      	uxth	r3, r3
   10c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10c82:	45b9      	cmp	r9, r7
   10c84:	ea4f 4c22 	mov.w	ip, r2, asr #16
   10c88:	f840 3b04 	str.w	r3, [r0], #4
   10c8c:	d2e7      	bcs.n	10c5e <quorem+0xb2>
   10c8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   10c92:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   10c96:	b92a      	cbnz	r2, 10ca4 <quorem+0xf8>
   10c98:	3b04      	subs	r3, #4
   10c9a:	429e      	cmp	r6, r3
   10c9c:	461a      	mov	r2, r3
   10c9e:	d30b      	bcc.n	10cb8 <quorem+0x10c>
   10ca0:	f8c8 4010 	str.w	r4, [r8, #16]
   10ca4:	4628      	mov	r0, r5
   10ca6:	b003      	add	sp, #12
   10ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10cac:	6812      	ldr	r2, [r2, #0]
   10cae:	3b04      	subs	r3, #4
   10cb0:	2a00      	cmp	r2, #0
   10cb2:	d1c9      	bne.n	10c48 <quorem+0x9c>
   10cb4:	3c01      	subs	r4, #1
   10cb6:	e7c4      	b.n	10c42 <quorem+0x96>
   10cb8:	6812      	ldr	r2, [r2, #0]
   10cba:	3b04      	subs	r3, #4
   10cbc:	2a00      	cmp	r2, #0
   10cbe:	d1ef      	bne.n	10ca0 <quorem+0xf4>
   10cc0:	3c01      	subs	r4, #1
   10cc2:	e7ea      	b.n	10c9a <quorem+0xee>
   10cc4:	2000      	movs	r0, #0
   10cc6:	e7ee      	b.n	10ca6 <quorem+0xfa>

00010cc8 <_dtoa_r>:
   10cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ccc:	4616      	mov	r6, r2
   10cce:	461f      	mov	r7, r3
   10cd0:	6a45      	ldr	r5, [r0, #36]	; 0x24
   10cd2:	b095      	sub	sp, #84	; 0x54
   10cd4:	4604      	mov	r4, r0
   10cd6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
   10cda:	e9cd 6702 	strd	r6, r7, [sp, #8]
   10cde:	b93d      	cbnz	r5, 10cf0 <_dtoa_r+0x28>
   10ce0:	2010      	movs	r0, #16
   10ce2:	f001 f9ab 	bl	1203c <malloc>
   10ce6:	6260      	str	r0, [r4, #36]	; 0x24
   10ce8:	e9c0 5501 	strd	r5, r5, [r0, #4]
   10cec:	6005      	str	r5, [r0, #0]
   10cee:	60c5      	str	r5, [r0, #12]
   10cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10cf2:	6819      	ldr	r1, [r3, #0]
   10cf4:	b151      	cbz	r1, 10d0c <_dtoa_r+0x44>
   10cf6:	685a      	ldr	r2, [r3, #4]
   10cf8:	2301      	movs	r3, #1
   10cfa:	4093      	lsls	r3, r2
   10cfc:	604a      	str	r2, [r1, #4]
   10cfe:	608b      	str	r3, [r1, #8]
   10d00:	4620      	mov	r0, r4
   10d02:	f001 fa02 	bl	1210a <_Bfree>
   10d06:	2200      	movs	r2, #0
   10d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10d0a:	601a      	str	r2, [r3, #0]
   10d0c:	1e3b      	subs	r3, r7, #0
   10d0e:	bfaf      	iteee	ge
   10d10:	2300      	movge	r3, #0
   10d12:	2201      	movlt	r2, #1
   10d14:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   10d18:	9303      	strlt	r3, [sp, #12]
   10d1a:	bfac      	ite	ge
   10d1c:	f8c8 3000 	strge.w	r3, [r8]
   10d20:	f8c8 2000 	strlt.w	r2, [r8]
   10d24:	4bae      	ldr	r3, [pc, #696]	; (10fe0 <_dtoa_r+0x318>)
   10d26:	f8dd 800c 	ldr.w	r8, [sp, #12]
   10d2a:	ea33 0308 	bics.w	r3, r3, r8
   10d2e:	d11b      	bne.n	10d68 <_dtoa_r+0xa0>
   10d30:	f242 730f 	movw	r3, #9999	; 0x270f
   10d34:	9a20      	ldr	r2, [sp, #128]	; 0x80
   10d36:	6013      	str	r3, [r2, #0]
   10d38:	9b02      	ldr	r3, [sp, #8]
   10d3a:	b923      	cbnz	r3, 10d46 <_dtoa_r+0x7e>
   10d3c:	f3c8 0013 	ubfx	r0, r8, #0, #20
   10d40:	2800      	cmp	r0, #0
   10d42:	f000 8545 	beq.w	117d0 <_dtoa_r+0xb08>
   10d46:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10d48:	b953      	cbnz	r3, 10d60 <_dtoa_r+0x98>
   10d4a:	4ba6      	ldr	r3, [pc, #664]	; (10fe4 <_dtoa_r+0x31c>)
   10d4c:	e021      	b.n	10d92 <_dtoa_r+0xca>
   10d4e:	4ba6      	ldr	r3, [pc, #664]	; (10fe8 <_dtoa_r+0x320>)
   10d50:	9306      	str	r3, [sp, #24]
   10d52:	3308      	adds	r3, #8
   10d54:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10d56:	6013      	str	r3, [r2, #0]
   10d58:	9806      	ldr	r0, [sp, #24]
   10d5a:	b015      	add	sp, #84	; 0x54
   10d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d60:	4ba0      	ldr	r3, [pc, #640]	; (10fe4 <_dtoa_r+0x31c>)
   10d62:	9306      	str	r3, [sp, #24]
   10d64:	3303      	adds	r3, #3
   10d66:	e7f5      	b.n	10d54 <_dtoa_r+0x8c>
   10d68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   10d6c:	2200      	movs	r2, #0
   10d6e:	2300      	movs	r3, #0
   10d70:	4630      	mov	r0, r6
   10d72:	4639      	mov	r1, r7
   10d74:	f003 f826 	bl	13dc4 <__aeabi_dcmpeq>
   10d78:	4682      	mov	sl, r0
   10d7a:	b160      	cbz	r0, 10d96 <_dtoa_r+0xce>
   10d7c:	2301      	movs	r3, #1
   10d7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   10d80:	6013      	str	r3, [r2, #0]
   10d82:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10d84:	2b00      	cmp	r3, #0
   10d86:	f000 8520 	beq.w	117ca <_dtoa_r+0xb02>
   10d8a:	4b98      	ldr	r3, [pc, #608]	; (10fec <_dtoa_r+0x324>)
   10d8c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10d8e:	6013      	str	r3, [r2, #0]
   10d90:	3b01      	subs	r3, #1
   10d92:	9306      	str	r3, [sp, #24]
   10d94:	e7e0      	b.n	10d58 <_dtoa_r+0x90>
   10d96:	ab12      	add	r3, sp, #72	; 0x48
   10d98:	9301      	str	r3, [sp, #4]
   10d9a:	ab13      	add	r3, sp, #76	; 0x4c
   10d9c:	9300      	str	r3, [sp, #0]
   10d9e:	4632      	mov	r2, r6
   10da0:	463b      	mov	r3, r7
   10da2:	4620      	mov	r0, r4
   10da4:	f001 fcbe 	bl	12724 <__d2b>
   10da8:	f3c8 550a 	ubfx	r5, r8, #20, #11
   10dac:	4683      	mov	fp, r0
   10dae:	2d00      	cmp	r5, #0
   10db0:	d07d      	beq.n	10eae <_dtoa_r+0x1e6>
   10db2:	46b0      	mov	r8, r6
   10db4:	f3c7 0313 	ubfx	r3, r7, #0, #20
   10db8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
   10dbc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
   10dc0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   10dc4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   10dc8:	2200      	movs	r2, #0
   10dca:	4b89      	ldr	r3, [pc, #548]	; (10ff0 <_dtoa_r+0x328>)
   10dcc:	4640      	mov	r0, r8
   10dce:	4649      	mov	r1, r9
   10dd0:	f002 fbd8 	bl	13584 <__aeabi_dsub>
   10dd4:	a37c      	add	r3, pc, #496	; (adr r3, 10fc8 <_dtoa_r+0x300>)
   10dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   10dda:	f002 fd8b 	bl	138f4 <__aeabi_dmul>
   10dde:	a37c      	add	r3, pc, #496	; (adr r3, 10fd0 <_dtoa_r+0x308>)
   10de0:	e9d3 2300 	ldrd	r2, r3, [r3]
   10de4:	f002 fbd0 	bl	13588 <__adddf3>
   10de8:	4606      	mov	r6, r0
   10dea:	4628      	mov	r0, r5
   10dec:	460f      	mov	r7, r1
   10dee:	f002 fd17 	bl	13820 <__aeabi_i2d>
   10df2:	a379      	add	r3, pc, #484	; (adr r3, 10fd8 <_dtoa_r+0x310>)
   10df4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10df8:	f002 fd7c 	bl	138f4 <__aeabi_dmul>
   10dfc:	4602      	mov	r2, r0
   10dfe:	460b      	mov	r3, r1
   10e00:	4630      	mov	r0, r6
   10e02:	4639      	mov	r1, r7
   10e04:	f002 fbc0 	bl	13588 <__adddf3>
   10e08:	4606      	mov	r6, r0
   10e0a:	460f      	mov	r7, r1
   10e0c:	f003 f822 	bl	13e54 <__aeabi_d2iz>
   10e10:	2200      	movs	r2, #0
   10e12:	4682      	mov	sl, r0
   10e14:	2300      	movs	r3, #0
   10e16:	4630      	mov	r0, r6
   10e18:	4639      	mov	r1, r7
   10e1a:	f002 ffdd 	bl	13dd8 <__aeabi_dcmplt>
   10e1e:	b148      	cbz	r0, 10e34 <_dtoa_r+0x16c>
   10e20:	4650      	mov	r0, sl
   10e22:	f002 fcfd 	bl	13820 <__aeabi_i2d>
   10e26:	4632      	mov	r2, r6
   10e28:	463b      	mov	r3, r7
   10e2a:	f002 ffcb 	bl	13dc4 <__aeabi_dcmpeq>
   10e2e:	b908      	cbnz	r0, 10e34 <_dtoa_r+0x16c>
   10e30:	f10a 3aff 	add.w	sl, sl, #4294967295
   10e34:	f1ba 0f16 	cmp.w	sl, #22
   10e38:	d85a      	bhi.n	10ef0 <_dtoa_r+0x228>
   10e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10e3e:	496d      	ldr	r1, [pc, #436]	; (10ff4 <_dtoa_r+0x32c>)
   10e40:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   10e44:	e9d1 0100 	ldrd	r0, r1, [r1]
   10e48:	f002 ffe4 	bl	13e14 <__aeabi_dcmpgt>
   10e4c:	2800      	cmp	r0, #0
   10e4e:	d051      	beq.n	10ef4 <_dtoa_r+0x22c>
   10e50:	2300      	movs	r3, #0
   10e52:	f10a 3aff 	add.w	sl, sl, #4294967295
   10e56:	930d      	str	r3, [sp, #52]	; 0x34
   10e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10e5a:	1b5d      	subs	r5, r3, r5
   10e5c:	1e6b      	subs	r3, r5, #1
   10e5e:	9307      	str	r3, [sp, #28]
   10e60:	bf43      	ittte	mi
   10e62:	2300      	movmi	r3, #0
   10e64:	f1c5 0901 	rsbmi	r9, r5, #1
   10e68:	9307      	strmi	r3, [sp, #28]
   10e6a:	f04f 0900 	movpl.w	r9, #0
   10e6e:	f1ba 0f00 	cmp.w	sl, #0
   10e72:	db41      	blt.n	10ef8 <_dtoa_r+0x230>
   10e74:	9b07      	ldr	r3, [sp, #28]
   10e76:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   10e7a:	4453      	add	r3, sl
   10e7c:	9307      	str	r3, [sp, #28]
   10e7e:	2300      	movs	r3, #0
   10e80:	9308      	str	r3, [sp, #32]
   10e82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10e84:	2b09      	cmp	r3, #9
   10e86:	f200 808f 	bhi.w	10fa8 <_dtoa_r+0x2e0>
   10e8a:	2b05      	cmp	r3, #5
   10e8c:	bfc4      	itt	gt
   10e8e:	3b04      	subgt	r3, #4
   10e90:	931e      	strgt	r3, [sp, #120]	; 0x78
   10e92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10e94:	bfc8      	it	gt
   10e96:	2500      	movgt	r5, #0
   10e98:	f1a3 0302 	sub.w	r3, r3, #2
   10e9c:	bfd8      	it	le
   10e9e:	2501      	movle	r5, #1
   10ea0:	2b03      	cmp	r3, #3
   10ea2:	f200 808d 	bhi.w	10fc0 <_dtoa_r+0x2f8>
   10ea6:	e8df f003 	tbb	[pc, r3]
   10eaa:	7d7b      	.short	0x7d7b
   10eac:	6f2f      	.short	0x6f2f
   10eae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
   10eb2:	441d      	add	r5, r3
   10eb4:	f205 4032 	addw	r0, r5, #1074	; 0x432
   10eb8:	2820      	cmp	r0, #32
   10eba:	dd13      	ble.n	10ee4 <_dtoa_r+0x21c>
   10ebc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   10ec0:	9b02      	ldr	r3, [sp, #8]
   10ec2:	fa08 f800 	lsl.w	r8, r8, r0
   10ec6:	f205 4012 	addw	r0, r5, #1042	; 0x412
   10eca:	fa23 f000 	lsr.w	r0, r3, r0
   10ece:	ea48 0000 	orr.w	r0, r8, r0
   10ed2:	f002 fc95 	bl	13800 <__aeabi_ui2d>
   10ed6:	2301      	movs	r3, #1
   10ed8:	4680      	mov	r8, r0
   10eda:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
   10ede:	3d01      	subs	r5, #1
   10ee0:	9310      	str	r3, [sp, #64]	; 0x40
   10ee2:	e771      	b.n	10dc8 <_dtoa_r+0x100>
   10ee4:	9b02      	ldr	r3, [sp, #8]
   10ee6:	f1c0 0020 	rsb	r0, r0, #32
   10eea:	fa03 f000 	lsl.w	r0, r3, r0
   10eee:	e7f0      	b.n	10ed2 <_dtoa_r+0x20a>
   10ef0:	2301      	movs	r3, #1
   10ef2:	e7b0      	b.n	10e56 <_dtoa_r+0x18e>
   10ef4:	900d      	str	r0, [sp, #52]	; 0x34
   10ef6:	e7af      	b.n	10e58 <_dtoa_r+0x190>
   10ef8:	f1ca 0300 	rsb	r3, sl, #0
   10efc:	9308      	str	r3, [sp, #32]
   10efe:	2300      	movs	r3, #0
   10f00:	eba9 090a 	sub.w	r9, r9, sl
   10f04:	930c      	str	r3, [sp, #48]	; 0x30
   10f06:	e7bc      	b.n	10e82 <_dtoa_r+0x1ba>
   10f08:	2301      	movs	r3, #1
   10f0a:	9309      	str	r3, [sp, #36]	; 0x24
   10f0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10f0e:	2b00      	cmp	r3, #0
   10f10:	dd74      	ble.n	10ffc <_dtoa_r+0x334>
   10f12:	4698      	mov	r8, r3
   10f14:	9304      	str	r3, [sp, #16]
   10f16:	2200      	movs	r2, #0
   10f18:	6a66      	ldr	r6, [r4, #36]	; 0x24
   10f1a:	6072      	str	r2, [r6, #4]
   10f1c:	2204      	movs	r2, #4
   10f1e:	f102 0014 	add.w	r0, r2, #20
   10f22:	4298      	cmp	r0, r3
   10f24:	6871      	ldr	r1, [r6, #4]
   10f26:	d96e      	bls.n	11006 <_dtoa_r+0x33e>
   10f28:	4620      	mov	r0, r4
   10f2a:	f001 f8ba 	bl	120a2 <_Balloc>
   10f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10f30:	6030      	str	r0, [r6, #0]
   10f32:	681b      	ldr	r3, [r3, #0]
   10f34:	f1b8 0f0e 	cmp.w	r8, #14
   10f38:	9306      	str	r3, [sp, #24]
   10f3a:	f200 80ed 	bhi.w	11118 <_dtoa_r+0x450>
   10f3e:	2d00      	cmp	r5, #0
   10f40:	f000 80ea 	beq.w	11118 <_dtoa_r+0x450>
   10f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10f48:	f1ba 0f00 	cmp.w	sl, #0
   10f4c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   10f50:	dd77      	ble.n	11042 <_dtoa_r+0x37a>
   10f52:	4a28      	ldr	r2, [pc, #160]	; (10ff4 <_dtoa_r+0x32c>)
   10f54:	f00a 030f 	and.w	r3, sl, #15
   10f58:	ea4f 162a 	mov.w	r6, sl, asr #4
   10f5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   10f60:	06f0      	lsls	r0, r6, #27
   10f62:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   10f6a:	d568      	bpl.n	1103e <_dtoa_r+0x376>
   10f6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   10f70:	4b21      	ldr	r3, [pc, #132]	; (10ff8 <_dtoa_r+0x330>)
   10f72:	2503      	movs	r5, #3
   10f74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   10f78:	f002 fde6 	bl	13b48 <__aeabi_ddiv>
   10f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10f80:	f006 060f 	and.w	r6, r6, #15
   10f84:	4f1c      	ldr	r7, [pc, #112]	; (10ff8 <_dtoa_r+0x330>)
   10f86:	e04f      	b.n	11028 <_dtoa_r+0x360>
   10f88:	2301      	movs	r3, #1
   10f8a:	9309      	str	r3, [sp, #36]	; 0x24
   10f8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10f8e:	4453      	add	r3, sl
   10f90:	f103 0801 	add.w	r8, r3, #1
   10f94:	9304      	str	r3, [sp, #16]
   10f96:	4643      	mov	r3, r8
   10f98:	2b01      	cmp	r3, #1
   10f9a:	bfb8      	it	lt
   10f9c:	2301      	movlt	r3, #1
   10f9e:	e7ba      	b.n	10f16 <_dtoa_r+0x24e>
   10fa0:	2300      	movs	r3, #0
   10fa2:	e7b2      	b.n	10f0a <_dtoa_r+0x242>
   10fa4:	2300      	movs	r3, #0
   10fa6:	e7f0      	b.n	10f8a <_dtoa_r+0x2c2>
   10fa8:	2501      	movs	r5, #1
   10faa:	2300      	movs	r3, #0
   10fac:	9509      	str	r5, [sp, #36]	; 0x24
   10fae:	931e      	str	r3, [sp, #120]	; 0x78
   10fb0:	f04f 33ff 	mov.w	r3, #4294967295
   10fb4:	2200      	movs	r2, #0
   10fb6:	9304      	str	r3, [sp, #16]
   10fb8:	4698      	mov	r8, r3
   10fba:	2312      	movs	r3, #18
   10fbc:	921f      	str	r2, [sp, #124]	; 0x7c
   10fbe:	e7aa      	b.n	10f16 <_dtoa_r+0x24e>
   10fc0:	2301      	movs	r3, #1
   10fc2:	9309      	str	r3, [sp, #36]	; 0x24
   10fc4:	e7f4      	b.n	10fb0 <_dtoa_r+0x2e8>
   10fc6:	bf00      	nop
   10fc8:	636f4361 	.word	0x636f4361
   10fcc:	3fd287a7 	.word	0x3fd287a7
   10fd0:	8b60c8b3 	.word	0x8b60c8b3
   10fd4:	3fc68a28 	.word	0x3fc68a28
   10fd8:	509f79fb 	.word	0x509f79fb
   10fdc:	3fd34413 	.word	0x3fd34413
   10fe0:	7ff00000 	.word	0x7ff00000
   10fe4:	00014f19 	.word	0x00014f19
   10fe8:	00014f10 	.word	0x00014f10
   10fec:	00014e91 	.word	0x00014e91
   10ff0:	3ff80000 	.word	0x3ff80000
   10ff4:	00014fb8 	.word	0x00014fb8
   10ff8:	00014f90 	.word	0x00014f90
   10ffc:	2301      	movs	r3, #1
   10ffe:	9304      	str	r3, [sp, #16]
   11000:	4698      	mov	r8, r3
   11002:	461a      	mov	r2, r3
   11004:	e7da      	b.n	10fbc <_dtoa_r+0x2f4>
   11006:	3101      	adds	r1, #1
   11008:	6071      	str	r1, [r6, #4]
   1100a:	0052      	lsls	r2, r2, #1
   1100c:	e787      	b.n	10f1e <_dtoa_r+0x256>
   1100e:	07f1      	lsls	r1, r6, #31
   11010:	d508      	bpl.n	11024 <_dtoa_r+0x35c>
   11012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11016:	e9d7 2300 	ldrd	r2, r3, [r7]
   1101a:	f002 fc6b 	bl	138f4 <__aeabi_dmul>
   1101e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   11022:	3501      	adds	r5, #1
   11024:	1076      	asrs	r6, r6, #1
   11026:	3708      	adds	r7, #8
   11028:	2e00      	cmp	r6, #0
   1102a:	d1f0      	bne.n	1100e <_dtoa_r+0x346>
   1102c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   11030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11034:	f002 fd88 	bl	13b48 <__aeabi_ddiv>
   11038:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1103c:	e01b      	b.n	11076 <_dtoa_r+0x3ae>
   1103e:	2502      	movs	r5, #2
   11040:	e7a0      	b.n	10f84 <_dtoa_r+0x2bc>
   11042:	f000 80a4 	beq.w	1118e <_dtoa_r+0x4c6>
   11046:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1104a:	f1ca 0600 	rsb	r6, sl, #0
   1104e:	4ba0      	ldr	r3, [pc, #640]	; (112d0 <_dtoa_r+0x608>)
   11050:	f006 020f 	and.w	r2, r6, #15
   11054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11058:	e9d3 2300 	ldrd	r2, r3, [r3]
   1105c:	f002 fc4a 	bl	138f4 <__aeabi_dmul>
   11060:	2502      	movs	r5, #2
   11062:	2300      	movs	r3, #0
   11064:	e9cd 0102 	strd	r0, r1, [sp, #8]
   11068:	4f9a      	ldr	r7, [pc, #616]	; (112d4 <_dtoa_r+0x60c>)
   1106a:	1136      	asrs	r6, r6, #4
   1106c:	2e00      	cmp	r6, #0
   1106e:	f040 8083 	bne.w	11178 <_dtoa_r+0x4b0>
   11072:	2b00      	cmp	r3, #0
   11074:	d1e0      	bne.n	11038 <_dtoa_r+0x370>
   11076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11078:	2b00      	cmp	r3, #0
   1107a:	f000 808a 	beq.w	11192 <_dtoa_r+0x4ca>
   1107e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   11082:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   11086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1108a:	2200      	movs	r2, #0
   1108c:	4b92      	ldr	r3, [pc, #584]	; (112d8 <_dtoa_r+0x610>)
   1108e:	f002 fea3 	bl	13dd8 <__aeabi_dcmplt>
   11092:	2800      	cmp	r0, #0
   11094:	d07d      	beq.n	11192 <_dtoa_r+0x4ca>
   11096:	f1b8 0f00 	cmp.w	r8, #0
   1109a:	d07a      	beq.n	11192 <_dtoa_r+0x4ca>
   1109c:	9b04      	ldr	r3, [sp, #16]
   1109e:	2b00      	cmp	r3, #0
   110a0:	dd36      	ble.n	11110 <_dtoa_r+0x448>
   110a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   110a6:	2200      	movs	r2, #0
   110a8:	4b8c      	ldr	r3, [pc, #560]	; (112dc <_dtoa_r+0x614>)
   110aa:	f002 fc23 	bl	138f4 <__aeabi_dmul>
   110ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
   110b2:	9e04      	ldr	r6, [sp, #16]
   110b4:	f10a 37ff 	add.w	r7, sl, #4294967295
   110b8:	3501      	adds	r5, #1
   110ba:	4628      	mov	r0, r5
   110bc:	f002 fbb0 	bl	13820 <__aeabi_i2d>
   110c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   110c4:	f002 fc16 	bl	138f4 <__aeabi_dmul>
   110c8:	2200      	movs	r2, #0
   110ca:	4b85      	ldr	r3, [pc, #532]	; (112e0 <_dtoa_r+0x618>)
   110cc:	f002 fa5c 	bl	13588 <__adddf3>
   110d0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
   110d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   110d8:	950b      	str	r5, [sp, #44]	; 0x2c
   110da:	2e00      	cmp	r6, #0
   110dc:	d15c      	bne.n	11198 <_dtoa_r+0x4d0>
   110de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   110e2:	2200      	movs	r2, #0
   110e4:	4b7f      	ldr	r3, [pc, #508]	; (112e4 <_dtoa_r+0x61c>)
   110e6:	f002 fa4d 	bl	13584 <__aeabi_dsub>
   110ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   110ec:	462b      	mov	r3, r5
   110ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   110f2:	f002 fe8f 	bl	13e14 <__aeabi_dcmpgt>
   110f6:	2800      	cmp	r0, #0
   110f8:	f040 8281 	bne.w	115fe <_dtoa_r+0x936>
   110fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11102:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   11106:	f002 fe67 	bl	13dd8 <__aeabi_dcmplt>
   1110a:	2800      	cmp	r0, #0
   1110c:	f040 8275 	bne.w	115fa <_dtoa_r+0x932>
   11110:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   11114:	e9cd 2302 	strd	r2, r3, [sp, #8]
   11118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1111a:	2b00      	cmp	r3, #0
   1111c:	f2c0 814b 	blt.w	113b6 <_dtoa_r+0x6ee>
   11120:	f1ba 0f0e 	cmp.w	sl, #14
   11124:	f300 8147 	bgt.w	113b6 <_dtoa_r+0x6ee>
   11128:	4b69      	ldr	r3, [pc, #420]	; (112d0 <_dtoa_r+0x608>)
   1112a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1112e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11132:	e9cd 2304 	strd	r2, r3, [sp, #16]
   11136:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11138:	2b00      	cmp	r3, #0
   1113a:	f280 80d7 	bge.w	112ec <_dtoa_r+0x624>
   1113e:	f1b8 0f00 	cmp.w	r8, #0
   11142:	f300 80d3 	bgt.w	112ec <_dtoa_r+0x624>
   11146:	f040 8257 	bne.w	115f8 <_dtoa_r+0x930>
   1114a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1114e:	2200      	movs	r2, #0
   11150:	4b64      	ldr	r3, [pc, #400]	; (112e4 <_dtoa_r+0x61c>)
   11152:	f002 fbcf 	bl	138f4 <__aeabi_dmul>
   11156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1115a:	f002 fe51 	bl	13e00 <__aeabi_dcmpge>
   1115e:	4646      	mov	r6, r8
   11160:	4647      	mov	r7, r8
   11162:	2800      	cmp	r0, #0
   11164:	f040 822d 	bne.w	115c2 <_dtoa_r+0x8fa>
   11168:	9b06      	ldr	r3, [sp, #24]
   1116a:	9a06      	ldr	r2, [sp, #24]
   1116c:	1c5d      	adds	r5, r3, #1
   1116e:	2331      	movs	r3, #49	; 0x31
   11170:	f10a 0a01 	add.w	sl, sl, #1
   11174:	7013      	strb	r3, [r2, #0]
   11176:	e228      	b.n	115ca <_dtoa_r+0x902>
   11178:	07f2      	lsls	r2, r6, #31
   1117a:	d505      	bpl.n	11188 <_dtoa_r+0x4c0>
   1117c:	e9d7 2300 	ldrd	r2, r3, [r7]
   11180:	f002 fbb8 	bl	138f4 <__aeabi_dmul>
   11184:	2301      	movs	r3, #1
   11186:	3501      	adds	r5, #1
   11188:	1076      	asrs	r6, r6, #1
   1118a:	3708      	adds	r7, #8
   1118c:	e76e      	b.n	1106c <_dtoa_r+0x3a4>
   1118e:	2502      	movs	r5, #2
   11190:	e771      	b.n	11076 <_dtoa_r+0x3ae>
   11192:	4657      	mov	r7, sl
   11194:	4646      	mov	r6, r8
   11196:	e790      	b.n	110ba <_dtoa_r+0x3f2>
   11198:	4b4d      	ldr	r3, [pc, #308]	; (112d0 <_dtoa_r+0x608>)
   1119a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1119e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   111a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111a4:	2b00      	cmp	r3, #0
   111a6:	d048      	beq.n	1123a <_dtoa_r+0x572>
   111a8:	4602      	mov	r2, r0
   111aa:	460b      	mov	r3, r1
   111ac:	2000      	movs	r0, #0
   111ae:	494e      	ldr	r1, [pc, #312]	; (112e8 <_dtoa_r+0x620>)
   111b0:	f002 fcca 	bl	13b48 <__aeabi_ddiv>
   111b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   111b8:	f002 f9e4 	bl	13584 <__aeabi_dsub>
   111bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   111c0:	9d06      	ldr	r5, [sp, #24]
   111c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   111c6:	f002 fe45 	bl	13e54 <__aeabi_d2iz>
   111ca:	9011      	str	r0, [sp, #68]	; 0x44
   111cc:	f002 fb28 	bl	13820 <__aeabi_i2d>
   111d0:	4602      	mov	r2, r0
   111d2:	460b      	mov	r3, r1
   111d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   111d8:	f002 f9d4 	bl	13584 <__aeabi_dsub>
   111dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   111de:	e9cd 0102 	strd	r0, r1, [sp, #8]
   111e2:	3330      	adds	r3, #48	; 0x30
   111e4:	f805 3b01 	strb.w	r3, [r5], #1
   111e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   111ec:	f002 fdf4 	bl	13dd8 <__aeabi_dcmplt>
   111f0:	2800      	cmp	r0, #0
   111f2:	d163      	bne.n	112bc <_dtoa_r+0x5f4>
   111f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   111f8:	2000      	movs	r0, #0
   111fa:	4937      	ldr	r1, [pc, #220]	; (112d8 <_dtoa_r+0x610>)
   111fc:	f002 f9c2 	bl	13584 <__aeabi_dsub>
   11200:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   11204:	f002 fde8 	bl	13dd8 <__aeabi_dcmplt>
   11208:	2800      	cmp	r0, #0
   1120a:	f040 80b5 	bne.w	11378 <_dtoa_r+0x6b0>
   1120e:	9b06      	ldr	r3, [sp, #24]
   11210:	1aeb      	subs	r3, r5, r3
   11212:	429e      	cmp	r6, r3
   11214:	f77f af7c 	ble.w	11110 <_dtoa_r+0x448>
   11218:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1121c:	2200      	movs	r2, #0
   1121e:	4b2f      	ldr	r3, [pc, #188]	; (112dc <_dtoa_r+0x614>)
   11220:	f002 fb68 	bl	138f4 <__aeabi_dmul>
   11224:	2200      	movs	r2, #0
   11226:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1122a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1122e:	4b2b      	ldr	r3, [pc, #172]	; (112dc <_dtoa_r+0x614>)
   11230:	f002 fb60 	bl	138f4 <__aeabi_dmul>
   11234:	e9cd 0102 	strd	r0, r1, [sp, #8]
   11238:	e7c3      	b.n	111c2 <_dtoa_r+0x4fa>
   1123a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1123e:	f002 fb59 	bl	138f4 <__aeabi_dmul>
   11242:	9b06      	ldr	r3, [sp, #24]
   11244:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   11248:	199d      	adds	r5, r3, r6
   1124a:	461e      	mov	r6, r3
   1124c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11250:	f002 fe00 	bl	13e54 <__aeabi_d2iz>
   11254:	9011      	str	r0, [sp, #68]	; 0x44
   11256:	f002 fae3 	bl	13820 <__aeabi_i2d>
   1125a:	4602      	mov	r2, r0
   1125c:	460b      	mov	r3, r1
   1125e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11262:	f002 f98f 	bl	13584 <__aeabi_dsub>
   11266:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11268:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1126c:	3330      	adds	r3, #48	; 0x30
   1126e:	f806 3b01 	strb.w	r3, [r6], #1
   11272:	42ae      	cmp	r6, r5
   11274:	f04f 0200 	mov.w	r2, #0
   11278:	d124      	bne.n	112c4 <_dtoa_r+0x5fc>
   1127a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1127e:	4b1a      	ldr	r3, [pc, #104]	; (112e8 <_dtoa_r+0x620>)
   11280:	f002 f982 	bl	13588 <__adddf3>
   11284:	4602      	mov	r2, r0
   11286:	460b      	mov	r3, r1
   11288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1128c:	f002 fdc2 	bl	13e14 <__aeabi_dcmpgt>
   11290:	2800      	cmp	r0, #0
   11292:	d171      	bne.n	11378 <_dtoa_r+0x6b0>
   11294:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   11298:	2000      	movs	r0, #0
   1129a:	4913      	ldr	r1, [pc, #76]	; (112e8 <_dtoa_r+0x620>)
   1129c:	f002 f972 	bl	13584 <__aeabi_dsub>
   112a0:	4602      	mov	r2, r0
   112a2:	460b      	mov	r3, r1
   112a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   112a8:	f002 fd96 	bl	13dd8 <__aeabi_dcmplt>
   112ac:	2800      	cmp	r0, #0
   112ae:	f43f af2f 	beq.w	11110 <_dtoa_r+0x448>
   112b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   112b6:	1e6a      	subs	r2, r5, #1
   112b8:	2b30      	cmp	r3, #48	; 0x30
   112ba:	d001      	beq.n	112c0 <_dtoa_r+0x5f8>
   112bc:	46ba      	mov	sl, r7
   112be:	e04a      	b.n	11356 <_dtoa_r+0x68e>
   112c0:	4615      	mov	r5, r2
   112c2:	e7f6      	b.n	112b2 <_dtoa_r+0x5ea>
   112c4:	4b05      	ldr	r3, [pc, #20]	; (112dc <_dtoa_r+0x614>)
   112c6:	f002 fb15 	bl	138f4 <__aeabi_dmul>
   112ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
   112ce:	e7bd      	b.n	1124c <_dtoa_r+0x584>
   112d0:	00014fb8 	.word	0x00014fb8
   112d4:	00014f90 	.word	0x00014f90
   112d8:	3ff00000 	.word	0x3ff00000
   112dc:	40240000 	.word	0x40240000
   112e0:	401c0000 	.word	0x401c0000
   112e4:	40140000 	.word	0x40140000
   112e8:	3fe00000 	.word	0x3fe00000
   112ec:	9d06      	ldr	r5, [sp, #24]
   112ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   112f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   112f6:	4630      	mov	r0, r6
   112f8:	4639      	mov	r1, r7
   112fa:	f002 fc25 	bl	13b48 <__aeabi_ddiv>
   112fe:	f002 fda9 	bl	13e54 <__aeabi_d2iz>
   11302:	4681      	mov	r9, r0
   11304:	f002 fa8c 	bl	13820 <__aeabi_i2d>
   11308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1130c:	f002 faf2 	bl	138f4 <__aeabi_dmul>
   11310:	4602      	mov	r2, r0
   11312:	460b      	mov	r3, r1
   11314:	4630      	mov	r0, r6
   11316:	4639      	mov	r1, r7
   11318:	f002 f934 	bl	13584 <__aeabi_dsub>
   1131c:	f109 0630 	add.w	r6, r9, #48	; 0x30
   11320:	f805 6b01 	strb.w	r6, [r5], #1
   11324:	9e06      	ldr	r6, [sp, #24]
   11326:	4602      	mov	r2, r0
   11328:	1bae      	subs	r6, r5, r6
   1132a:	45b0      	cmp	r8, r6
   1132c:	460b      	mov	r3, r1
   1132e:	d135      	bne.n	1139c <_dtoa_r+0x6d4>
   11330:	f002 f92a 	bl	13588 <__adddf3>
   11334:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11338:	4606      	mov	r6, r0
   1133a:	460f      	mov	r7, r1
   1133c:	f002 fd6a 	bl	13e14 <__aeabi_dcmpgt>
   11340:	b9c8      	cbnz	r0, 11376 <_dtoa_r+0x6ae>
   11342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11346:	4630      	mov	r0, r6
   11348:	4639      	mov	r1, r7
   1134a:	f002 fd3b 	bl	13dc4 <__aeabi_dcmpeq>
   1134e:	b110      	cbz	r0, 11356 <_dtoa_r+0x68e>
   11350:	f019 0f01 	tst.w	r9, #1
   11354:	d10f      	bne.n	11376 <_dtoa_r+0x6ae>
   11356:	4659      	mov	r1, fp
   11358:	4620      	mov	r0, r4
   1135a:	f000 fed6 	bl	1210a <_Bfree>
   1135e:	2300      	movs	r3, #0
   11360:	9a20      	ldr	r2, [sp, #128]	; 0x80
   11362:	702b      	strb	r3, [r5, #0]
   11364:	f10a 0301 	add.w	r3, sl, #1
   11368:	6013      	str	r3, [r2, #0]
   1136a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1136c:	2b00      	cmp	r3, #0
   1136e:	f43f acf3 	beq.w	10d58 <_dtoa_r+0x90>
   11372:	601d      	str	r5, [r3, #0]
   11374:	e4f0      	b.n	10d58 <_dtoa_r+0x90>
   11376:	4657      	mov	r7, sl
   11378:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1137c:	1e6b      	subs	r3, r5, #1
   1137e:	2a39      	cmp	r2, #57	; 0x39
   11380:	d106      	bne.n	11390 <_dtoa_r+0x6c8>
   11382:	9a06      	ldr	r2, [sp, #24]
   11384:	429a      	cmp	r2, r3
   11386:	d107      	bne.n	11398 <_dtoa_r+0x6d0>
   11388:	2330      	movs	r3, #48	; 0x30
   1138a:	7013      	strb	r3, [r2, #0]
   1138c:	4613      	mov	r3, r2
   1138e:	3701      	adds	r7, #1
   11390:	781a      	ldrb	r2, [r3, #0]
   11392:	3201      	adds	r2, #1
   11394:	701a      	strb	r2, [r3, #0]
   11396:	e791      	b.n	112bc <_dtoa_r+0x5f4>
   11398:	461d      	mov	r5, r3
   1139a:	e7ed      	b.n	11378 <_dtoa_r+0x6b0>
   1139c:	2200      	movs	r2, #0
   1139e:	4b99      	ldr	r3, [pc, #612]	; (11604 <_dtoa_r+0x93c>)
   113a0:	f002 faa8 	bl	138f4 <__aeabi_dmul>
   113a4:	2200      	movs	r2, #0
   113a6:	2300      	movs	r3, #0
   113a8:	4606      	mov	r6, r0
   113aa:	460f      	mov	r7, r1
   113ac:	f002 fd0a 	bl	13dc4 <__aeabi_dcmpeq>
   113b0:	2800      	cmp	r0, #0
   113b2:	d09e      	beq.n	112f2 <_dtoa_r+0x62a>
   113b4:	e7cf      	b.n	11356 <_dtoa_r+0x68e>
   113b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   113b8:	2a00      	cmp	r2, #0
   113ba:	f000 8088 	beq.w	114ce <_dtoa_r+0x806>
   113be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   113c0:	2a01      	cmp	r2, #1
   113c2:	dc6d      	bgt.n	114a0 <_dtoa_r+0x7d8>
   113c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   113c6:	2a00      	cmp	r2, #0
   113c8:	d066      	beq.n	11498 <_dtoa_r+0x7d0>
   113ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
   113ce:	464d      	mov	r5, r9
   113d0:	9e08      	ldr	r6, [sp, #32]
   113d2:	9a07      	ldr	r2, [sp, #28]
   113d4:	2101      	movs	r1, #1
   113d6:	441a      	add	r2, r3
   113d8:	4620      	mov	r0, r4
   113da:	4499      	add	r9, r3
   113dc:	9207      	str	r2, [sp, #28]
   113de:	f000 ff72 	bl	122c6 <__i2b>
   113e2:	4607      	mov	r7, r0
   113e4:	2d00      	cmp	r5, #0
   113e6:	dd0b      	ble.n	11400 <_dtoa_r+0x738>
   113e8:	9b07      	ldr	r3, [sp, #28]
   113ea:	2b00      	cmp	r3, #0
   113ec:	dd08      	ble.n	11400 <_dtoa_r+0x738>
   113ee:	42ab      	cmp	r3, r5
   113f0:	bfa8      	it	ge
   113f2:	462b      	movge	r3, r5
   113f4:	9a07      	ldr	r2, [sp, #28]
   113f6:	eba9 0903 	sub.w	r9, r9, r3
   113fa:	1aed      	subs	r5, r5, r3
   113fc:	1ad3      	subs	r3, r2, r3
   113fe:	9307      	str	r3, [sp, #28]
   11400:	9b08      	ldr	r3, [sp, #32]
   11402:	b1eb      	cbz	r3, 11440 <_dtoa_r+0x778>
   11404:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11406:	2b00      	cmp	r3, #0
   11408:	d065      	beq.n	114d6 <_dtoa_r+0x80e>
   1140a:	b18e      	cbz	r6, 11430 <_dtoa_r+0x768>
   1140c:	4639      	mov	r1, r7
   1140e:	4632      	mov	r2, r6
   11410:	4620      	mov	r0, r4
   11412:	f000 fff7 	bl	12404 <__pow5mult>
   11416:	465a      	mov	r2, fp
   11418:	4601      	mov	r1, r0
   1141a:	4607      	mov	r7, r0
   1141c:	4620      	mov	r0, r4
   1141e:	f000 ff5b 	bl	122d8 <__multiply>
   11422:	4659      	mov	r1, fp
   11424:	900a      	str	r0, [sp, #40]	; 0x28
   11426:	4620      	mov	r0, r4
   11428:	f000 fe6f 	bl	1210a <_Bfree>
   1142c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1142e:	469b      	mov	fp, r3
   11430:	9b08      	ldr	r3, [sp, #32]
   11432:	1b9a      	subs	r2, r3, r6
   11434:	d004      	beq.n	11440 <_dtoa_r+0x778>
   11436:	4659      	mov	r1, fp
   11438:	4620      	mov	r0, r4
   1143a:	f000 ffe3 	bl	12404 <__pow5mult>
   1143e:	4683      	mov	fp, r0
   11440:	2101      	movs	r1, #1
   11442:	4620      	mov	r0, r4
   11444:	f000 ff3f 	bl	122c6 <__i2b>
   11448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1144a:	4606      	mov	r6, r0
   1144c:	2b00      	cmp	r3, #0
   1144e:	f000 81c6 	beq.w	117de <_dtoa_r+0xb16>
   11452:	461a      	mov	r2, r3
   11454:	4601      	mov	r1, r0
   11456:	4620      	mov	r0, r4
   11458:	f000 ffd4 	bl	12404 <__pow5mult>
   1145c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1145e:	4606      	mov	r6, r0
   11460:	2b01      	cmp	r3, #1
   11462:	dc3e      	bgt.n	114e2 <_dtoa_r+0x81a>
   11464:	9b02      	ldr	r3, [sp, #8]
   11466:	2b00      	cmp	r3, #0
   11468:	d137      	bne.n	114da <_dtoa_r+0x812>
   1146a:	9b03      	ldr	r3, [sp, #12]
   1146c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   11470:	2b00      	cmp	r3, #0
   11472:	d134      	bne.n	114de <_dtoa_r+0x816>
   11474:	9b03      	ldr	r3, [sp, #12]
   11476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1147a:	0d1b      	lsrs	r3, r3, #20
   1147c:	051b      	lsls	r3, r3, #20
   1147e:	b12b      	cbz	r3, 1148c <_dtoa_r+0x7c4>
   11480:	9b07      	ldr	r3, [sp, #28]
   11482:	f109 0901 	add.w	r9, r9, #1
   11486:	3301      	adds	r3, #1
   11488:	9307      	str	r3, [sp, #28]
   1148a:	2301      	movs	r3, #1
   1148c:	9308      	str	r3, [sp, #32]
   1148e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11490:	2b00      	cmp	r3, #0
   11492:	d128      	bne.n	114e6 <_dtoa_r+0x81e>
   11494:	2001      	movs	r0, #1
   11496:	e02e      	b.n	114f6 <_dtoa_r+0x82e>
   11498:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1149a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1149e:	e796      	b.n	113ce <_dtoa_r+0x706>
   114a0:	9b08      	ldr	r3, [sp, #32]
   114a2:	f108 36ff 	add.w	r6, r8, #4294967295
   114a6:	42b3      	cmp	r3, r6
   114a8:	bfb7      	itett	lt
   114aa:	9b08      	ldrlt	r3, [sp, #32]
   114ac:	1b9e      	subge	r6, r3, r6
   114ae:	1af2      	sublt	r2, r6, r3
   114b0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   114b2:	bfbf      	itttt	lt
   114b4:	9608      	strlt	r6, [sp, #32]
   114b6:	189b      	addlt	r3, r3, r2
   114b8:	930c      	strlt	r3, [sp, #48]	; 0x30
   114ba:	2600      	movlt	r6, #0
   114bc:	f1b8 0f00 	cmp.w	r8, #0
   114c0:	bfb9      	ittee	lt
   114c2:	eba9 0508 	sublt.w	r5, r9, r8
   114c6:	2300      	movlt	r3, #0
   114c8:	464d      	movge	r5, r9
   114ca:	4643      	movge	r3, r8
   114cc:	e781      	b.n	113d2 <_dtoa_r+0x70a>
   114ce:	9e08      	ldr	r6, [sp, #32]
   114d0:	464d      	mov	r5, r9
   114d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   114d4:	e786      	b.n	113e4 <_dtoa_r+0x71c>
   114d6:	9a08      	ldr	r2, [sp, #32]
   114d8:	e7ad      	b.n	11436 <_dtoa_r+0x76e>
   114da:	2300      	movs	r3, #0
   114dc:	e7d6      	b.n	1148c <_dtoa_r+0x7c4>
   114de:	9b02      	ldr	r3, [sp, #8]
   114e0:	e7d4      	b.n	1148c <_dtoa_r+0x7c4>
   114e2:	2300      	movs	r3, #0
   114e4:	9308      	str	r3, [sp, #32]
   114e6:	6933      	ldr	r3, [r6, #16]
   114e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   114ec:	6918      	ldr	r0, [r3, #16]
   114ee:	f000 fe9c 	bl	1222a <__hi0bits>
   114f2:	f1c0 0020 	rsb	r0, r0, #32
   114f6:	9b07      	ldr	r3, [sp, #28]
   114f8:	4418      	add	r0, r3
   114fa:	f010 001f 	ands.w	r0, r0, #31
   114fe:	d047      	beq.n	11590 <_dtoa_r+0x8c8>
   11500:	f1c0 0320 	rsb	r3, r0, #32
   11504:	2b04      	cmp	r3, #4
   11506:	dd3b      	ble.n	11580 <_dtoa_r+0x8b8>
   11508:	9b07      	ldr	r3, [sp, #28]
   1150a:	f1c0 001c 	rsb	r0, r0, #28
   1150e:	4481      	add	r9, r0
   11510:	4405      	add	r5, r0
   11512:	4403      	add	r3, r0
   11514:	9307      	str	r3, [sp, #28]
   11516:	f1b9 0f00 	cmp.w	r9, #0
   1151a:	dd05      	ble.n	11528 <_dtoa_r+0x860>
   1151c:	4659      	mov	r1, fp
   1151e:	464a      	mov	r2, r9
   11520:	4620      	mov	r0, r4
   11522:	f000 ffbd 	bl	124a0 <__lshift>
   11526:	4683      	mov	fp, r0
   11528:	9b07      	ldr	r3, [sp, #28]
   1152a:	2b00      	cmp	r3, #0
   1152c:	dd05      	ble.n	1153a <_dtoa_r+0x872>
   1152e:	4631      	mov	r1, r6
   11530:	461a      	mov	r2, r3
   11532:	4620      	mov	r0, r4
   11534:	f000 ffb4 	bl	124a0 <__lshift>
   11538:	4606      	mov	r6, r0
   1153a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1153c:	b353      	cbz	r3, 11594 <_dtoa_r+0x8cc>
   1153e:	4631      	mov	r1, r6
   11540:	4658      	mov	r0, fp
   11542:	f001 f801 	bl	12548 <__mcmp>
   11546:	2800      	cmp	r0, #0
   11548:	da24      	bge.n	11594 <_dtoa_r+0x8cc>
   1154a:	2300      	movs	r3, #0
   1154c:	4659      	mov	r1, fp
   1154e:	220a      	movs	r2, #10
   11550:	4620      	mov	r0, r4
   11552:	f000 fdf1 	bl	12138 <__multadd>
   11556:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11558:	f10a 3aff 	add.w	sl, sl, #4294967295
   1155c:	4683      	mov	fp, r0
   1155e:	2b00      	cmp	r3, #0
   11560:	f000 8144 	beq.w	117ec <_dtoa_r+0xb24>
   11564:	2300      	movs	r3, #0
   11566:	4639      	mov	r1, r7
   11568:	220a      	movs	r2, #10
   1156a:	4620      	mov	r0, r4
   1156c:	f000 fde4 	bl	12138 <__multadd>
   11570:	9b04      	ldr	r3, [sp, #16]
   11572:	4607      	mov	r7, r0
   11574:	2b00      	cmp	r3, #0
   11576:	dc4d      	bgt.n	11614 <_dtoa_r+0x94c>
   11578:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1157a:	2b02      	cmp	r3, #2
   1157c:	dd4a      	ble.n	11614 <_dtoa_r+0x94c>
   1157e:	e011      	b.n	115a4 <_dtoa_r+0x8dc>
   11580:	d0c9      	beq.n	11516 <_dtoa_r+0x84e>
   11582:	9a07      	ldr	r2, [sp, #28]
   11584:	331c      	adds	r3, #28
   11586:	441a      	add	r2, r3
   11588:	4499      	add	r9, r3
   1158a:	441d      	add	r5, r3
   1158c:	4613      	mov	r3, r2
   1158e:	e7c1      	b.n	11514 <_dtoa_r+0x84c>
   11590:	4603      	mov	r3, r0
   11592:	e7f6      	b.n	11582 <_dtoa_r+0x8ba>
   11594:	f1b8 0f00 	cmp.w	r8, #0
   11598:	dc36      	bgt.n	11608 <_dtoa_r+0x940>
   1159a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1159c:	2b02      	cmp	r3, #2
   1159e:	dd33      	ble.n	11608 <_dtoa_r+0x940>
   115a0:	f8cd 8010 	str.w	r8, [sp, #16]
   115a4:	9b04      	ldr	r3, [sp, #16]
   115a6:	b963      	cbnz	r3, 115c2 <_dtoa_r+0x8fa>
   115a8:	4631      	mov	r1, r6
   115aa:	2205      	movs	r2, #5
   115ac:	4620      	mov	r0, r4
   115ae:	f000 fdc3 	bl	12138 <__multadd>
   115b2:	4601      	mov	r1, r0
   115b4:	4606      	mov	r6, r0
   115b6:	4658      	mov	r0, fp
   115b8:	f000 ffc6 	bl	12548 <__mcmp>
   115bc:	2800      	cmp	r0, #0
   115be:	f73f add3 	bgt.w	11168 <_dtoa_r+0x4a0>
   115c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   115c4:	9d06      	ldr	r5, [sp, #24]
   115c6:	ea6f 0a03 	mvn.w	sl, r3
   115ca:	f04f 0900 	mov.w	r9, #0
   115ce:	4631      	mov	r1, r6
   115d0:	4620      	mov	r0, r4
   115d2:	f000 fd9a 	bl	1210a <_Bfree>
   115d6:	2f00      	cmp	r7, #0
   115d8:	f43f aebd 	beq.w	11356 <_dtoa_r+0x68e>
   115dc:	f1b9 0f00 	cmp.w	r9, #0
   115e0:	d005      	beq.n	115ee <_dtoa_r+0x926>
   115e2:	45b9      	cmp	r9, r7
   115e4:	d003      	beq.n	115ee <_dtoa_r+0x926>
   115e6:	4649      	mov	r1, r9
   115e8:	4620      	mov	r0, r4
   115ea:	f000 fd8e 	bl	1210a <_Bfree>
   115ee:	4639      	mov	r1, r7
   115f0:	4620      	mov	r0, r4
   115f2:	f000 fd8a 	bl	1210a <_Bfree>
   115f6:	e6ae      	b.n	11356 <_dtoa_r+0x68e>
   115f8:	2600      	movs	r6, #0
   115fa:	4637      	mov	r7, r6
   115fc:	e7e1      	b.n	115c2 <_dtoa_r+0x8fa>
   115fe:	46ba      	mov	sl, r7
   11600:	4637      	mov	r7, r6
   11602:	e5b1      	b.n	11168 <_dtoa_r+0x4a0>
   11604:	40240000 	.word	0x40240000
   11608:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1160a:	f8cd 8010 	str.w	r8, [sp, #16]
   1160e:	2b00      	cmp	r3, #0
   11610:	f000 80f3 	beq.w	117fa <_dtoa_r+0xb32>
   11614:	2d00      	cmp	r5, #0
   11616:	dd05      	ble.n	11624 <_dtoa_r+0x95c>
   11618:	4639      	mov	r1, r7
   1161a:	462a      	mov	r2, r5
   1161c:	4620      	mov	r0, r4
   1161e:	f000 ff3f 	bl	124a0 <__lshift>
   11622:	4607      	mov	r7, r0
   11624:	9b08      	ldr	r3, [sp, #32]
   11626:	2b00      	cmp	r3, #0
   11628:	d04c      	beq.n	116c4 <_dtoa_r+0x9fc>
   1162a:	6879      	ldr	r1, [r7, #4]
   1162c:	4620      	mov	r0, r4
   1162e:	f000 fd38 	bl	120a2 <_Balloc>
   11632:	4605      	mov	r5, r0
   11634:	693a      	ldr	r2, [r7, #16]
   11636:	f107 010c 	add.w	r1, r7, #12
   1163a:	3202      	adds	r2, #2
   1163c:	0092      	lsls	r2, r2, #2
   1163e:	300c      	adds	r0, #12
   11640:	f000 fd24 	bl	1208c <memcpy>
   11644:	2201      	movs	r2, #1
   11646:	4629      	mov	r1, r5
   11648:	4620      	mov	r0, r4
   1164a:	f000 ff29 	bl	124a0 <__lshift>
   1164e:	46b9      	mov	r9, r7
   11650:	4607      	mov	r7, r0
   11652:	9b06      	ldr	r3, [sp, #24]
   11654:	9307      	str	r3, [sp, #28]
   11656:	9b02      	ldr	r3, [sp, #8]
   11658:	f003 0301 	and.w	r3, r3, #1
   1165c:	9308      	str	r3, [sp, #32]
   1165e:	4631      	mov	r1, r6
   11660:	4658      	mov	r0, fp
   11662:	f7ff faa3 	bl	10bac <quorem>
   11666:	4649      	mov	r1, r9
   11668:	4605      	mov	r5, r0
   1166a:	f100 0830 	add.w	r8, r0, #48	; 0x30
   1166e:	4658      	mov	r0, fp
   11670:	f000 ff6a 	bl	12548 <__mcmp>
   11674:	463a      	mov	r2, r7
   11676:	9002      	str	r0, [sp, #8]
   11678:	4631      	mov	r1, r6
   1167a:	4620      	mov	r0, r4
   1167c:	f000 ff7e 	bl	1257c <__mdiff>
   11680:	68c3      	ldr	r3, [r0, #12]
   11682:	4602      	mov	r2, r0
   11684:	bb03      	cbnz	r3, 116c8 <_dtoa_r+0xa00>
   11686:	4601      	mov	r1, r0
   11688:	9009      	str	r0, [sp, #36]	; 0x24
   1168a:	4658      	mov	r0, fp
   1168c:	f000 ff5c 	bl	12548 <__mcmp>
   11690:	4603      	mov	r3, r0
   11692:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11694:	4611      	mov	r1, r2
   11696:	4620      	mov	r0, r4
   11698:	9309      	str	r3, [sp, #36]	; 0x24
   1169a:	f000 fd36 	bl	1210a <_Bfree>
   1169e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   116a0:	b9a3      	cbnz	r3, 116cc <_dtoa_r+0xa04>
   116a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   116a4:	b992      	cbnz	r2, 116cc <_dtoa_r+0xa04>
   116a6:	9a08      	ldr	r2, [sp, #32]
   116a8:	b982      	cbnz	r2, 116cc <_dtoa_r+0xa04>
   116aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   116ae:	d029      	beq.n	11704 <_dtoa_r+0xa3c>
   116b0:	9b02      	ldr	r3, [sp, #8]
   116b2:	2b00      	cmp	r3, #0
   116b4:	dd01      	ble.n	116ba <_dtoa_r+0x9f2>
   116b6:	f105 0831 	add.w	r8, r5, #49	; 0x31
   116ba:	9b07      	ldr	r3, [sp, #28]
   116bc:	1c5d      	adds	r5, r3, #1
   116be:	f883 8000 	strb.w	r8, [r3]
   116c2:	e784      	b.n	115ce <_dtoa_r+0x906>
   116c4:	4638      	mov	r0, r7
   116c6:	e7c2      	b.n	1164e <_dtoa_r+0x986>
   116c8:	2301      	movs	r3, #1
   116ca:	e7e3      	b.n	11694 <_dtoa_r+0x9cc>
   116cc:	9a02      	ldr	r2, [sp, #8]
   116ce:	2a00      	cmp	r2, #0
   116d0:	db04      	blt.n	116dc <_dtoa_r+0xa14>
   116d2:	d123      	bne.n	1171c <_dtoa_r+0xa54>
   116d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   116d6:	bb0a      	cbnz	r2, 1171c <_dtoa_r+0xa54>
   116d8:	9a08      	ldr	r2, [sp, #32]
   116da:	b9fa      	cbnz	r2, 1171c <_dtoa_r+0xa54>
   116dc:	2b00      	cmp	r3, #0
   116de:	ddec      	ble.n	116ba <_dtoa_r+0x9f2>
   116e0:	4659      	mov	r1, fp
   116e2:	2201      	movs	r2, #1
   116e4:	4620      	mov	r0, r4
   116e6:	f000 fedb 	bl	124a0 <__lshift>
   116ea:	4631      	mov	r1, r6
   116ec:	4683      	mov	fp, r0
   116ee:	f000 ff2b 	bl	12548 <__mcmp>
   116f2:	2800      	cmp	r0, #0
   116f4:	dc03      	bgt.n	116fe <_dtoa_r+0xa36>
   116f6:	d1e0      	bne.n	116ba <_dtoa_r+0x9f2>
   116f8:	f018 0f01 	tst.w	r8, #1
   116fc:	d0dd      	beq.n	116ba <_dtoa_r+0x9f2>
   116fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   11702:	d1d8      	bne.n	116b6 <_dtoa_r+0x9ee>
   11704:	9b07      	ldr	r3, [sp, #28]
   11706:	9a07      	ldr	r2, [sp, #28]
   11708:	1c5d      	adds	r5, r3, #1
   1170a:	2339      	movs	r3, #57	; 0x39
   1170c:	7013      	strb	r3, [r2, #0]
   1170e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   11712:	1e6a      	subs	r2, r5, #1
   11714:	2b39      	cmp	r3, #57	; 0x39
   11716:	d04d      	beq.n	117b4 <_dtoa_r+0xaec>
   11718:	3301      	adds	r3, #1
   1171a:	e052      	b.n	117c2 <_dtoa_r+0xafa>
   1171c:	9a07      	ldr	r2, [sp, #28]
   1171e:	2b00      	cmp	r3, #0
   11720:	f102 0501 	add.w	r5, r2, #1
   11724:	dd06      	ble.n	11734 <_dtoa_r+0xa6c>
   11726:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   1172a:	d0eb      	beq.n	11704 <_dtoa_r+0xa3c>
   1172c:	f108 0801 	add.w	r8, r8, #1
   11730:	9b07      	ldr	r3, [sp, #28]
   11732:	e7c4      	b.n	116be <_dtoa_r+0x9f6>
   11734:	9b06      	ldr	r3, [sp, #24]
   11736:	9a04      	ldr	r2, [sp, #16]
   11738:	1aeb      	subs	r3, r5, r3
   1173a:	4293      	cmp	r3, r2
   1173c:	f805 8c01 	strb.w	r8, [r5, #-1]
   11740:	d021      	beq.n	11786 <_dtoa_r+0xabe>
   11742:	4659      	mov	r1, fp
   11744:	2300      	movs	r3, #0
   11746:	220a      	movs	r2, #10
   11748:	4620      	mov	r0, r4
   1174a:	f000 fcf5 	bl	12138 <__multadd>
   1174e:	45b9      	cmp	r9, r7
   11750:	4683      	mov	fp, r0
   11752:	f04f 0300 	mov.w	r3, #0
   11756:	f04f 020a 	mov.w	r2, #10
   1175a:	4649      	mov	r1, r9
   1175c:	4620      	mov	r0, r4
   1175e:	d105      	bne.n	1176c <_dtoa_r+0xaa4>
   11760:	f000 fcea 	bl	12138 <__multadd>
   11764:	4681      	mov	r9, r0
   11766:	4607      	mov	r7, r0
   11768:	9507      	str	r5, [sp, #28]
   1176a:	e778      	b.n	1165e <_dtoa_r+0x996>
   1176c:	f000 fce4 	bl	12138 <__multadd>
   11770:	4639      	mov	r1, r7
   11772:	4681      	mov	r9, r0
   11774:	2300      	movs	r3, #0
   11776:	220a      	movs	r2, #10
   11778:	4620      	mov	r0, r4
   1177a:	f000 fcdd 	bl	12138 <__multadd>
   1177e:	4607      	mov	r7, r0
   11780:	e7f2      	b.n	11768 <_dtoa_r+0xaa0>
   11782:	f04f 0900 	mov.w	r9, #0
   11786:	4659      	mov	r1, fp
   11788:	2201      	movs	r2, #1
   1178a:	4620      	mov	r0, r4
   1178c:	f000 fe88 	bl	124a0 <__lshift>
   11790:	4631      	mov	r1, r6
   11792:	4683      	mov	fp, r0
   11794:	f000 fed8 	bl	12548 <__mcmp>
   11798:	2800      	cmp	r0, #0
   1179a:	dcb8      	bgt.n	1170e <_dtoa_r+0xa46>
   1179c:	d102      	bne.n	117a4 <_dtoa_r+0xadc>
   1179e:	f018 0f01 	tst.w	r8, #1
   117a2:	d1b4      	bne.n	1170e <_dtoa_r+0xa46>
   117a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   117a8:	1e6a      	subs	r2, r5, #1
   117aa:	2b30      	cmp	r3, #48	; 0x30
   117ac:	f47f af0f 	bne.w	115ce <_dtoa_r+0x906>
   117b0:	4615      	mov	r5, r2
   117b2:	e7f7      	b.n	117a4 <_dtoa_r+0xadc>
   117b4:	9b06      	ldr	r3, [sp, #24]
   117b6:	4293      	cmp	r3, r2
   117b8:	d105      	bne.n	117c6 <_dtoa_r+0xafe>
   117ba:	2331      	movs	r3, #49	; 0x31
   117bc:	9a06      	ldr	r2, [sp, #24]
   117be:	f10a 0a01 	add.w	sl, sl, #1
   117c2:	7013      	strb	r3, [r2, #0]
   117c4:	e703      	b.n	115ce <_dtoa_r+0x906>
   117c6:	4615      	mov	r5, r2
   117c8:	e7a1      	b.n	1170e <_dtoa_r+0xa46>
   117ca:	4b17      	ldr	r3, [pc, #92]	; (11828 <_dtoa_r+0xb60>)
   117cc:	f7ff bae1 	b.w	10d92 <_dtoa_r+0xca>
   117d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   117d2:	2b00      	cmp	r3, #0
   117d4:	f47f aabb 	bne.w	10d4e <_dtoa_r+0x86>
   117d8:	4b14      	ldr	r3, [pc, #80]	; (1182c <_dtoa_r+0xb64>)
   117da:	f7ff bada 	b.w	10d92 <_dtoa_r+0xca>
   117de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   117e0:	2b01      	cmp	r3, #1
   117e2:	f77f ae3f 	ble.w	11464 <_dtoa_r+0x79c>
   117e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   117e8:	9308      	str	r3, [sp, #32]
   117ea:	e653      	b.n	11494 <_dtoa_r+0x7cc>
   117ec:	9b04      	ldr	r3, [sp, #16]
   117ee:	2b00      	cmp	r3, #0
   117f0:	dc03      	bgt.n	117fa <_dtoa_r+0xb32>
   117f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   117f4:	2b02      	cmp	r3, #2
   117f6:	f73f aed5 	bgt.w	115a4 <_dtoa_r+0x8dc>
   117fa:	9d06      	ldr	r5, [sp, #24]
   117fc:	4631      	mov	r1, r6
   117fe:	4658      	mov	r0, fp
   11800:	f7ff f9d4 	bl	10bac <quorem>
   11804:	9b06      	ldr	r3, [sp, #24]
   11806:	f100 0830 	add.w	r8, r0, #48	; 0x30
   1180a:	f805 8b01 	strb.w	r8, [r5], #1
   1180e:	9a04      	ldr	r2, [sp, #16]
   11810:	1aeb      	subs	r3, r5, r3
   11812:	429a      	cmp	r2, r3
   11814:	ddb5      	ble.n	11782 <_dtoa_r+0xaba>
   11816:	4659      	mov	r1, fp
   11818:	2300      	movs	r3, #0
   1181a:	220a      	movs	r2, #10
   1181c:	4620      	mov	r0, r4
   1181e:	f000 fc8b 	bl	12138 <__multadd>
   11822:	4683      	mov	fp, r0
   11824:	e7ea      	b.n	117fc <_dtoa_r+0xb34>
   11826:	bf00      	nop
   11828:	00014e90 	.word	0x00014e90
   1182c:	00014f10 	.word	0x00014f10

00011830 <std>:
   11830:	2300      	movs	r3, #0
   11832:	b510      	push	{r4, lr}
   11834:	4604      	mov	r4, r0
   11836:	e9c0 3300 	strd	r3, r3, [r0]
   1183a:	6083      	str	r3, [r0, #8]
   1183c:	8181      	strh	r1, [r0, #12]
   1183e:	6643      	str	r3, [r0, #100]	; 0x64
   11840:	81c2      	strh	r2, [r0, #14]
   11842:	e9c0 3304 	strd	r3, r3, [r0, #16]
   11846:	6183      	str	r3, [r0, #24]
   11848:	4619      	mov	r1, r3
   1184a:	2208      	movs	r2, #8
   1184c:	305c      	adds	r0, #92	; 0x5c
   1184e:	f7fd fc7f 	bl	f150 <memset>
   11852:	4b05      	ldr	r3, [pc, #20]	; (11868 <std+0x38>)
   11854:	6224      	str	r4, [r4, #32]
   11856:	6263      	str	r3, [r4, #36]	; 0x24
   11858:	4b04      	ldr	r3, [pc, #16]	; (1186c <std+0x3c>)
   1185a:	62a3      	str	r3, [r4, #40]	; 0x28
   1185c:	4b04      	ldr	r3, [pc, #16]	; (11870 <std+0x40>)
   1185e:	62e3      	str	r3, [r4, #44]	; 0x2c
   11860:	4b04      	ldr	r3, [pc, #16]	; (11874 <std+0x44>)
   11862:	6323      	str	r3, [r4, #48]	; 0x30
   11864:	bd10      	pop	{r4, pc}
   11866:	bf00      	nop
   11868:	00012fa9 	.word	0x00012fa9
   1186c:	00012fcb 	.word	0x00012fcb
   11870:	00013003 	.word	0x00013003
   11874:	00013027 	.word	0x00013027

00011878 <_cleanup_r>:
   11878:	4901      	ldr	r1, [pc, #4]	; (11880 <_cleanup_r+0x8>)
   1187a:	f000 b885 	b.w	11988 <_fwalk_reent>
   1187e:	bf00      	nop
   11880:	00013341 	.word	0x00013341

00011884 <__sfmoreglue>:
   11884:	b570      	push	{r4, r5, r6, lr}
   11886:	2568      	movs	r5, #104	; 0x68
   11888:	1e4a      	subs	r2, r1, #1
   1188a:	4355      	muls	r5, r2
   1188c:	460e      	mov	r6, r1
   1188e:	f105 0174 	add.w	r1, r5, #116	; 0x74
   11892:	f001 f859 	bl	12948 <_malloc_r>
   11896:	4604      	mov	r4, r0
   11898:	b140      	cbz	r0, 118ac <__sfmoreglue+0x28>
   1189a:	2100      	movs	r1, #0
   1189c:	e9c0 1600 	strd	r1, r6, [r0]
   118a0:	300c      	adds	r0, #12
   118a2:	60a0      	str	r0, [r4, #8]
   118a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   118a8:	f7fd fc52 	bl	f150 <memset>
   118ac:	4620      	mov	r0, r4
   118ae:	bd70      	pop	{r4, r5, r6, pc}

000118b0 <__sinit>:
   118b0:	6983      	ldr	r3, [r0, #24]
   118b2:	b510      	push	{r4, lr}
   118b4:	4604      	mov	r4, r0
   118b6:	bb33      	cbnz	r3, 11906 <__sinit+0x56>
   118b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
   118bc:	6503      	str	r3, [r0, #80]	; 0x50
   118be:	4b12      	ldr	r3, [pc, #72]	; (11908 <__sinit+0x58>)
   118c0:	4a12      	ldr	r2, [pc, #72]	; (1190c <__sinit+0x5c>)
   118c2:	681b      	ldr	r3, [r3, #0]
   118c4:	6282      	str	r2, [r0, #40]	; 0x28
   118c6:	4298      	cmp	r0, r3
   118c8:	bf04      	itt	eq
   118ca:	2301      	moveq	r3, #1
   118cc:	6183      	streq	r3, [r0, #24]
   118ce:	f000 f81f 	bl	11910 <__sfp>
   118d2:	6060      	str	r0, [r4, #4]
   118d4:	4620      	mov	r0, r4
   118d6:	f000 f81b 	bl	11910 <__sfp>
   118da:	60a0      	str	r0, [r4, #8]
   118dc:	4620      	mov	r0, r4
   118de:	f000 f817 	bl	11910 <__sfp>
   118e2:	2200      	movs	r2, #0
   118e4:	60e0      	str	r0, [r4, #12]
   118e6:	2104      	movs	r1, #4
   118e8:	6860      	ldr	r0, [r4, #4]
   118ea:	f7ff ffa1 	bl	11830 <std>
   118ee:	2201      	movs	r2, #1
   118f0:	2109      	movs	r1, #9
   118f2:	68a0      	ldr	r0, [r4, #8]
   118f4:	f7ff ff9c 	bl	11830 <std>
   118f8:	2202      	movs	r2, #2
   118fa:	2112      	movs	r1, #18
   118fc:	68e0      	ldr	r0, [r4, #12]
   118fe:	f7ff ff97 	bl	11830 <std>
   11902:	2301      	movs	r3, #1
   11904:	61a3      	str	r3, [r4, #24]
   11906:	bd10      	pop	{r4, pc}
   11908:	00014e7c 	.word	0x00014e7c
   1190c:	00011879 	.word	0x00011879

00011910 <__sfp>:
   11910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11912:	4b1b      	ldr	r3, [pc, #108]	; (11980 <__sfp+0x70>)
   11914:	4607      	mov	r7, r0
   11916:	681e      	ldr	r6, [r3, #0]
   11918:	69b3      	ldr	r3, [r6, #24]
   1191a:	b913      	cbnz	r3, 11922 <__sfp+0x12>
   1191c:	4630      	mov	r0, r6
   1191e:	f7ff ffc7 	bl	118b0 <__sinit>
   11922:	3648      	adds	r6, #72	; 0x48
   11924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   11928:	3b01      	subs	r3, #1
   1192a:	d503      	bpl.n	11934 <__sfp+0x24>
   1192c:	6833      	ldr	r3, [r6, #0]
   1192e:	b133      	cbz	r3, 1193e <__sfp+0x2e>
   11930:	6836      	ldr	r6, [r6, #0]
   11932:	e7f7      	b.n	11924 <__sfp+0x14>
   11934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   11938:	b16d      	cbz	r5, 11956 <__sfp+0x46>
   1193a:	3468      	adds	r4, #104	; 0x68
   1193c:	e7f4      	b.n	11928 <__sfp+0x18>
   1193e:	2104      	movs	r1, #4
   11940:	4638      	mov	r0, r7
   11942:	f7ff ff9f 	bl	11884 <__sfmoreglue>
   11946:	6030      	str	r0, [r6, #0]
   11948:	2800      	cmp	r0, #0
   1194a:	d1f1      	bne.n	11930 <__sfp+0x20>
   1194c:	230c      	movs	r3, #12
   1194e:	4604      	mov	r4, r0
   11950:	603b      	str	r3, [r7, #0]
   11952:	4620      	mov	r0, r4
   11954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11956:	4b0b      	ldr	r3, [pc, #44]	; (11984 <__sfp+0x74>)
   11958:	6665      	str	r5, [r4, #100]	; 0x64
   1195a:	e9c4 5500 	strd	r5, r5, [r4]
   1195e:	60a5      	str	r5, [r4, #8]
   11960:	e9c4 3503 	strd	r3, r5, [r4, #12]
   11964:	e9c4 5505 	strd	r5, r5, [r4, #20]
   11968:	2208      	movs	r2, #8
   1196a:	4629      	mov	r1, r5
   1196c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   11970:	f7fd fbee 	bl	f150 <memset>
   11974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   11978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   1197c:	e7e9      	b.n	11952 <__sfp+0x42>
   1197e:	bf00      	nop
   11980:	00014e7c 	.word	0x00014e7c
   11984:	ffff0001 	.word	0xffff0001

00011988 <_fwalk_reent>:
   11988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1198c:	4680      	mov	r8, r0
   1198e:	4689      	mov	r9, r1
   11990:	2600      	movs	r6, #0
   11992:	f100 0448 	add.w	r4, r0, #72	; 0x48
   11996:	b914      	cbnz	r4, 1199e <_fwalk_reent+0x16>
   11998:	4630      	mov	r0, r6
   1199a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1199e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   119a2:	3f01      	subs	r7, #1
   119a4:	d501      	bpl.n	119aa <_fwalk_reent+0x22>
   119a6:	6824      	ldr	r4, [r4, #0]
   119a8:	e7f5      	b.n	11996 <_fwalk_reent+0xe>
   119aa:	89ab      	ldrh	r3, [r5, #12]
   119ac:	2b01      	cmp	r3, #1
   119ae:	d907      	bls.n	119c0 <_fwalk_reent+0x38>
   119b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   119b4:	3301      	adds	r3, #1
   119b6:	d003      	beq.n	119c0 <_fwalk_reent+0x38>
   119b8:	4629      	mov	r1, r5
   119ba:	4640      	mov	r0, r8
   119bc:	47c8      	blx	r9
   119be:	4306      	orrs	r6, r0
   119c0:	3568      	adds	r5, #104	; 0x68
   119c2:	e7ee      	b.n	119a2 <_fwalk_reent+0x1a>

000119c4 <rshift>:
   119c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   119c6:	6906      	ldr	r6, [r0, #16]
   119c8:	114b      	asrs	r3, r1, #5
   119ca:	429e      	cmp	r6, r3
   119cc:	f100 0414 	add.w	r4, r0, #20
   119d0:	dd31      	ble.n	11a36 <rshift+0x72>
   119d2:	f011 011f 	ands.w	r1, r1, #31
   119d6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   119da:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   119de:	d108      	bne.n	119f2 <rshift+0x2e>
   119e0:	4621      	mov	r1, r4
   119e2:	42b2      	cmp	r2, r6
   119e4:	460b      	mov	r3, r1
   119e6:	d211      	bcs.n	11a0c <rshift+0x48>
   119e8:	f852 3b04 	ldr.w	r3, [r2], #4
   119ec:	f841 3b04 	str.w	r3, [r1], #4
   119f0:	e7f7      	b.n	119e2 <rshift+0x1e>
   119f2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   119f6:	4623      	mov	r3, r4
   119f8:	f1c1 0c20 	rsb	ip, r1, #32
   119fc:	40cd      	lsrs	r5, r1
   119fe:	3204      	adds	r2, #4
   11a00:	42b2      	cmp	r2, r6
   11a02:	4617      	mov	r7, r2
   11a04:	d30d      	bcc.n	11a22 <rshift+0x5e>
   11a06:	601d      	str	r5, [r3, #0]
   11a08:	b105      	cbz	r5, 11a0c <rshift+0x48>
   11a0a:	3304      	adds	r3, #4
   11a0c:	42a3      	cmp	r3, r4
   11a0e:	eba3 0204 	sub.w	r2, r3, r4
   11a12:	bf08      	it	eq
   11a14:	2300      	moveq	r3, #0
   11a16:	ea4f 02a2 	mov.w	r2, r2, asr #2
   11a1a:	6102      	str	r2, [r0, #16]
   11a1c:	bf08      	it	eq
   11a1e:	6143      	streq	r3, [r0, #20]
   11a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a22:	683f      	ldr	r7, [r7, #0]
   11a24:	fa07 f70c 	lsl.w	r7, r7, ip
   11a28:	433d      	orrs	r5, r7
   11a2a:	f843 5b04 	str.w	r5, [r3], #4
   11a2e:	f852 5b04 	ldr.w	r5, [r2], #4
   11a32:	40cd      	lsrs	r5, r1
   11a34:	e7e4      	b.n	11a00 <rshift+0x3c>
   11a36:	4623      	mov	r3, r4
   11a38:	e7e8      	b.n	11a0c <rshift+0x48>

00011a3a <__hexdig_fun>:
   11a3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   11a3e:	2b09      	cmp	r3, #9
   11a40:	d802      	bhi.n	11a48 <__hexdig_fun+0xe>
   11a42:	3820      	subs	r0, #32
   11a44:	b2c0      	uxtb	r0, r0
   11a46:	4770      	bx	lr
   11a48:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   11a4c:	2b05      	cmp	r3, #5
   11a4e:	d801      	bhi.n	11a54 <__hexdig_fun+0x1a>
   11a50:	3847      	subs	r0, #71	; 0x47
   11a52:	e7f7      	b.n	11a44 <__hexdig_fun+0xa>
   11a54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   11a58:	2b05      	cmp	r3, #5
   11a5a:	d801      	bhi.n	11a60 <__hexdig_fun+0x26>
   11a5c:	3827      	subs	r0, #39	; 0x27
   11a5e:	e7f1      	b.n	11a44 <__hexdig_fun+0xa>
   11a60:	2000      	movs	r0, #0
   11a62:	4770      	bx	lr

00011a64 <__gethex>:
   11a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a68:	b08b      	sub	sp, #44	; 0x2c
   11a6a:	9002      	str	r0, [sp, #8]
   11a6c:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a6e:	468a      	mov	sl, r1
   11a70:	4690      	mov	r8, r2
   11a72:	9306      	str	r3, [sp, #24]
   11a74:	f000 fad1 	bl	1201a <__localeconv_l>
   11a78:	6803      	ldr	r3, [r0, #0]
   11a7a:	f04f 0b00 	mov.w	fp, #0
   11a7e:	4618      	mov	r0, r3
   11a80:	9303      	str	r3, [sp, #12]
   11a82:	f7fe f9ed 	bl	fe60 <strlen>
   11a86:	9b03      	ldr	r3, [sp, #12]
   11a88:	9001      	str	r0, [sp, #4]
   11a8a:	4403      	add	r3, r0
   11a8c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   11a90:	9307      	str	r3, [sp, #28]
   11a92:	f8da 3000 	ldr.w	r3, [sl]
   11a96:	3302      	adds	r3, #2
   11a98:	461f      	mov	r7, r3
   11a9a:	f813 0b01 	ldrb.w	r0, [r3], #1
   11a9e:	2830      	cmp	r0, #48	; 0x30
   11aa0:	d06c      	beq.n	11b7c <__gethex+0x118>
   11aa2:	f7ff ffca 	bl	11a3a <__hexdig_fun>
   11aa6:	4604      	mov	r4, r0
   11aa8:	2800      	cmp	r0, #0
   11aaa:	d16a      	bne.n	11b82 <__gethex+0x11e>
   11aac:	9a01      	ldr	r2, [sp, #4]
   11aae:	9903      	ldr	r1, [sp, #12]
   11ab0:	4638      	mov	r0, r7
   11ab2:	f001 fabc 	bl	1302e <strncmp>
   11ab6:	2800      	cmp	r0, #0
   11ab8:	d166      	bne.n	11b88 <__gethex+0x124>
   11aba:	9b01      	ldr	r3, [sp, #4]
   11abc:	5cf8      	ldrb	r0, [r7, r3]
   11abe:	18fe      	adds	r6, r7, r3
   11ac0:	f7ff ffbb 	bl	11a3a <__hexdig_fun>
   11ac4:	2800      	cmp	r0, #0
   11ac6:	d062      	beq.n	11b8e <__gethex+0x12a>
   11ac8:	4633      	mov	r3, r6
   11aca:	7818      	ldrb	r0, [r3, #0]
   11acc:	461f      	mov	r7, r3
   11ace:	2830      	cmp	r0, #48	; 0x30
   11ad0:	f103 0301 	add.w	r3, r3, #1
   11ad4:	d0f9      	beq.n	11aca <__gethex+0x66>
   11ad6:	f7ff ffb0 	bl	11a3a <__hexdig_fun>
   11ada:	fab0 f580 	clz	r5, r0
   11ade:	4634      	mov	r4, r6
   11ae0:	f04f 0b01 	mov.w	fp, #1
   11ae4:	096d      	lsrs	r5, r5, #5
   11ae6:	463a      	mov	r2, r7
   11ae8:	4616      	mov	r6, r2
   11aea:	7830      	ldrb	r0, [r6, #0]
   11aec:	3201      	adds	r2, #1
   11aee:	f7ff ffa4 	bl	11a3a <__hexdig_fun>
   11af2:	2800      	cmp	r0, #0
   11af4:	d1f8      	bne.n	11ae8 <__gethex+0x84>
   11af6:	9a01      	ldr	r2, [sp, #4]
   11af8:	9903      	ldr	r1, [sp, #12]
   11afa:	4630      	mov	r0, r6
   11afc:	f001 fa97 	bl	1302e <strncmp>
   11b00:	b950      	cbnz	r0, 11b18 <__gethex+0xb4>
   11b02:	b954      	cbnz	r4, 11b1a <__gethex+0xb6>
   11b04:	9b01      	ldr	r3, [sp, #4]
   11b06:	18f4      	adds	r4, r6, r3
   11b08:	4622      	mov	r2, r4
   11b0a:	4616      	mov	r6, r2
   11b0c:	7830      	ldrb	r0, [r6, #0]
   11b0e:	3201      	adds	r2, #1
   11b10:	f7ff ff93 	bl	11a3a <__hexdig_fun>
   11b14:	2800      	cmp	r0, #0
   11b16:	d1f8      	bne.n	11b0a <__gethex+0xa6>
   11b18:	b10c      	cbz	r4, 11b1e <__gethex+0xba>
   11b1a:	1ba4      	subs	r4, r4, r6
   11b1c:	00a4      	lsls	r4, r4, #2
   11b1e:	7833      	ldrb	r3, [r6, #0]
   11b20:	2b50      	cmp	r3, #80	; 0x50
   11b22:	d001      	beq.n	11b28 <__gethex+0xc4>
   11b24:	2b70      	cmp	r3, #112	; 0x70
   11b26:	d140      	bne.n	11baa <__gethex+0x146>
   11b28:	7873      	ldrb	r3, [r6, #1]
   11b2a:	2b2b      	cmp	r3, #43	; 0x2b
   11b2c:	d031      	beq.n	11b92 <__gethex+0x12e>
   11b2e:	2b2d      	cmp	r3, #45	; 0x2d
   11b30:	d033      	beq.n	11b9a <__gethex+0x136>
   11b32:	f04f 0900 	mov.w	r9, #0
   11b36:	1c71      	adds	r1, r6, #1
   11b38:	7808      	ldrb	r0, [r1, #0]
   11b3a:	f7ff ff7e 	bl	11a3a <__hexdig_fun>
   11b3e:	1e43      	subs	r3, r0, #1
   11b40:	b2db      	uxtb	r3, r3
   11b42:	2b18      	cmp	r3, #24
   11b44:	d831      	bhi.n	11baa <__gethex+0x146>
   11b46:	f1a0 0210 	sub.w	r2, r0, #16
   11b4a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   11b4e:	f7ff ff74 	bl	11a3a <__hexdig_fun>
   11b52:	1e43      	subs	r3, r0, #1
   11b54:	b2db      	uxtb	r3, r3
   11b56:	2b18      	cmp	r3, #24
   11b58:	d922      	bls.n	11ba0 <__gethex+0x13c>
   11b5a:	f1b9 0f00 	cmp.w	r9, #0
   11b5e:	d000      	beq.n	11b62 <__gethex+0xfe>
   11b60:	4252      	negs	r2, r2
   11b62:	4414      	add	r4, r2
   11b64:	f8ca 1000 	str.w	r1, [sl]
   11b68:	b30d      	cbz	r5, 11bae <__gethex+0x14a>
   11b6a:	f1bb 0f00 	cmp.w	fp, #0
   11b6e:	bf0c      	ite	eq
   11b70:	2706      	moveq	r7, #6
   11b72:	2700      	movne	r7, #0
   11b74:	4638      	mov	r0, r7
   11b76:	b00b      	add	sp, #44	; 0x2c
   11b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b7c:	f10b 0b01 	add.w	fp, fp, #1
   11b80:	e78a      	b.n	11a98 <__gethex+0x34>
   11b82:	2500      	movs	r5, #0
   11b84:	462c      	mov	r4, r5
   11b86:	e7ae      	b.n	11ae6 <__gethex+0x82>
   11b88:	463e      	mov	r6, r7
   11b8a:	2501      	movs	r5, #1
   11b8c:	e7c7      	b.n	11b1e <__gethex+0xba>
   11b8e:	4604      	mov	r4, r0
   11b90:	e7fb      	b.n	11b8a <__gethex+0x126>
   11b92:	f04f 0900 	mov.w	r9, #0
   11b96:	1cb1      	adds	r1, r6, #2
   11b98:	e7ce      	b.n	11b38 <__gethex+0xd4>
   11b9a:	f04f 0901 	mov.w	r9, #1
   11b9e:	e7fa      	b.n	11b96 <__gethex+0x132>
   11ba0:	230a      	movs	r3, #10
   11ba2:	fb03 0202 	mla	r2, r3, r2, r0
   11ba6:	3a10      	subs	r2, #16
   11ba8:	e7cf      	b.n	11b4a <__gethex+0xe6>
   11baa:	4631      	mov	r1, r6
   11bac:	e7da      	b.n	11b64 <__gethex+0x100>
   11bae:	4629      	mov	r1, r5
   11bb0:	1bf3      	subs	r3, r6, r7
   11bb2:	3b01      	subs	r3, #1
   11bb4:	2b07      	cmp	r3, #7
   11bb6:	dc49      	bgt.n	11c4c <__gethex+0x1e8>
   11bb8:	9802      	ldr	r0, [sp, #8]
   11bba:	f000 fa72 	bl	120a2 <_Balloc>
   11bbe:	f04f 0b00 	mov.w	fp, #0
   11bc2:	4605      	mov	r5, r0
   11bc4:	46da      	mov	sl, fp
   11bc6:	9b01      	ldr	r3, [sp, #4]
   11bc8:	f100 0914 	add.w	r9, r0, #20
   11bcc:	f1c3 0301 	rsb	r3, r3, #1
   11bd0:	f8cd 9010 	str.w	r9, [sp, #16]
   11bd4:	9308      	str	r3, [sp, #32]
   11bd6:	42b7      	cmp	r7, r6
   11bd8:	d33b      	bcc.n	11c52 <__gethex+0x1ee>
   11bda:	9804      	ldr	r0, [sp, #16]
   11bdc:	f840 ab04 	str.w	sl, [r0], #4
   11be0:	eba0 0009 	sub.w	r0, r0, r9
   11be4:	1080      	asrs	r0, r0, #2
   11be6:	6128      	str	r0, [r5, #16]
   11be8:	0147      	lsls	r7, r0, #5
   11bea:	4650      	mov	r0, sl
   11bec:	f000 fb1d 	bl	1222a <__hi0bits>
   11bf0:	f8d8 6000 	ldr.w	r6, [r8]
   11bf4:	1a3f      	subs	r7, r7, r0
   11bf6:	42b7      	cmp	r7, r6
   11bf8:	dd64      	ble.n	11cc4 <__gethex+0x260>
   11bfa:	1bbf      	subs	r7, r7, r6
   11bfc:	4639      	mov	r1, r7
   11bfe:	4628      	mov	r0, r5
   11c00:	f000 fe27 	bl	12852 <__any_on>
   11c04:	4682      	mov	sl, r0
   11c06:	b178      	cbz	r0, 11c28 <__gethex+0x1c4>
   11c08:	f04f 0a01 	mov.w	sl, #1
   11c0c:	1e7b      	subs	r3, r7, #1
   11c0e:	1159      	asrs	r1, r3, #5
   11c10:	f003 021f 	and.w	r2, r3, #31
   11c14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   11c18:	fa0a f202 	lsl.w	r2, sl, r2
   11c1c:	420a      	tst	r2, r1
   11c1e:	d003      	beq.n	11c28 <__gethex+0x1c4>
   11c20:	4553      	cmp	r3, sl
   11c22:	dc46      	bgt.n	11cb2 <__gethex+0x24e>
   11c24:	f04f 0a02 	mov.w	sl, #2
   11c28:	4639      	mov	r1, r7
   11c2a:	4628      	mov	r0, r5
   11c2c:	f7ff feca 	bl	119c4 <rshift>
   11c30:	443c      	add	r4, r7
   11c32:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11c36:	42a3      	cmp	r3, r4
   11c38:	da52      	bge.n	11ce0 <__gethex+0x27c>
   11c3a:	4629      	mov	r1, r5
   11c3c:	9802      	ldr	r0, [sp, #8]
   11c3e:	f000 fa64 	bl	1210a <_Bfree>
   11c42:	2300      	movs	r3, #0
   11c44:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11c46:	27a3      	movs	r7, #163	; 0xa3
   11c48:	6013      	str	r3, [r2, #0]
   11c4a:	e793      	b.n	11b74 <__gethex+0x110>
   11c4c:	3101      	adds	r1, #1
   11c4e:	105b      	asrs	r3, r3, #1
   11c50:	e7b0      	b.n	11bb4 <__gethex+0x150>
   11c52:	1e73      	subs	r3, r6, #1
   11c54:	9305      	str	r3, [sp, #20]
   11c56:	9a07      	ldr	r2, [sp, #28]
   11c58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   11c5c:	4293      	cmp	r3, r2
   11c5e:	d018      	beq.n	11c92 <__gethex+0x22e>
   11c60:	f1bb 0f20 	cmp.w	fp, #32
   11c64:	d107      	bne.n	11c76 <__gethex+0x212>
   11c66:	9b04      	ldr	r3, [sp, #16]
   11c68:	f8c3 a000 	str.w	sl, [r3]
   11c6c:	f04f 0a00 	mov.w	sl, #0
   11c70:	46d3      	mov	fp, sl
   11c72:	3304      	adds	r3, #4
   11c74:	9304      	str	r3, [sp, #16]
   11c76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   11c7a:	f7ff fede 	bl	11a3a <__hexdig_fun>
   11c7e:	f000 000f 	and.w	r0, r0, #15
   11c82:	fa00 f00b 	lsl.w	r0, r0, fp
   11c86:	ea4a 0a00 	orr.w	sl, sl, r0
   11c8a:	f10b 0b04 	add.w	fp, fp, #4
   11c8e:	9b05      	ldr	r3, [sp, #20]
   11c90:	e00d      	b.n	11cae <__gethex+0x24a>
   11c92:	9b05      	ldr	r3, [sp, #20]
   11c94:	9a08      	ldr	r2, [sp, #32]
   11c96:	4413      	add	r3, r2
   11c98:	42bb      	cmp	r3, r7
   11c9a:	d3e1      	bcc.n	11c60 <__gethex+0x1fc>
   11c9c:	4618      	mov	r0, r3
   11c9e:	9a01      	ldr	r2, [sp, #4]
   11ca0:	9903      	ldr	r1, [sp, #12]
   11ca2:	9309      	str	r3, [sp, #36]	; 0x24
   11ca4:	f001 f9c3 	bl	1302e <strncmp>
   11ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11caa:	2800      	cmp	r0, #0
   11cac:	d1d8      	bne.n	11c60 <__gethex+0x1fc>
   11cae:	461e      	mov	r6, r3
   11cb0:	e791      	b.n	11bd6 <__gethex+0x172>
   11cb2:	1eb9      	subs	r1, r7, #2
   11cb4:	4628      	mov	r0, r5
   11cb6:	f000 fdcc 	bl	12852 <__any_on>
   11cba:	2800      	cmp	r0, #0
   11cbc:	d0b2      	beq.n	11c24 <__gethex+0x1c0>
   11cbe:	f04f 0a03 	mov.w	sl, #3
   11cc2:	e7b1      	b.n	11c28 <__gethex+0x1c4>
   11cc4:	da09      	bge.n	11cda <__gethex+0x276>
   11cc6:	1bf7      	subs	r7, r6, r7
   11cc8:	4629      	mov	r1, r5
   11cca:	463a      	mov	r2, r7
   11ccc:	9802      	ldr	r0, [sp, #8]
   11cce:	f000 fbe7 	bl	124a0 <__lshift>
   11cd2:	4605      	mov	r5, r0
   11cd4:	1be4      	subs	r4, r4, r7
   11cd6:	f100 0914 	add.w	r9, r0, #20
   11cda:	f04f 0a00 	mov.w	sl, #0
   11cde:	e7a8      	b.n	11c32 <__gethex+0x1ce>
   11ce0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   11ce4:	42a0      	cmp	r0, r4
   11ce6:	dd6b      	ble.n	11dc0 <__gethex+0x35c>
   11ce8:	1b04      	subs	r4, r0, r4
   11cea:	42a6      	cmp	r6, r4
   11cec:	dc2e      	bgt.n	11d4c <__gethex+0x2e8>
   11cee:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11cf2:	2b02      	cmp	r3, #2
   11cf4:	d022      	beq.n	11d3c <__gethex+0x2d8>
   11cf6:	2b03      	cmp	r3, #3
   11cf8:	d024      	beq.n	11d44 <__gethex+0x2e0>
   11cfa:	2b01      	cmp	r3, #1
   11cfc:	d115      	bne.n	11d2a <__gethex+0x2c6>
   11cfe:	42a6      	cmp	r6, r4
   11d00:	d113      	bne.n	11d2a <__gethex+0x2c6>
   11d02:	2e01      	cmp	r6, #1
   11d04:	dc0b      	bgt.n	11d1e <__gethex+0x2ba>
   11d06:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11d0a:	9a06      	ldr	r2, [sp, #24]
   11d0c:	2762      	movs	r7, #98	; 0x62
   11d0e:	6013      	str	r3, [r2, #0]
   11d10:	2301      	movs	r3, #1
   11d12:	612b      	str	r3, [r5, #16]
   11d14:	f8c9 3000 	str.w	r3, [r9]
   11d18:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11d1a:	601d      	str	r5, [r3, #0]
   11d1c:	e72a      	b.n	11b74 <__gethex+0x110>
   11d1e:	1e71      	subs	r1, r6, #1
   11d20:	4628      	mov	r0, r5
   11d22:	f000 fd96 	bl	12852 <__any_on>
   11d26:	2800      	cmp	r0, #0
   11d28:	d1ed      	bne.n	11d06 <__gethex+0x2a2>
   11d2a:	4629      	mov	r1, r5
   11d2c:	9802      	ldr	r0, [sp, #8]
   11d2e:	f000 f9ec 	bl	1210a <_Bfree>
   11d32:	2300      	movs	r3, #0
   11d34:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11d36:	2750      	movs	r7, #80	; 0x50
   11d38:	6013      	str	r3, [r2, #0]
   11d3a:	e71b      	b.n	11b74 <__gethex+0x110>
   11d3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11d3e:	2b00      	cmp	r3, #0
   11d40:	d0e1      	beq.n	11d06 <__gethex+0x2a2>
   11d42:	e7f2      	b.n	11d2a <__gethex+0x2c6>
   11d44:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11d46:	2b00      	cmp	r3, #0
   11d48:	d1dd      	bne.n	11d06 <__gethex+0x2a2>
   11d4a:	e7ee      	b.n	11d2a <__gethex+0x2c6>
   11d4c:	1e67      	subs	r7, r4, #1
   11d4e:	f1ba 0f00 	cmp.w	sl, #0
   11d52:	d132      	bne.n	11dba <__gethex+0x356>
   11d54:	b127      	cbz	r7, 11d60 <__gethex+0x2fc>
   11d56:	4639      	mov	r1, r7
   11d58:	4628      	mov	r0, r5
   11d5a:	f000 fd7a 	bl	12852 <__any_on>
   11d5e:	4682      	mov	sl, r0
   11d60:	2301      	movs	r3, #1
   11d62:	117a      	asrs	r2, r7, #5
   11d64:	f007 071f 	and.w	r7, r7, #31
   11d68:	fa03 f707 	lsl.w	r7, r3, r7
   11d6c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   11d70:	4621      	mov	r1, r4
   11d72:	421f      	tst	r7, r3
   11d74:	f04f 0702 	mov.w	r7, #2
   11d78:	4628      	mov	r0, r5
   11d7a:	bf18      	it	ne
   11d7c:	f04a 0a02 	orrne.w	sl, sl, #2
   11d80:	1b36      	subs	r6, r6, r4
   11d82:	f7ff fe1f 	bl	119c4 <rshift>
   11d86:	f8d8 4004 	ldr.w	r4, [r8, #4]
   11d8a:	f1ba 0f00 	cmp.w	sl, #0
   11d8e:	d048      	beq.n	11e22 <__gethex+0x3be>
   11d90:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11d94:	2b02      	cmp	r3, #2
   11d96:	d015      	beq.n	11dc4 <__gethex+0x360>
   11d98:	2b03      	cmp	r3, #3
   11d9a:	d017      	beq.n	11dcc <__gethex+0x368>
   11d9c:	2b01      	cmp	r3, #1
   11d9e:	d109      	bne.n	11db4 <__gethex+0x350>
   11da0:	f01a 0f02 	tst.w	sl, #2
   11da4:	d006      	beq.n	11db4 <__gethex+0x350>
   11da6:	f8d9 3000 	ldr.w	r3, [r9]
   11daa:	ea4a 0a03 	orr.w	sl, sl, r3
   11dae:	f01a 0f01 	tst.w	sl, #1
   11db2:	d10e      	bne.n	11dd2 <__gethex+0x36e>
   11db4:	f047 0710 	orr.w	r7, r7, #16
   11db8:	e033      	b.n	11e22 <__gethex+0x3be>
   11dba:	f04f 0a01 	mov.w	sl, #1
   11dbe:	e7cf      	b.n	11d60 <__gethex+0x2fc>
   11dc0:	2701      	movs	r7, #1
   11dc2:	e7e2      	b.n	11d8a <__gethex+0x326>
   11dc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11dc6:	f1c3 0301 	rsb	r3, r3, #1
   11dca:	9315      	str	r3, [sp, #84]	; 0x54
   11dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11dce:	2b00      	cmp	r3, #0
   11dd0:	d0f0      	beq.n	11db4 <__gethex+0x350>
   11dd2:	f04f 0c00 	mov.w	ip, #0
   11dd6:	f8d5 9010 	ldr.w	r9, [r5, #16]
   11dda:	f105 0314 	add.w	r3, r5, #20
   11dde:	ea4f 0a89 	mov.w	sl, r9, lsl #2
   11de2:	eb03 010a 	add.w	r1, r3, sl
   11de6:	4618      	mov	r0, r3
   11de8:	f853 2b04 	ldr.w	r2, [r3], #4
   11dec:	f1b2 3fff 	cmp.w	r2, #4294967295
   11df0:	d01c      	beq.n	11e2c <__gethex+0x3c8>
   11df2:	3201      	adds	r2, #1
   11df4:	6002      	str	r2, [r0, #0]
   11df6:	2f02      	cmp	r7, #2
   11df8:	f105 0314 	add.w	r3, r5, #20
   11dfc:	d138      	bne.n	11e70 <__gethex+0x40c>
   11dfe:	f8d8 2000 	ldr.w	r2, [r8]
   11e02:	3a01      	subs	r2, #1
   11e04:	42b2      	cmp	r2, r6
   11e06:	d10a      	bne.n	11e1e <__gethex+0x3ba>
   11e08:	2201      	movs	r2, #1
   11e0a:	1171      	asrs	r1, r6, #5
   11e0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11e10:	f006 061f 	and.w	r6, r6, #31
   11e14:	fa02 f606 	lsl.w	r6, r2, r6
   11e18:	421e      	tst	r6, r3
   11e1a:	bf18      	it	ne
   11e1c:	4617      	movne	r7, r2
   11e1e:	f047 0720 	orr.w	r7, r7, #32
   11e22:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11e24:	601d      	str	r5, [r3, #0]
   11e26:	9b06      	ldr	r3, [sp, #24]
   11e28:	601c      	str	r4, [r3, #0]
   11e2a:	e6a3      	b.n	11b74 <__gethex+0x110>
   11e2c:	4299      	cmp	r1, r3
   11e2e:	f843 cc04 	str.w	ip, [r3, #-4]
   11e32:	d8d8      	bhi.n	11de6 <__gethex+0x382>
   11e34:	68ab      	ldr	r3, [r5, #8]
   11e36:	4599      	cmp	r9, r3
   11e38:	db12      	blt.n	11e60 <__gethex+0x3fc>
   11e3a:	6869      	ldr	r1, [r5, #4]
   11e3c:	9802      	ldr	r0, [sp, #8]
   11e3e:	3101      	adds	r1, #1
   11e40:	f000 f92f 	bl	120a2 <_Balloc>
   11e44:	4683      	mov	fp, r0
   11e46:	692a      	ldr	r2, [r5, #16]
   11e48:	f105 010c 	add.w	r1, r5, #12
   11e4c:	3202      	adds	r2, #2
   11e4e:	0092      	lsls	r2, r2, #2
   11e50:	300c      	adds	r0, #12
   11e52:	f000 f91b 	bl	1208c <memcpy>
   11e56:	4629      	mov	r1, r5
   11e58:	9802      	ldr	r0, [sp, #8]
   11e5a:	f000 f956 	bl	1210a <_Bfree>
   11e5e:	465d      	mov	r5, fp
   11e60:	692b      	ldr	r3, [r5, #16]
   11e62:	1c5a      	adds	r2, r3, #1
   11e64:	612a      	str	r2, [r5, #16]
   11e66:	2201      	movs	r2, #1
   11e68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11e6c:	615a      	str	r2, [r3, #20]
   11e6e:	e7c2      	b.n	11df6 <__gethex+0x392>
   11e70:	692a      	ldr	r2, [r5, #16]
   11e72:	454a      	cmp	r2, r9
   11e74:	dd0b      	ble.n	11e8e <__gethex+0x42a>
   11e76:	2101      	movs	r1, #1
   11e78:	4628      	mov	r0, r5
   11e7a:	f7ff fda3 	bl	119c4 <rshift>
   11e7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11e82:	3401      	adds	r4, #1
   11e84:	42a3      	cmp	r3, r4
   11e86:	f6ff aed8 	blt.w	11c3a <__gethex+0x1d6>
   11e8a:	2701      	movs	r7, #1
   11e8c:	e7c7      	b.n	11e1e <__gethex+0x3ba>
   11e8e:	f016 061f 	ands.w	r6, r6, #31
   11e92:	d0fa      	beq.n	11e8a <__gethex+0x426>
   11e94:	449a      	add	sl, r3
   11e96:	f85a 0c04 	ldr.w	r0, [sl, #-4]
   11e9a:	f000 f9c6 	bl	1222a <__hi0bits>
   11e9e:	f1c6 0620 	rsb	r6, r6, #32
   11ea2:	42b0      	cmp	r0, r6
   11ea4:	dbe7      	blt.n	11e76 <__gethex+0x412>
   11ea6:	e7f0      	b.n	11e8a <__gethex+0x426>

00011ea8 <L_shift>:
   11ea8:	f1c2 0208 	rsb	r2, r2, #8
   11eac:	0092      	lsls	r2, r2, #2
   11eae:	b570      	push	{r4, r5, r6, lr}
   11eb0:	f1c2 0620 	rsb	r6, r2, #32
   11eb4:	6843      	ldr	r3, [r0, #4]
   11eb6:	6804      	ldr	r4, [r0, #0]
   11eb8:	fa03 f506 	lsl.w	r5, r3, r6
   11ebc:	432c      	orrs	r4, r5
   11ebe:	40d3      	lsrs	r3, r2
   11ec0:	6004      	str	r4, [r0, #0]
   11ec2:	f840 3f04 	str.w	r3, [r0, #4]!
   11ec6:	4288      	cmp	r0, r1
   11ec8:	d3f4      	bcc.n	11eb4 <L_shift+0xc>
   11eca:	bd70      	pop	{r4, r5, r6, pc}

00011ecc <__match>:
   11ecc:	b530      	push	{r4, r5, lr}
   11ece:	6803      	ldr	r3, [r0, #0]
   11ed0:	3301      	adds	r3, #1
   11ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
   11ed6:	b914      	cbnz	r4, 11ede <__match+0x12>
   11ed8:	6003      	str	r3, [r0, #0]
   11eda:	2001      	movs	r0, #1
   11edc:	bd30      	pop	{r4, r5, pc}
   11ede:	f813 2b01 	ldrb.w	r2, [r3], #1
   11ee2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   11ee6:	2d19      	cmp	r5, #25
   11ee8:	bf98      	it	ls
   11eea:	3220      	addls	r2, #32
   11eec:	42a2      	cmp	r2, r4
   11eee:	d0f0      	beq.n	11ed2 <__match+0x6>
   11ef0:	2000      	movs	r0, #0
   11ef2:	e7f3      	b.n	11edc <__match+0x10>

00011ef4 <__hexnan>:
   11ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ef8:	2500      	movs	r5, #0
   11efa:	680b      	ldr	r3, [r1, #0]
   11efc:	4682      	mov	sl, r0
   11efe:	115f      	asrs	r7, r3, #5
   11f00:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   11f04:	f013 031f 	ands.w	r3, r3, #31
   11f08:	bf18      	it	ne
   11f0a:	3704      	addne	r7, #4
   11f0c:	1f3e      	subs	r6, r7, #4
   11f0e:	4690      	mov	r8, r2
   11f10:	46b1      	mov	r9, r6
   11f12:	4634      	mov	r4, r6
   11f14:	46ab      	mov	fp, r5
   11f16:	b087      	sub	sp, #28
   11f18:	6801      	ldr	r1, [r0, #0]
   11f1a:	9301      	str	r3, [sp, #4]
   11f1c:	f847 5c04 	str.w	r5, [r7, #-4]
   11f20:	9502      	str	r5, [sp, #8]
   11f22:	784a      	ldrb	r2, [r1, #1]
   11f24:	1c4b      	adds	r3, r1, #1
   11f26:	9303      	str	r3, [sp, #12]
   11f28:	b342      	cbz	r2, 11f7c <__hexnan+0x88>
   11f2a:	4610      	mov	r0, r2
   11f2c:	9105      	str	r1, [sp, #20]
   11f2e:	9204      	str	r2, [sp, #16]
   11f30:	f7ff fd83 	bl	11a3a <__hexdig_fun>
   11f34:	2800      	cmp	r0, #0
   11f36:	d143      	bne.n	11fc0 <__hexnan+0xcc>
   11f38:	9a04      	ldr	r2, [sp, #16]
   11f3a:	9905      	ldr	r1, [sp, #20]
   11f3c:	2a20      	cmp	r2, #32
   11f3e:	d818      	bhi.n	11f72 <__hexnan+0x7e>
   11f40:	9b02      	ldr	r3, [sp, #8]
   11f42:	459b      	cmp	fp, r3
   11f44:	dd13      	ble.n	11f6e <__hexnan+0x7a>
   11f46:	454c      	cmp	r4, r9
   11f48:	d206      	bcs.n	11f58 <__hexnan+0x64>
   11f4a:	2d07      	cmp	r5, #7
   11f4c:	dc04      	bgt.n	11f58 <__hexnan+0x64>
   11f4e:	462a      	mov	r2, r5
   11f50:	4649      	mov	r1, r9
   11f52:	4620      	mov	r0, r4
   11f54:	f7ff ffa8 	bl	11ea8 <L_shift>
   11f58:	4544      	cmp	r4, r8
   11f5a:	d944      	bls.n	11fe6 <__hexnan+0xf2>
   11f5c:	2300      	movs	r3, #0
   11f5e:	f1a4 0904 	sub.w	r9, r4, #4
   11f62:	f844 3c04 	str.w	r3, [r4, #-4]
   11f66:	461d      	mov	r5, r3
   11f68:	464c      	mov	r4, r9
   11f6a:	f8cd b008 	str.w	fp, [sp, #8]
   11f6e:	9903      	ldr	r1, [sp, #12]
   11f70:	e7d7      	b.n	11f22 <__hexnan+0x2e>
   11f72:	2a29      	cmp	r2, #41	; 0x29
   11f74:	d14a      	bne.n	1200c <__hexnan+0x118>
   11f76:	3102      	adds	r1, #2
   11f78:	f8ca 1000 	str.w	r1, [sl]
   11f7c:	f1bb 0f00 	cmp.w	fp, #0
   11f80:	d044      	beq.n	1200c <__hexnan+0x118>
   11f82:	454c      	cmp	r4, r9
   11f84:	d206      	bcs.n	11f94 <__hexnan+0xa0>
   11f86:	2d07      	cmp	r5, #7
   11f88:	dc04      	bgt.n	11f94 <__hexnan+0xa0>
   11f8a:	462a      	mov	r2, r5
   11f8c:	4649      	mov	r1, r9
   11f8e:	4620      	mov	r0, r4
   11f90:	f7ff ff8a 	bl	11ea8 <L_shift>
   11f94:	4544      	cmp	r4, r8
   11f96:	d928      	bls.n	11fea <__hexnan+0xf6>
   11f98:	4643      	mov	r3, r8
   11f9a:	f854 2b04 	ldr.w	r2, [r4], #4
   11f9e:	42a6      	cmp	r6, r4
   11fa0:	f843 2b04 	str.w	r2, [r3], #4
   11fa4:	d2f9      	bcs.n	11f9a <__hexnan+0xa6>
   11fa6:	2200      	movs	r2, #0
   11fa8:	f843 2b04 	str.w	r2, [r3], #4
   11fac:	429e      	cmp	r6, r3
   11fae:	d2fb      	bcs.n	11fa8 <__hexnan+0xb4>
   11fb0:	6833      	ldr	r3, [r6, #0]
   11fb2:	b91b      	cbnz	r3, 11fbc <__hexnan+0xc8>
   11fb4:	4546      	cmp	r6, r8
   11fb6:	d127      	bne.n	12008 <__hexnan+0x114>
   11fb8:	2301      	movs	r3, #1
   11fba:	6033      	str	r3, [r6, #0]
   11fbc:	2005      	movs	r0, #5
   11fbe:	e026      	b.n	1200e <__hexnan+0x11a>
   11fc0:	3501      	adds	r5, #1
   11fc2:	2d08      	cmp	r5, #8
   11fc4:	f10b 0b01 	add.w	fp, fp, #1
   11fc8:	dd06      	ble.n	11fd8 <__hexnan+0xe4>
   11fca:	4544      	cmp	r4, r8
   11fcc:	d9cf      	bls.n	11f6e <__hexnan+0x7a>
   11fce:	2300      	movs	r3, #0
   11fd0:	2501      	movs	r5, #1
   11fd2:	f844 3c04 	str.w	r3, [r4, #-4]
   11fd6:	3c04      	subs	r4, #4
   11fd8:	6822      	ldr	r2, [r4, #0]
   11fda:	f000 000f 	and.w	r0, r0, #15
   11fde:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   11fe2:	6020      	str	r0, [r4, #0]
   11fe4:	e7c3      	b.n	11f6e <__hexnan+0x7a>
   11fe6:	2508      	movs	r5, #8
   11fe8:	e7c1      	b.n	11f6e <__hexnan+0x7a>
   11fea:	9b01      	ldr	r3, [sp, #4]
   11fec:	2b00      	cmp	r3, #0
   11fee:	d0df      	beq.n	11fb0 <__hexnan+0xbc>
   11ff0:	f04f 32ff 	mov.w	r2, #4294967295
   11ff4:	f1c3 0320 	rsb	r3, r3, #32
   11ff8:	fa22 f303 	lsr.w	r3, r2, r3
   11ffc:	f857 2c04 	ldr.w	r2, [r7, #-4]
   12000:	401a      	ands	r2, r3
   12002:	f847 2c04 	str.w	r2, [r7, #-4]
   12006:	e7d3      	b.n	11fb0 <__hexnan+0xbc>
   12008:	3e04      	subs	r6, #4
   1200a:	e7d1      	b.n	11fb0 <__hexnan+0xbc>
   1200c:	2004      	movs	r0, #4
   1200e:	b007      	add	sp, #28
   12010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012014 <__locale_ctype_ptr_l>:
   12014:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   12018:	4770      	bx	lr

0001201a <__localeconv_l>:
   1201a:	30f0      	adds	r0, #240	; 0xf0
   1201c:	4770      	bx	lr
	...

00012020 <_localeconv_r>:
   12020:	4b04      	ldr	r3, [pc, #16]	; (12034 <_localeconv_r+0x14>)
   12022:	681b      	ldr	r3, [r3, #0]
   12024:	6a18      	ldr	r0, [r3, #32]
   12026:	4b04      	ldr	r3, [pc, #16]	; (12038 <_localeconv_r+0x18>)
   12028:	2800      	cmp	r0, #0
   1202a:	bf08      	it	eq
   1202c:	4618      	moveq	r0, r3
   1202e:	30f0      	adds	r0, #240	; 0xf0
   12030:	4770      	bx	lr
   12032:	bf00      	nop
   12034:	00025754 	.word	0x00025754
   12038:	000257b8 	.word	0x000257b8

0001203c <malloc>:
   1203c:	4b02      	ldr	r3, [pc, #8]	; (12048 <malloc+0xc>)
   1203e:	4601      	mov	r1, r0
   12040:	6818      	ldr	r0, [r3, #0]
   12042:	f000 bc81 	b.w	12948 <_malloc_r>
   12046:	bf00      	nop
   12048:	00025754 	.word	0x00025754

0001204c <__ascii_mbtowc>:
   1204c:	b082      	sub	sp, #8
   1204e:	b901      	cbnz	r1, 12052 <__ascii_mbtowc+0x6>
   12050:	a901      	add	r1, sp, #4
   12052:	b142      	cbz	r2, 12066 <__ascii_mbtowc+0x1a>
   12054:	b14b      	cbz	r3, 1206a <__ascii_mbtowc+0x1e>
   12056:	7813      	ldrb	r3, [r2, #0]
   12058:	600b      	str	r3, [r1, #0]
   1205a:	7812      	ldrb	r2, [r2, #0]
   1205c:	1c10      	adds	r0, r2, #0
   1205e:	bf18      	it	ne
   12060:	2001      	movne	r0, #1
   12062:	b002      	add	sp, #8
   12064:	4770      	bx	lr
   12066:	4610      	mov	r0, r2
   12068:	e7fb      	b.n	12062 <__ascii_mbtowc+0x16>
   1206a:	f06f 0001 	mvn.w	r0, #1
   1206e:	e7f8      	b.n	12062 <__ascii_mbtowc+0x16>

00012070 <memchr>:
   12070:	b510      	push	{r4, lr}
   12072:	b2c9      	uxtb	r1, r1
   12074:	4402      	add	r2, r0
   12076:	4290      	cmp	r0, r2
   12078:	4603      	mov	r3, r0
   1207a:	d101      	bne.n	12080 <memchr+0x10>
   1207c:	2300      	movs	r3, #0
   1207e:	e003      	b.n	12088 <memchr+0x18>
   12080:	781c      	ldrb	r4, [r3, #0]
   12082:	3001      	adds	r0, #1
   12084:	428c      	cmp	r4, r1
   12086:	d1f6      	bne.n	12076 <memchr+0x6>
   12088:	4618      	mov	r0, r3
   1208a:	bd10      	pop	{r4, pc}

0001208c <memcpy>:
   1208c:	b510      	push	{r4, lr}
   1208e:	1e43      	subs	r3, r0, #1
   12090:	440a      	add	r2, r1
   12092:	4291      	cmp	r1, r2
   12094:	d100      	bne.n	12098 <memcpy+0xc>
   12096:	bd10      	pop	{r4, pc}
   12098:	f811 4b01 	ldrb.w	r4, [r1], #1
   1209c:	f803 4f01 	strb.w	r4, [r3, #1]!
   120a0:	e7f7      	b.n	12092 <memcpy+0x6>

000120a2 <_Balloc>:
   120a2:	b570      	push	{r4, r5, r6, lr}
   120a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
   120a6:	4604      	mov	r4, r0
   120a8:	460e      	mov	r6, r1
   120aa:	b93d      	cbnz	r5, 120bc <_Balloc+0x1a>
   120ac:	2010      	movs	r0, #16
   120ae:	f7ff ffc5 	bl	1203c <malloc>
   120b2:	6260      	str	r0, [r4, #36]	; 0x24
   120b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
   120b8:	6005      	str	r5, [r0, #0]
   120ba:	60c5      	str	r5, [r0, #12]
   120bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
   120be:	68eb      	ldr	r3, [r5, #12]
   120c0:	b183      	cbz	r3, 120e4 <_Balloc+0x42>
   120c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   120c4:	68db      	ldr	r3, [r3, #12]
   120c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   120ca:	b9b8      	cbnz	r0, 120fc <_Balloc+0x5a>
   120cc:	2101      	movs	r1, #1
   120ce:	fa01 f506 	lsl.w	r5, r1, r6
   120d2:	1d6a      	adds	r2, r5, #5
   120d4:	0092      	lsls	r2, r2, #2
   120d6:	4620      	mov	r0, r4
   120d8:	f000 fbdc 	bl	12894 <_calloc_r>
   120dc:	b160      	cbz	r0, 120f8 <_Balloc+0x56>
   120de:	e9c0 6501 	strd	r6, r5, [r0, #4]
   120e2:	e00e      	b.n	12102 <_Balloc+0x60>
   120e4:	2221      	movs	r2, #33	; 0x21
   120e6:	2104      	movs	r1, #4
   120e8:	4620      	mov	r0, r4
   120ea:	f000 fbd3 	bl	12894 <_calloc_r>
   120ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   120f0:	60e8      	str	r0, [r5, #12]
   120f2:	68db      	ldr	r3, [r3, #12]
   120f4:	2b00      	cmp	r3, #0
   120f6:	d1e4      	bne.n	120c2 <_Balloc+0x20>
   120f8:	2000      	movs	r0, #0
   120fa:	bd70      	pop	{r4, r5, r6, pc}
   120fc:	6802      	ldr	r2, [r0, #0]
   120fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   12102:	2300      	movs	r3, #0
   12104:	e9c0 3303 	strd	r3, r3, [r0, #12]
   12108:	e7f7      	b.n	120fa <_Balloc+0x58>

0001210a <_Bfree>:
   1210a:	b570      	push	{r4, r5, r6, lr}
   1210c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1210e:	4606      	mov	r6, r0
   12110:	460d      	mov	r5, r1
   12112:	b93c      	cbnz	r4, 12124 <_Bfree+0x1a>
   12114:	2010      	movs	r0, #16
   12116:	f7ff ff91 	bl	1203c <malloc>
   1211a:	6270      	str	r0, [r6, #36]	; 0x24
   1211c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   12120:	6004      	str	r4, [r0, #0]
   12122:	60c4      	str	r4, [r0, #12]
   12124:	b13d      	cbz	r5, 12136 <_Bfree+0x2c>
   12126:	6a73      	ldr	r3, [r6, #36]	; 0x24
   12128:	686a      	ldr	r2, [r5, #4]
   1212a:	68db      	ldr	r3, [r3, #12]
   1212c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12130:	6029      	str	r1, [r5, #0]
   12132:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   12136:	bd70      	pop	{r4, r5, r6, pc}

00012138 <__multadd>:
   12138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1213c:	461f      	mov	r7, r3
   1213e:	4606      	mov	r6, r0
   12140:	460c      	mov	r4, r1
   12142:	2300      	movs	r3, #0
   12144:	690d      	ldr	r5, [r1, #16]
   12146:	f101 0c14 	add.w	ip, r1, #20
   1214a:	f8dc 0000 	ldr.w	r0, [ip]
   1214e:	3301      	adds	r3, #1
   12150:	b281      	uxth	r1, r0
   12152:	fb02 7101 	mla	r1, r2, r1, r7
   12156:	0c00      	lsrs	r0, r0, #16
   12158:	0c0f      	lsrs	r7, r1, #16
   1215a:	fb02 7000 	mla	r0, r2, r0, r7
   1215e:	b289      	uxth	r1, r1
   12160:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   12164:	429d      	cmp	r5, r3
   12166:	ea4f 4710 	mov.w	r7, r0, lsr #16
   1216a:	f84c 1b04 	str.w	r1, [ip], #4
   1216e:	dcec      	bgt.n	1214a <__multadd+0x12>
   12170:	b1d7      	cbz	r7, 121a8 <__multadd+0x70>
   12172:	68a3      	ldr	r3, [r4, #8]
   12174:	42ab      	cmp	r3, r5
   12176:	dc12      	bgt.n	1219e <__multadd+0x66>
   12178:	6861      	ldr	r1, [r4, #4]
   1217a:	4630      	mov	r0, r6
   1217c:	3101      	adds	r1, #1
   1217e:	f7ff ff90 	bl	120a2 <_Balloc>
   12182:	4680      	mov	r8, r0
   12184:	6922      	ldr	r2, [r4, #16]
   12186:	f104 010c 	add.w	r1, r4, #12
   1218a:	3202      	adds	r2, #2
   1218c:	0092      	lsls	r2, r2, #2
   1218e:	300c      	adds	r0, #12
   12190:	f7ff ff7c 	bl	1208c <memcpy>
   12194:	4621      	mov	r1, r4
   12196:	4630      	mov	r0, r6
   12198:	f7ff ffb7 	bl	1210a <_Bfree>
   1219c:	4644      	mov	r4, r8
   1219e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   121a2:	3501      	adds	r5, #1
   121a4:	615f      	str	r7, [r3, #20]
   121a6:	6125      	str	r5, [r4, #16]
   121a8:	4620      	mov	r0, r4
   121aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000121ae <__s2b>:
   121ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   121b2:	4615      	mov	r5, r2
   121b4:	2209      	movs	r2, #9
   121b6:	461f      	mov	r7, r3
   121b8:	3308      	adds	r3, #8
   121ba:	460c      	mov	r4, r1
   121bc:	fb93 f3f2 	sdiv	r3, r3, r2
   121c0:	4606      	mov	r6, r0
   121c2:	2201      	movs	r2, #1
   121c4:	2100      	movs	r1, #0
   121c6:	429a      	cmp	r2, r3
   121c8:	db20      	blt.n	1220c <__s2b+0x5e>
   121ca:	4630      	mov	r0, r6
   121cc:	f7ff ff69 	bl	120a2 <_Balloc>
   121d0:	9b08      	ldr	r3, [sp, #32]
   121d2:	2d09      	cmp	r5, #9
   121d4:	6143      	str	r3, [r0, #20]
   121d6:	f04f 0301 	mov.w	r3, #1
   121da:	6103      	str	r3, [r0, #16]
   121dc:	dd19      	ble.n	12212 <__s2b+0x64>
   121de:	f104 0809 	add.w	r8, r4, #9
   121e2:	46c1      	mov	r9, r8
   121e4:	442c      	add	r4, r5
   121e6:	f819 3b01 	ldrb.w	r3, [r9], #1
   121ea:	4601      	mov	r1, r0
   121ec:	3b30      	subs	r3, #48	; 0x30
   121ee:	220a      	movs	r2, #10
   121f0:	4630      	mov	r0, r6
   121f2:	f7ff ffa1 	bl	12138 <__multadd>
   121f6:	45a1      	cmp	r9, r4
   121f8:	d1f5      	bne.n	121e6 <__s2b+0x38>
   121fa:	eb08 0405 	add.w	r4, r8, r5
   121fe:	3c08      	subs	r4, #8
   12200:	1b2d      	subs	r5, r5, r4
   12202:	1963      	adds	r3, r4, r5
   12204:	42bb      	cmp	r3, r7
   12206:	db07      	blt.n	12218 <__s2b+0x6a>
   12208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1220c:	0052      	lsls	r2, r2, #1
   1220e:	3101      	adds	r1, #1
   12210:	e7d9      	b.n	121c6 <__s2b+0x18>
   12212:	340a      	adds	r4, #10
   12214:	2509      	movs	r5, #9
   12216:	e7f3      	b.n	12200 <__s2b+0x52>
   12218:	f814 3b01 	ldrb.w	r3, [r4], #1
   1221c:	4601      	mov	r1, r0
   1221e:	3b30      	subs	r3, #48	; 0x30
   12220:	220a      	movs	r2, #10
   12222:	4630      	mov	r0, r6
   12224:	f7ff ff88 	bl	12138 <__multadd>
   12228:	e7eb      	b.n	12202 <__s2b+0x54>

0001222a <__hi0bits>:
   1222a:	0c02      	lsrs	r2, r0, #16
   1222c:	0412      	lsls	r2, r2, #16
   1222e:	4603      	mov	r3, r0
   12230:	b9b2      	cbnz	r2, 12260 <__hi0bits+0x36>
   12232:	0403      	lsls	r3, r0, #16
   12234:	2010      	movs	r0, #16
   12236:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   1223a:	bf04      	itt	eq
   1223c:	021b      	lsleq	r3, r3, #8
   1223e:	3008      	addeq	r0, #8
   12240:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   12244:	bf04      	itt	eq
   12246:	011b      	lsleq	r3, r3, #4
   12248:	3004      	addeq	r0, #4
   1224a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   1224e:	bf04      	itt	eq
   12250:	009b      	lsleq	r3, r3, #2
   12252:	3002      	addeq	r0, #2
   12254:	2b00      	cmp	r3, #0
   12256:	db06      	blt.n	12266 <__hi0bits+0x3c>
   12258:	005b      	lsls	r3, r3, #1
   1225a:	d503      	bpl.n	12264 <__hi0bits+0x3a>
   1225c:	3001      	adds	r0, #1
   1225e:	4770      	bx	lr
   12260:	2000      	movs	r0, #0
   12262:	e7e8      	b.n	12236 <__hi0bits+0xc>
   12264:	2020      	movs	r0, #32
   12266:	4770      	bx	lr

00012268 <__lo0bits>:
   12268:	6803      	ldr	r3, [r0, #0]
   1226a:	4601      	mov	r1, r0
   1226c:	f013 0207 	ands.w	r2, r3, #7
   12270:	d00b      	beq.n	1228a <__lo0bits+0x22>
   12272:	07da      	lsls	r2, r3, #31
   12274:	d423      	bmi.n	122be <__lo0bits+0x56>
   12276:	0798      	lsls	r0, r3, #30
   12278:	bf49      	itett	mi
   1227a:	085b      	lsrmi	r3, r3, #1
   1227c:	089b      	lsrpl	r3, r3, #2
   1227e:	2001      	movmi	r0, #1
   12280:	600b      	strmi	r3, [r1, #0]
   12282:	bf5c      	itt	pl
   12284:	600b      	strpl	r3, [r1, #0]
   12286:	2002      	movpl	r0, #2
   12288:	4770      	bx	lr
   1228a:	b298      	uxth	r0, r3
   1228c:	b9a8      	cbnz	r0, 122ba <__lo0bits+0x52>
   1228e:	2010      	movs	r0, #16
   12290:	0c1b      	lsrs	r3, r3, #16
   12292:	f013 0fff 	tst.w	r3, #255	; 0xff
   12296:	bf04      	itt	eq
   12298:	0a1b      	lsreq	r3, r3, #8
   1229a:	3008      	addeq	r0, #8
   1229c:	071a      	lsls	r2, r3, #28
   1229e:	bf04      	itt	eq
   122a0:	091b      	lsreq	r3, r3, #4
   122a2:	3004      	addeq	r0, #4
   122a4:	079a      	lsls	r2, r3, #30
   122a6:	bf04      	itt	eq
   122a8:	089b      	lsreq	r3, r3, #2
   122aa:	3002      	addeq	r0, #2
   122ac:	07da      	lsls	r2, r3, #31
   122ae:	d402      	bmi.n	122b6 <__lo0bits+0x4e>
   122b0:	085b      	lsrs	r3, r3, #1
   122b2:	d006      	beq.n	122c2 <__lo0bits+0x5a>
   122b4:	3001      	adds	r0, #1
   122b6:	600b      	str	r3, [r1, #0]
   122b8:	4770      	bx	lr
   122ba:	4610      	mov	r0, r2
   122bc:	e7e9      	b.n	12292 <__lo0bits+0x2a>
   122be:	2000      	movs	r0, #0
   122c0:	4770      	bx	lr
   122c2:	2020      	movs	r0, #32
   122c4:	4770      	bx	lr

000122c6 <__i2b>:
   122c6:	b510      	push	{r4, lr}
   122c8:	460c      	mov	r4, r1
   122ca:	2101      	movs	r1, #1
   122cc:	f7ff fee9 	bl	120a2 <_Balloc>
   122d0:	2201      	movs	r2, #1
   122d2:	6144      	str	r4, [r0, #20]
   122d4:	6102      	str	r2, [r0, #16]
   122d6:	bd10      	pop	{r4, pc}

000122d8 <__multiply>:
   122d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122dc:	4614      	mov	r4, r2
   122de:	690a      	ldr	r2, [r1, #16]
   122e0:	6923      	ldr	r3, [r4, #16]
   122e2:	4688      	mov	r8, r1
   122e4:	429a      	cmp	r2, r3
   122e6:	bfbe      	ittt	lt
   122e8:	460b      	movlt	r3, r1
   122ea:	46a0      	movlt	r8, r4
   122ec:	461c      	movlt	r4, r3
   122ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
   122f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
   122f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   122fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
   122fe:	eb07 0609 	add.w	r6, r7, r9
   12302:	42b3      	cmp	r3, r6
   12304:	bfb8      	it	lt
   12306:	3101      	addlt	r1, #1
   12308:	f7ff fecb 	bl	120a2 <_Balloc>
   1230c:	f100 0514 	add.w	r5, r0, #20
   12310:	462b      	mov	r3, r5
   12312:	2200      	movs	r2, #0
   12314:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   12318:	4573      	cmp	r3, lr
   1231a:	d316      	bcc.n	1234a <__multiply+0x72>
   1231c:	f104 0214 	add.w	r2, r4, #20
   12320:	f108 0114 	add.w	r1, r8, #20
   12324:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   12328:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   1232c:	9300      	str	r3, [sp, #0]
   1232e:	9b00      	ldr	r3, [sp, #0]
   12330:	9201      	str	r2, [sp, #4]
   12332:	4293      	cmp	r3, r2
   12334:	d80c      	bhi.n	12350 <__multiply+0x78>
   12336:	2e00      	cmp	r6, #0
   12338:	dd03      	ble.n	12342 <__multiply+0x6a>
   1233a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   1233e:	2b00      	cmp	r3, #0
   12340:	d05d      	beq.n	123fe <__multiply+0x126>
   12342:	6106      	str	r6, [r0, #16]
   12344:	b003      	add	sp, #12
   12346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1234a:	f843 2b04 	str.w	r2, [r3], #4
   1234e:	e7e3      	b.n	12318 <__multiply+0x40>
   12350:	f8b2 b000 	ldrh.w	fp, [r2]
   12354:	f1bb 0f00 	cmp.w	fp, #0
   12358:	d023      	beq.n	123a2 <__multiply+0xca>
   1235a:	4689      	mov	r9, r1
   1235c:	46ac      	mov	ip, r5
   1235e:	f04f 0800 	mov.w	r8, #0
   12362:	f859 4b04 	ldr.w	r4, [r9], #4
   12366:	f8dc a000 	ldr.w	sl, [ip]
   1236a:	b2a3      	uxth	r3, r4
   1236c:	fa1f fa8a 	uxth.w	sl, sl
   12370:	fb0b a303 	mla	r3, fp, r3, sl
   12374:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   12378:	f8dc 4000 	ldr.w	r4, [ip]
   1237c:	4443      	add	r3, r8
   1237e:	ea4f 4814 	mov.w	r8, r4, lsr #16
   12382:	fb0b 840a 	mla	r4, fp, sl, r8
   12386:	46e2      	mov	sl, ip
   12388:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   1238c:	b29b      	uxth	r3, r3
   1238e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   12392:	454f      	cmp	r7, r9
   12394:	ea4f 4814 	mov.w	r8, r4, lsr #16
   12398:	f84a 3b04 	str.w	r3, [sl], #4
   1239c:	d82b      	bhi.n	123f6 <__multiply+0x11e>
   1239e:	f8cc 8004 	str.w	r8, [ip, #4]
   123a2:	9b01      	ldr	r3, [sp, #4]
   123a4:	3204      	adds	r2, #4
   123a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   123aa:	f1ba 0f00 	cmp.w	sl, #0
   123ae:	d020      	beq.n	123f2 <__multiply+0x11a>
   123b0:	4689      	mov	r9, r1
   123b2:	46a8      	mov	r8, r5
   123b4:	f04f 0b00 	mov.w	fp, #0
   123b8:	682b      	ldr	r3, [r5, #0]
   123ba:	f8b9 c000 	ldrh.w	ip, [r9]
   123be:	f8b8 4002 	ldrh.w	r4, [r8, #2]
   123c2:	b29b      	uxth	r3, r3
   123c4:	fb0a 440c 	mla	r4, sl, ip, r4
   123c8:	46c4      	mov	ip, r8
   123ca:	445c      	add	r4, fp
   123cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   123d0:	f84c 3b04 	str.w	r3, [ip], #4
   123d4:	f859 3b04 	ldr.w	r3, [r9], #4
   123d8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
   123dc:	0c1b      	lsrs	r3, r3, #16
   123de:	fb0a b303 	mla	r3, sl, r3, fp
   123e2:	454f      	cmp	r7, r9
   123e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   123e8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   123ec:	d805      	bhi.n	123fa <__multiply+0x122>
   123ee:	f8c8 3004 	str.w	r3, [r8, #4]
   123f2:	3504      	adds	r5, #4
   123f4:	e79b      	b.n	1232e <__multiply+0x56>
   123f6:	46d4      	mov	ip, sl
   123f8:	e7b3      	b.n	12362 <__multiply+0x8a>
   123fa:	46e0      	mov	r8, ip
   123fc:	e7dd      	b.n	123ba <__multiply+0xe2>
   123fe:	3e01      	subs	r6, #1
   12400:	e799      	b.n	12336 <__multiply+0x5e>
	...

00012404 <__pow5mult>:
   12404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12408:	4615      	mov	r5, r2
   1240a:	f012 0203 	ands.w	r2, r2, #3
   1240e:	4606      	mov	r6, r0
   12410:	460f      	mov	r7, r1
   12412:	d007      	beq.n	12424 <__pow5mult+0x20>
   12414:	4c21      	ldr	r4, [pc, #132]	; (1249c <__pow5mult+0x98>)
   12416:	3a01      	subs	r2, #1
   12418:	2300      	movs	r3, #0
   1241a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1241e:	f7ff fe8b 	bl	12138 <__multadd>
   12422:	4607      	mov	r7, r0
   12424:	10ad      	asrs	r5, r5, #2
   12426:	d035      	beq.n	12494 <__pow5mult+0x90>
   12428:	6a74      	ldr	r4, [r6, #36]	; 0x24
   1242a:	b93c      	cbnz	r4, 1243c <__pow5mult+0x38>
   1242c:	2010      	movs	r0, #16
   1242e:	f7ff fe05 	bl	1203c <malloc>
   12432:	6270      	str	r0, [r6, #36]	; 0x24
   12434:	e9c0 4401 	strd	r4, r4, [r0, #4]
   12438:	6004      	str	r4, [r0, #0]
   1243a:	60c4      	str	r4, [r0, #12]
   1243c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   12440:	f8d8 4008 	ldr.w	r4, [r8, #8]
   12444:	b94c      	cbnz	r4, 1245a <__pow5mult+0x56>
   12446:	f240 2171 	movw	r1, #625	; 0x271
   1244a:	4630      	mov	r0, r6
   1244c:	f7ff ff3b 	bl	122c6 <__i2b>
   12450:	2300      	movs	r3, #0
   12452:	4604      	mov	r4, r0
   12454:	f8c8 0008 	str.w	r0, [r8, #8]
   12458:	6003      	str	r3, [r0, #0]
   1245a:	f04f 0800 	mov.w	r8, #0
   1245e:	07eb      	lsls	r3, r5, #31
   12460:	d50a      	bpl.n	12478 <__pow5mult+0x74>
   12462:	4639      	mov	r1, r7
   12464:	4622      	mov	r2, r4
   12466:	4630      	mov	r0, r6
   12468:	f7ff ff36 	bl	122d8 <__multiply>
   1246c:	4681      	mov	r9, r0
   1246e:	4639      	mov	r1, r7
   12470:	4630      	mov	r0, r6
   12472:	f7ff fe4a 	bl	1210a <_Bfree>
   12476:	464f      	mov	r7, r9
   12478:	106d      	asrs	r5, r5, #1
   1247a:	d00b      	beq.n	12494 <__pow5mult+0x90>
   1247c:	6820      	ldr	r0, [r4, #0]
   1247e:	b938      	cbnz	r0, 12490 <__pow5mult+0x8c>
   12480:	4622      	mov	r2, r4
   12482:	4621      	mov	r1, r4
   12484:	4630      	mov	r0, r6
   12486:	f7ff ff27 	bl	122d8 <__multiply>
   1248a:	6020      	str	r0, [r4, #0]
   1248c:	f8c0 8000 	str.w	r8, [r0]
   12490:	4604      	mov	r4, r0
   12492:	e7e4      	b.n	1245e <__pow5mult+0x5a>
   12494:	4638      	mov	r0, r7
   12496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1249a:	bf00      	nop
   1249c:	00015080 	.word	0x00015080

000124a0 <__lshift>:
   124a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   124a4:	460c      	mov	r4, r1
   124a6:	4607      	mov	r7, r0
   124a8:	4616      	mov	r6, r2
   124aa:	6923      	ldr	r3, [r4, #16]
   124ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
   124b0:	eb0a 0903 	add.w	r9, sl, r3
   124b4:	6849      	ldr	r1, [r1, #4]
   124b6:	68a3      	ldr	r3, [r4, #8]
   124b8:	f109 0501 	add.w	r5, r9, #1
   124bc:	42ab      	cmp	r3, r5
   124be:	db32      	blt.n	12526 <__lshift+0x86>
   124c0:	4638      	mov	r0, r7
   124c2:	f7ff fdee 	bl	120a2 <_Balloc>
   124c6:	2300      	movs	r3, #0
   124c8:	4680      	mov	r8, r0
   124ca:	461a      	mov	r2, r3
   124cc:	f100 0114 	add.w	r1, r0, #20
   124d0:	4553      	cmp	r3, sl
   124d2:	db2b      	blt.n	1252c <__lshift+0x8c>
   124d4:	6920      	ldr	r0, [r4, #16]
   124d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   124da:	f104 0314 	add.w	r3, r4, #20
   124de:	f016 021f 	ands.w	r2, r6, #31
   124e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   124e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   124ea:	d025      	beq.n	12538 <__lshift+0x98>
   124ec:	2000      	movs	r0, #0
   124ee:	f1c2 0e20 	rsb	lr, r2, #32
   124f2:	468a      	mov	sl, r1
   124f4:	681e      	ldr	r6, [r3, #0]
   124f6:	4096      	lsls	r6, r2
   124f8:	4330      	orrs	r0, r6
   124fa:	f84a 0b04 	str.w	r0, [sl], #4
   124fe:	f853 0b04 	ldr.w	r0, [r3], #4
   12502:	459c      	cmp	ip, r3
   12504:	fa20 f00e 	lsr.w	r0, r0, lr
   12508:	d814      	bhi.n	12534 <__lshift+0x94>
   1250a:	6048      	str	r0, [r1, #4]
   1250c:	b108      	cbz	r0, 12512 <__lshift+0x72>
   1250e:	f109 0502 	add.w	r5, r9, #2
   12512:	3d01      	subs	r5, #1
   12514:	4638      	mov	r0, r7
   12516:	f8c8 5010 	str.w	r5, [r8, #16]
   1251a:	4621      	mov	r1, r4
   1251c:	f7ff fdf5 	bl	1210a <_Bfree>
   12520:	4640      	mov	r0, r8
   12522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12526:	3101      	adds	r1, #1
   12528:	005b      	lsls	r3, r3, #1
   1252a:	e7c7      	b.n	124bc <__lshift+0x1c>
   1252c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   12530:	3301      	adds	r3, #1
   12532:	e7cd      	b.n	124d0 <__lshift+0x30>
   12534:	4651      	mov	r1, sl
   12536:	e7dc      	b.n	124f2 <__lshift+0x52>
   12538:	3904      	subs	r1, #4
   1253a:	f853 2b04 	ldr.w	r2, [r3], #4
   1253e:	459c      	cmp	ip, r3
   12540:	f841 2f04 	str.w	r2, [r1, #4]!
   12544:	d8f9      	bhi.n	1253a <__lshift+0x9a>
   12546:	e7e4      	b.n	12512 <__lshift+0x72>

00012548 <__mcmp>:
   12548:	6903      	ldr	r3, [r0, #16]
   1254a:	690a      	ldr	r2, [r1, #16]
   1254c:	b530      	push	{r4, r5, lr}
   1254e:	1a9b      	subs	r3, r3, r2
   12550:	d10c      	bne.n	1256c <__mcmp+0x24>
   12552:	0092      	lsls	r2, r2, #2
   12554:	3014      	adds	r0, #20
   12556:	3114      	adds	r1, #20
   12558:	1884      	adds	r4, r0, r2
   1255a:	4411      	add	r1, r2
   1255c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   12560:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   12564:	4295      	cmp	r5, r2
   12566:	d003      	beq.n	12570 <__mcmp+0x28>
   12568:	d305      	bcc.n	12576 <__mcmp+0x2e>
   1256a:	2301      	movs	r3, #1
   1256c:	4618      	mov	r0, r3
   1256e:	bd30      	pop	{r4, r5, pc}
   12570:	42a0      	cmp	r0, r4
   12572:	d3f3      	bcc.n	1255c <__mcmp+0x14>
   12574:	e7fa      	b.n	1256c <__mcmp+0x24>
   12576:	f04f 33ff 	mov.w	r3, #4294967295
   1257a:	e7f7      	b.n	1256c <__mcmp+0x24>

0001257c <__mdiff>:
   1257c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12580:	460d      	mov	r5, r1
   12582:	4607      	mov	r7, r0
   12584:	4611      	mov	r1, r2
   12586:	4628      	mov	r0, r5
   12588:	4614      	mov	r4, r2
   1258a:	f7ff ffdd 	bl	12548 <__mcmp>
   1258e:	1e06      	subs	r6, r0, #0
   12590:	d108      	bne.n	125a4 <__mdiff+0x28>
   12592:	4631      	mov	r1, r6
   12594:	4638      	mov	r0, r7
   12596:	f7ff fd84 	bl	120a2 <_Balloc>
   1259a:	2301      	movs	r3, #1
   1259c:	e9c0 3604 	strd	r3, r6, [r0, #16]
   125a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   125a4:	bfa4      	itt	ge
   125a6:	4623      	movge	r3, r4
   125a8:	462c      	movge	r4, r5
   125aa:	4638      	mov	r0, r7
   125ac:	6861      	ldr	r1, [r4, #4]
   125ae:	bfa6      	itte	ge
   125b0:	461d      	movge	r5, r3
   125b2:	2600      	movge	r6, #0
   125b4:	2601      	movlt	r6, #1
   125b6:	f7ff fd74 	bl	120a2 <_Balloc>
   125ba:	f04f 0e00 	mov.w	lr, #0
   125be:	60c6      	str	r6, [r0, #12]
   125c0:	692b      	ldr	r3, [r5, #16]
   125c2:	6926      	ldr	r6, [r4, #16]
   125c4:	f104 0214 	add.w	r2, r4, #20
   125c8:	f105 0914 	add.w	r9, r5, #20
   125cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   125d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   125d4:	f100 0114 	add.w	r1, r0, #20
   125d8:	f852 ab04 	ldr.w	sl, [r2], #4
   125dc:	f859 5b04 	ldr.w	r5, [r9], #4
   125e0:	fa1f f38a 	uxth.w	r3, sl
   125e4:	4473      	add	r3, lr
   125e6:	b2ac      	uxth	r4, r5
   125e8:	1b1b      	subs	r3, r3, r4
   125ea:	0c2c      	lsrs	r4, r5, #16
   125ec:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   125f0:	eb04 4423 	add.w	r4, r4, r3, asr #16
   125f4:	b29b      	uxth	r3, r3
   125f6:	ea4f 4e24 	mov.w	lr, r4, asr #16
   125fa:	45c8      	cmp	r8, r9
   125fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   12600:	4694      	mov	ip, r2
   12602:	f841 4b04 	str.w	r4, [r1], #4
   12606:	d8e7      	bhi.n	125d8 <__mdiff+0x5c>
   12608:	45bc      	cmp	ip, r7
   1260a:	d304      	bcc.n	12616 <__mdiff+0x9a>
   1260c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   12610:	b183      	cbz	r3, 12634 <__mdiff+0xb8>
   12612:	6106      	str	r6, [r0, #16]
   12614:	e7c4      	b.n	125a0 <__mdiff+0x24>
   12616:	f85c 4b04 	ldr.w	r4, [ip], #4
   1261a:	b2a2      	uxth	r2, r4
   1261c:	4472      	add	r2, lr
   1261e:	1413      	asrs	r3, r2, #16
   12620:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   12624:	b292      	uxth	r2, r2
   12626:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1262a:	ea4f 4e23 	mov.w	lr, r3, asr #16
   1262e:	f841 2b04 	str.w	r2, [r1], #4
   12632:	e7e9      	b.n	12608 <__mdiff+0x8c>
   12634:	3e01      	subs	r6, #1
   12636:	e7e9      	b.n	1260c <__mdiff+0x90>

00012638 <__ulp>:
   12638:	4b10      	ldr	r3, [pc, #64]	; (1267c <__ulp+0x44>)
   1263a:	400b      	ands	r3, r1
   1263c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   12640:	2b00      	cmp	r3, #0
   12642:	dd02      	ble.n	1264a <__ulp+0x12>
   12644:	2000      	movs	r0, #0
   12646:	4619      	mov	r1, r3
   12648:	4770      	bx	lr
   1264a:	425b      	negs	r3, r3
   1264c:	151b      	asrs	r3, r3, #20
   1264e:	2b13      	cmp	r3, #19
   12650:	f04f 0000 	mov.w	r0, #0
   12654:	f04f 0100 	mov.w	r1, #0
   12658:	dc04      	bgt.n	12664 <__ulp+0x2c>
   1265a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   1265e:	fa42 f103 	asr.w	r1, r2, r3
   12662:	4770      	bx	lr
   12664:	2201      	movs	r2, #1
   12666:	3b14      	subs	r3, #20
   12668:	2b1e      	cmp	r3, #30
   1266a:	bfce      	itee	gt
   1266c:	4613      	movgt	r3, r2
   1266e:	f1c3 031f 	rsble	r3, r3, #31
   12672:	fa02 f303 	lslle.w	r3, r2, r3
   12676:	4618      	mov	r0, r3
   12678:	4770      	bx	lr
   1267a:	bf00      	nop
   1267c:	7ff00000 	.word	0x7ff00000

00012680 <__b2d>:
   12680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12684:	6907      	ldr	r7, [r0, #16]
   12686:	f100 0914 	add.w	r9, r0, #20
   1268a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
   1268e:	f857 6c04 	ldr.w	r6, [r7, #-4]
   12692:	f1a7 0804 	sub.w	r8, r7, #4
   12696:	4630      	mov	r0, r6
   12698:	f7ff fdc7 	bl	1222a <__hi0bits>
   1269c:	f1c0 0320 	rsb	r3, r0, #32
   126a0:	280a      	cmp	r0, #10
   126a2:	600b      	str	r3, [r1, #0]
   126a4:	491e      	ldr	r1, [pc, #120]	; (12720 <__b2d+0xa0>)
   126a6:	dc17      	bgt.n	126d8 <__b2d+0x58>
   126a8:	45c1      	cmp	r9, r8
   126aa:	bf28      	it	cs
   126ac:	2200      	movcs	r2, #0
   126ae:	f1c0 0c0b 	rsb	ip, r0, #11
   126b2:	fa26 f30c 	lsr.w	r3, r6, ip
   126b6:	bf38      	it	cc
   126b8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
   126bc:	ea43 0501 	orr.w	r5, r3, r1
   126c0:	f100 0315 	add.w	r3, r0, #21
   126c4:	fa06 f303 	lsl.w	r3, r6, r3
   126c8:	fa22 f20c 	lsr.w	r2, r2, ip
   126cc:	ea43 0402 	orr.w	r4, r3, r2
   126d0:	4620      	mov	r0, r4
   126d2:	4629      	mov	r1, r5
   126d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   126d8:	45c1      	cmp	r9, r8
   126da:	bf3a      	itte	cc
   126dc:	f1a7 0808 	subcc.w	r8, r7, #8
   126e0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
   126e4:	2200      	movcs	r2, #0
   126e6:	f1b0 030b 	subs.w	r3, r0, #11
   126ea:	d015      	beq.n	12718 <__b2d+0x98>
   126ec:	409e      	lsls	r6, r3
   126ee:	f1c3 0720 	rsb	r7, r3, #32
   126f2:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
   126f6:	fa22 f107 	lsr.w	r1, r2, r7
   126fa:	45c8      	cmp	r8, r9
   126fc:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
   12700:	ea46 0501 	orr.w	r5, r6, r1
   12704:	bf94      	ite	ls
   12706:	2100      	movls	r1, #0
   12708:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
   1270c:	fa02 f003 	lsl.w	r0, r2, r3
   12710:	40f9      	lsrs	r1, r7
   12712:	ea40 0401 	orr.w	r4, r0, r1
   12716:	e7db      	b.n	126d0 <__b2d+0x50>
   12718:	ea46 0501 	orr.w	r5, r6, r1
   1271c:	4614      	mov	r4, r2
   1271e:	e7d7      	b.n	126d0 <__b2d+0x50>
   12720:	3ff00000 	.word	0x3ff00000

00012724 <__d2b>:
   12724:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12728:	461c      	mov	r4, r3
   1272a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   1272e:	2101      	movs	r1, #1
   12730:	4690      	mov	r8, r2
   12732:	f7ff fcb6 	bl	120a2 <_Balloc>
   12736:	f3c4 0213 	ubfx	r2, r4, #0, #20
   1273a:	f3c4 540a 	ubfx	r4, r4, #20, #11
   1273e:	4607      	mov	r7, r0
   12740:	bb34      	cbnz	r4, 12790 <__d2b+0x6c>
   12742:	9201      	str	r2, [sp, #4]
   12744:	f1b8 0200 	subs.w	r2, r8, #0
   12748:	d027      	beq.n	1279a <__d2b+0x76>
   1274a:	a802      	add	r0, sp, #8
   1274c:	f840 2d08 	str.w	r2, [r0, #-8]!
   12750:	f7ff fd8a 	bl	12268 <__lo0bits>
   12754:	9900      	ldr	r1, [sp, #0]
   12756:	b1f0      	cbz	r0, 12796 <__d2b+0x72>
   12758:	9a01      	ldr	r2, [sp, #4]
   1275a:	f1c0 0320 	rsb	r3, r0, #32
   1275e:	fa02 f303 	lsl.w	r3, r2, r3
   12762:	430b      	orrs	r3, r1
   12764:	40c2      	lsrs	r2, r0
   12766:	617b      	str	r3, [r7, #20]
   12768:	9201      	str	r2, [sp, #4]
   1276a:	9b01      	ldr	r3, [sp, #4]
   1276c:	2b00      	cmp	r3, #0
   1276e:	bf14      	ite	ne
   12770:	2102      	movne	r1, #2
   12772:	2101      	moveq	r1, #1
   12774:	61bb      	str	r3, [r7, #24]
   12776:	6139      	str	r1, [r7, #16]
   12778:	b1c4      	cbz	r4, 127ac <__d2b+0x88>
   1277a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   1277e:	4404      	add	r4, r0
   12780:	6034      	str	r4, [r6, #0]
   12782:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   12786:	6028      	str	r0, [r5, #0]
   12788:	4638      	mov	r0, r7
   1278a:	b002      	add	sp, #8
   1278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12790:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   12794:	e7d5      	b.n	12742 <__d2b+0x1e>
   12796:	6179      	str	r1, [r7, #20]
   12798:	e7e7      	b.n	1276a <__d2b+0x46>
   1279a:	a801      	add	r0, sp, #4
   1279c:	f7ff fd64 	bl	12268 <__lo0bits>
   127a0:	2101      	movs	r1, #1
   127a2:	9b01      	ldr	r3, [sp, #4]
   127a4:	6139      	str	r1, [r7, #16]
   127a6:	617b      	str	r3, [r7, #20]
   127a8:	3020      	adds	r0, #32
   127aa:	e7e5      	b.n	12778 <__d2b+0x54>
   127ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   127b0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   127b4:	6030      	str	r0, [r6, #0]
   127b6:	6918      	ldr	r0, [r3, #16]
   127b8:	f7ff fd37 	bl	1222a <__hi0bits>
   127bc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   127c0:	e7e1      	b.n	12786 <__d2b+0x62>

000127c2 <__ratio>:
   127c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c6:	4688      	mov	r8, r1
   127c8:	4669      	mov	r1, sp
   127ca:	4681      	mov	r9, r0
   127cc:	f7ff ff58 	bl	12680 <__b2d>
   127d0:	468b      	mov	fp, r1
   127d2:	4606      	mov	r6, r0
   127d4:	460f      	mov	r7, r1
   127d6:	4640      	mov	r0, r8
   127d8:	a901      	add	r1, sp, #4
   127da:	f7ff ff51 	bl	12680 <__b2d>
   127de:	f8d9 3010 	ldr.w	r3, [r9, #16]
   127e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
   127e6:	460d      	mov	r5, r1
   127e8:	eba3 0c02 	sub.w	ip, r3, r2
   127ec:	e9dd 3200 	ldrd	r3, r2, [sp]
   127f0:	1a9b      	subs	r3, r3, r2
   127f2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   127f6:	2b00      	cmp	r3, #0
   127f8:	bfd5      	itete	le
   127fa:	460a      	movle	r2, r1
   127fc:	463a      	movgt	r2, r7
   127fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   12802:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
   12806:	bfd8      	it	le
   12808:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
   1280c:	462b      	mov	r3, r5
   1280e:	4602      	mov	r2, r0
   12810:	4659      	mov	r1, fp
   12812:	4630      	mov	r0, r6
   12814:	f001 f998 	bl	13b48 <__aeabi_ddiv>
   12818:	b003      	add	sp, #12
   1281a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001281e <__copybits>:
   1281e:	3901      	subs	r1, #1
   12820:	b510      	push	{r4, lr}
   12822:	1149      	asrs	r1, r1, #5
   12824:	6914      	ldr	r4, [r2, #16]
   12826:	3101      	adds	r1, #1
   12828:	f102 0314 	add.w	r3, r2, #20
   1282c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   12830:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   12834:	42a3      	cmp	r3, r4
   12836:	4602      	mov	r2, r0
   12838:	d303      	bcc.n	12842 <__copybits+0x24>
   1283a:	2300      	movs	r3, #0
   1283c:	428a      	cmp	r2, r1
   1283e:	d305      	bcc.n	1284c <__copybits+0x2e>
   12840:	bd10      	pop	{r4, pc}
   12842:	f853 2b04 	ldr.w	r2, [r3], #4
   12846:	f840 2b04 	str.w	r2, [r0], #4
   1284a:	e7f3      	b.n	12834 <__copybits+0x16>
   1284c:	f842 3b04 	str.w	r3, [r2], #4
   12850:	e7f4      	b.n	1283c <__copybits+0x1e>

00012852 <__any_on>:
   12852:	f100 0214 	add.w	r2, r0, #20
   12856:	6900      	ldr	r0, [r0, #16]
   12858:	114b      	asrs	r3, r1, #5
   1285a:	4298      	cmp	r0, r3
   1285c:	b510      	push	{r4, lr}
   1285e:	db11      	blt.n	12884 <__any_on+0x32>
   12860:	dd0a      	ble.n	12878 <__any_on+0x26>
   12862:	f011 011f 	ands.w	r1, r1, #31
   12866:	d007      	beq.n	12878 <__any_on+0x26>
   12868:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   1286c:	fa24 f001 	lsr.w	r0, r4, r1
   12870:	fa00 f101 	lsl.w	r1, r0, r1
   12874:	428c      	cmp	r4, r1
   12876:	d10b      	bne.n	12890 <__any_on+0x3e>
   12878:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1287c:	4293      	cmp	r3, r2
   1287e:	d803      	bhi.n	12888 <__any_on+0x36>
   12880:	2000      	movs	r0, #0
   12882:	bd10      	pop	{r4, pc}
   12884:	4603      	mov	r3, r0
   12886:	e7f7      	b.n	12878 <__any_on+0x26>
   12888:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1288c:	2900      	cmp	r1, #0
   1288e:	d0f5      	beq.n	1287c <__any_on+0x2a>
   12890:	2001      	movs	r0, #1
   12892:	e7f6      	b.n	12882 <__any_on+0x30>

00012894 <_calloc_r>:
   12894:	b538      	push	{r3, r4, r5, lr}
   12896:	fb02 f401 	mul.w	r4, r2, r1
   1289a:	4621      	mov	r1, r4
   1289c:	f000 f854 	bl	12948 <_malloc_r>
   128a0:	4605      	mov	r5, r0
   128a2:	b118      	cbz	r0, 128ac <_calloc_r+0x18>
   128a4:	4622      	mov	r2, r4
   128a6:	2100      	movs	r1, #0
   128a8:	f7fc fc52 	bl	f150 <memset>
   128ac:	4628      	mov	r0, r5
   128ae:	bd38      	pop	{r3, r4, r5, pc}

000128b0 <_free_r>:
   128b0:	b538      	push	{r3, r4, r5, lr}
   128b2:	4605      	mov	r5, r0
   128b4:	2900      	cmp	r1, #0
   128b6:	d043      	beq.n	12940 <_free_r+0x90>
   128b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
   128bc:	1f0c      	subs	r4, r1, #4
   128be:	2b00      	cmp	r3, #0
   128c0:	bfb8      	it	lt
   128c2:	18e4      	addlt	r4, r4, r3
   128c4:	f000 fdf5 	bl	134b2 <__malloc_lock>
   128c8:	4a1e      	ldr	r2, [pc, #120]	; (12944 <_free_r+0x94>)
   128ca:	6813      	ldr	r3, [r2, #0]
   128cc:	4610      	mov	r0, r2
   128ce:	b933      	cbnz	r3, 128de <_free_r+0x2e>
   128d0:	6063      	str	r3, [r4, #4]
   128d2:	6014      	str	r4, [r2, #0]
   128d4:	4628      	mov	r0, r5
   128d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   128da:	f000 bdeb 	b.w	134b4 <__malloc_unlock>
   128de:	42a3      	cmp	r3, r4
   128e0:	d90b      	bls.n	128fa <_free_r+0x4a>
   128e2:	6821      	ldr	r1, [r4, #0]
   128e4:	1862      	adds	r2, r4, r1
   128e6:	4293      	cmp	r3, r2
   128e8:	bf01      	itttt	eq
   128ea:	681a      	ldreq	r2, [r3, #0]
   128ec:	685b      	ldreq	r3, [r3, #4]
   128ee:	1852      	addeq	r2, r2, r1
   128f0:	6022      	streq	r2, [r4, #0]
   128f2:	6063      	str	r3, [r4, #4]
   128f4:	6004      	str	r4, [r0, #0]
   128f6:	e7ed      	b.n	128d4 <_free_r+0x24>
   128f8:	4613      	mov	r3, r2
   128fa:	685a      	ldr	r2, [r3, #4]
   128fc:	b10a      	cbz	r2, 12902 <_free_r+0x52>
   128fe:	42a2      	cmp	r2, r4
   12900:	d9fa      	bls.n	128f8 <_free_r+0x48>
   12902:	6819      	ldr	r1, [r3, #0]
   12904:	1858      	adds	r0, r3, r1
   12906:	42a0      	cmp	r0, r4
   12908:	d10b      	bne.n	12922 <_free_r+0x72>
   1290a:	6820      	ldr	r0, [r4, #0]
   1290c:	4401      	add	r1, r0
   1290e:	1858      	adds	r0, r3, r1
   12910:	4282      	cmp	r2, r0
   12912:	6019      	str	r1, [r3, #0]
   12914:	d1de      	bne.n	128d4 <_free_r+0x24>
   12916:	6810      	ldr	r0, [r2, #0]
   12918:	6852      	ldr	r2, [r2, #4]
   1291a:	4401      	add	r1, r0
   1291c:	6019      	str	r1, [r3, #0]
   1291e:	605a      	str	r2, [r3, #4]
   12920:	e7d8      	b.n	128d4 <_free_r+0x24>
   12922:	d902      	bls.n	1292a <_free_r+0x7a>
   12924:	230c      	movs	r3, #12
   12926:	602b      	str	r3, [r5, #0]
   12928:	e7d4      	b.n	128d4 <_free_r+0x24>
   1292a:	6820      	ldr	r0, [r4, #0]
   1292c:	1821      	adds	r1, r4, r0
   1292e:	428a      	cmp	r2, r1
   12930:	bf01      	itttt	eq
   12932:	6811      	ldreq	r1, [r2, #0]
   12934:	6852      	ldreq	r2, [r2, #4]
   12936:	1809      	addeq	r1, r1, r0
   12938:	6021      	streq	r1, [r4, #0]
   1293a:	6062      	str	r2, [r4, #4]
   1293c:	605c      	str	r4, [r3, #4]
   1293e:	e7c9      	b.n	128d4 <_free_r+0x24>
   12940:	bd38      	pop	{r3, r4, r5, pc}
   12942:	bf00      	nop
   12944:	00025b68 	.word	0x00025b68

00012948 <_malloc_r>:
   12948:	b570      	push	{r4, r5, r6, lr}
   1294a:	1ccd      	adds	r5, r1, #3
   1294c:	f025 0503 	bic.w	r5, r5, #3
   12950:	3508      	adds	r5, #8
   12952:	2d0c      	cmp	r5, #12
   12954:	bf38      	it	cc
   12956:	250c      	movcc	r5, #12
   12958:	2d00      	cmp	r5, #0
   1295a:	4606      	mov	r6, r0
   1295c:	db01      	blt.n	12962 <_malloc_r+0x1a>
   1295e:	42a9      	cmp	r1, r5
   12960:	d903      	bls.n	1296a <_malloc_r+0x22>
   12962:	230c      	movs	r3, #12
   12964:	6033      	str	r3, [r6, #0]
   12966:	2000      	movs	r0, #0
   12968:	bd70      	pop	{r4, r5, r6, pc}
   1296a:	f000 fda2 	bl	134b2 <__malloc_lock>
   1296e:	4a21      	ldr	r2, [pc, #132]	; (129f4 <_malloc_r+0xac>)
   12970:	6814      	ldr	r4, [r2, #0]
   12972:	4621      	mov	r1, r4
   12974:	b991      	cbnz	r1, 1299c <_malloc_r+0x54>
   12976:	4c20      	ldr	r4, [pc, #128]	; (129f8 <_malloc_r+0xb0>)
   12978:	6823      	ldr	r3, [r4, #0]
   1297a:	b91b      	cbnz	r3, 12984 <_malloc_r+0x3c>
   1297c:	4630      	mov	r0, r6
   1297e:	f000 fb03 	bl	12f88 <_sbrk_r>
   12982:	6020      	str	r0, [r4, #0]
   12984:	4629      	mov	r1, r5
   12986:	4630      	mov	r0, r6
   12988:	f000 fafe 	bl	12f88 <_sbrk_r>
   1298c:	1c43      	adds	r3, r0, #1
   1298e:	d124      	bne.n	129da <_malloc_r+0x92>
   12990:	230c      	movs	r3, #12
   12992:	4630      	mov	r0, r6
   12994:	6033      	str	r3, [r6, #0]
   12996:	f000 fd8d 	bl	134b4 <__malloc_unlock>
   1299a:	e7e4      	b.n	12966 <_malloc_r+0x1e>
   1299c:	680b      	ldr	r3, [r1, #0]
   1299e:	1b5b      	subs	r3, r3, r5
   129a0:	d418      	bmi.n	129d4 <_malloc_r+0x8c>
   129a2:	2b0b      	cmp	r3, #11
   129a4:	d90f      	bls.n	129c6 <_malloc_r+0x7e>
   129a6:	600b      	str	r3, [r1, #0]
   129a8:	18cc      	adds	r4, r1, r3
   129aa:	50cd      	str	r5, [r1, r3]
   129ac:	4630      	mov	r0, r6
   129ae:	f000 fd81 	bl	134b4 <__malloc_unlock>
   129b2:	f104 000b 	add.w	r0, r4, #11
   129b6:	1d23      	adds	r3, r4, #4
   129b8:	f020 0007 	bic.w	r0, r0, #7
   129bc:	1ac3      	subs	r3, r0, r3
   129be:	d0d3      	beq.n	12968 <_malloc_r+0x20>
   129c0:	425a      	negs	r2, r3
   129c2:	50e2      	str	r2, [r4, r3]
   129c4:	e7d0      	b.n	12968 <_malloc_r+0x20>
   129c6:	684b      	ldr	r3, [r1, #4]
   129c8:	428c      	cmp	r4, r1
   129ca:	bf16      	itet	ne
   129cc:	6063      	strne	r3, [r4, #4]
   129ce:	6013      	streq	r3, [r2, #0]
   129d0:	460c      	movne	r4, r1
   129d2:	e7eb      	b.n	129ac <_malloc_r+0x64>
   129d4:	460c      	mov	r4, r1
   129d6:	6849      	ldr	r1, [r1, #4]
   129d8:	e7cc      	b.n	12974 <_malloc_r+0x2c>
   129da:	1cc4      	adds	r4, r0, #3
   129dc:	f024 0403 	bic.w	r4, r4, #3
   129e0:	42a0      	cmp	r0, r4
   129e2:	d005      	beq.n	129f0 <_malloc_r+0xa8>
   129e4:	1a21      	subs	r1, r4, r0
   129e6:	4630      	mov	r0, r6
   129e8:	f000 face 	bl	12f88 <_sbrk_r>
   129ec:	3001      	adds	r0, #1
   129ee:	d0cf      	beq.n	12990 <_malloc_r+0x48>
   129f0:	6025      	str	r5, [r4, #0]
   129f2:	e7db      	b.n	129ac <_malloc_r+0x64>
   129f4:	00025b68 	.word	0x00025b68
   129f8:	00025b6c 	.word	0x00025b6c

000129fc <__ssputs_r>:
   129fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12a00:	688e      	ldr	r6, [r1, #8]
   12a02:	4682      	mov	sl, r0
   12a04:	429e      	cmp	r6, r3
   12a06:	460c      	mov	r4, r1
   12a08:	4690      	mov	r8, r2
   12a0a:	4699      	mov	r9, r3
   12a0c:	d837      	bhi.n	12a7e <__ssputs_r+0x82>
   12a0e:	898a      	ldrh	r2, [r1, #12]
   12a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
   12a14:	d031      	beq.n	12a7a <__ssputs_r+0x7e>
   12a16:	2302      	movs	r3, #2
   12a18:	6825      	ldr	r5, [r4, #0]
   12a1a:	6909      	ldr	r1, [r1, #16]
   12a1c:	1a6f      	subs	r7, r5, r1
   12a1e:	6965      	ldr	r5, [r4, #20]
   12a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   12a24:	fb95 f5f3 	sdiv	r5, r5, r3
   12a28:	f109 0301 	add.w	r3, r9, #1
   12a2c:	443b      	add	r3, r7
   12a2e:	429d      	cmp	r5, r3
   12a30:	bf38      	it	cc
   12a32:	461d      	movcc	r5, r3
   12a34:	0553      	lsls	r3, r2, #21
   12a36:	d530      	bpl.n	12a9a <__ssputs_r+0x9e>
   12a38:	4629      	mov	r1, r5
   12a3a:	f7ff ff85 	bl	12948 <_malloc_r>
   12a3e:	4606      	mov	r6, r0
   12a40:	b950      	cbnz	r0, 12a58 <__ssputs_r+0x5c>
   12a42:	230c      	movs	r3, #12
   12a44:	f04f 30ff 	mov.w	r0, #4294967295
   12a48:	f8ca 3000 	str.w	r3, [sl]
   12a4c:	89a3      	ldrh	r3, [r4, #12]
   12a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12a52:	81a3      	strh	r3, [r4, #12]
   12a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a58:	463a      	mov	r2, r7
   12a5a:	6921      	ldr	r1, [r4, #16]
   12a5c:	f7ff fb16 	bl	1208c <memcpy>
   12a60:	89a3      	ldrh	r3, [r4, #12]
   12a62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   12a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12a6a:	81a3      	strh	r3, [r4, #12]
   12a6c:	6126      	str	r6, [r4, #16]
   12a6e:	443e      	add	r6, r7
   12a70:	6026      	str	r6, [r4, #0]
   12a72:	464e      	mov	r6, r9
   12a74:	6165      	str	r5, [r4, #20]
   12a76:	1bed      	subs	r5, r5, r7
   12a78:	60a5      	str	r5, [r4, #8]
   12a7a:	454e      	cmp	r6, r9
   12a7c:	d900      	bls.n	12a80 <__ssputs_r+0x84>
   12a7e:	464e      	mov	r6, r9
   12a80:	4632      	mov	r2, r6
   12a82:	4641      	mov	r1, r8
   12a84:	6820      	ldr	r0, [r4, #0]
   12a86:	f000 fcfb 	bl	13480 <memmove>
   12a8a:	68a3      	ldr	r3, [r4, #8]
   12a8c:	2000      	movs	r0, #0
   12a8e:	1b9b      	subs	r3, r3, r6
   12a90:	60a3      	str	r3, [r4, #8]
   12a92:	6823      	ldr	r3, [r4, #0]
   12a94:	441e      	add	r6, r3
   12a96:	6026      	str	r6, [r4, #0]
   12a98:	e7dc      	b.n	12a54 <__ssputs_r+0x58>
   12a9a:	462a      	mov	r2, r5
   12a9c:	f000 fd0b 	bl	134b6 <_realloc_r>
   12aa0:	4606      	mov	r6, r0
   12aa2:	2800      	cmp	r0, #0
   12aa4:	d1e2      	bne.n	12a6c <__ssputs_r+0x70>
   12aa6:	6921      	ldr	r1, [r4, #16]
   12aa8:	4650      	mov	r0, sl
   12aaa:	f7ff ff01 	bl	128b0 <_free_r>
   12aae:	e7c8      	b.n	12a42 <__ssputs_r+0x46>

00012ab0 <_svfiprintf_r>:
   12ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ab4:	461d      	mov	r5, r3
   12ab6:	898b      	ldrh	r3, [r1, #12]
   12ab8:	b09d      	sub	sp, #116	; 0x74
   12aba:	061f      	lsls	r7, r3, #24
   12abc:	4680      	mov	r8, r0
   12abe:	460c      	mov	r4, r1
   12ac0:	4616      	mov	r6, r2
   12ac2:	d50f      	bpl.n	12ae4 <_svfiprintf_r+0x34>
   12ac4:	690b      	ldr	r3, [r1, #16]
   12ac6:	b96b      	cbnz	r3, 12ae4 <_svfiprintf_r+0x34>
   12ac8:	2140      	movs	r1, #64	; 0x40
   12aca:	f7ff ff3d 	bl	12948 <_malloc_r>
   12ace:	6020      	str	r0, [r4, #0]
   12ad0:	6120      	str	r0, [r4, #16]
   12ad2:	b928      	cbnz	r0, 12ae0 <_svfiprintf_r+0x30>
   12ad4:	230c      	movs	r3, #12
   12ad6:	f8c8 3000 	str.w	r3, [r8]
   12ada:	f04f 30ff 	mov.w	r0, #4294967295
   12ade:	e0c8      	b.n	12c72 <_svfiprintf_r+0x1c2>
   12ae0:	2340      	movs	r3, #64	; 0x40
   12ae2:	6163      	str	r3, [r4, #20]
   12ae4:	2300      	movs	r3, #0
   12ae6:	9309      	str	r3, [sp, #36]	; 0x24
   12ae8:	2320      	movs	r3, #32
   12aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   12aee:	2330      	movs	r3, #48	; 0x30
   12af0:	f04f 0b01 	mov.w	fp, #1
   12af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   12af8:	9503      	str	r5, [sp, #12]
   12afa:	4637      	mov	r7, r6
   12afc:	463d      	mov	r5, r7
   12afe:	f815 3b01 	ldrb.w	r3, [r5], #1
   12b02:	b10b      	cbz	r3, 12b08 <_svfiprintf_r+0x58>
   12b04:	2b25      	cmp	r3, #37	; 0x25
   12b06:	d13e      	bne.n	12b86 <_svfiprintf_r+0xd6>
   12b08:	ebb7 0a06 	subs.w	sl, r7, r6
   12b0c:	d00b      	beq.n	12b26 <_svfiprintf_r+0x76>
   12b0e:	4653      	mov	r3, sl
   12b10:	4632      	mov	r2, r6
   12b12:	4621      	mov	r1, r4
   12b14:	4640      	mov	r0, r8
   12b16:	f7ff ff71 	bl	129fc <__ssputs_r>
   12b1a:	3001      	adds	r0, #1
   12b1c:	f000 80a4 	beq.w	12c68 <_svfiprintf_r+0x1b8>
   12b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12b22:	4453      	add	r3, sl
   12b24:	9309      	str	r3, [sp, #36]	; 0x24
   12b26:	783b      	ldrb	r3, [r7, #0]
   12b28:	2b00      	cmp	r3, #0
   12b2a:	f000 809d 	beq.w	12c68 <_svfiprintf_r+0x1b8>
   12b2e:	2300      	movs	r3, #0
   12b30:	f04f 32ff 	mov.w	r2, #4294967295
   12b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
   12b38:	9304      	str	r3, [sp, #16]
   12b3a:	9307      	str	r3, [sp, #28]
   12b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   12b40:	931a      	str	r3, [sp, #104]	; 0x68
   12b42:	462f      	mov	r7, r5
   12b44:	2205      	movs	r2, #5
   12b46:	f817 1b01 	ldrb.w	r1, [r7], #1
   12b4a:	4850      	ldr	r0, [pc, #320]	; (12c8c <_svfiprintf_r+0x1dc>)
   12b4c:	f7ff fa90 	bl	12070 <memchr>
   12b50:	9b04      	ldr	r3, [sp, #16]
   12b52:	b9d0      	cbnz	r0, 12b8a <_svfiprintf_r+0xda>
   12b54:	06d9      	lsls	r1, r3, #27
   12b56:	bf44      	itt	mi
   12b58:	2220      	movmi	r2, #32
   12b5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   12b5e:	071a      	lsls	r2, r3, #28
   12b60:	bf44      	itt	mi
   12b62:	222b      	movmi	r2, #43	; 0x2b
   12b64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   12b68:	782a      	ldrb	r2, [r5, #0]
   12b6a:	2a2a      	cmp	r2, #42	; 0x2a
   12b6c:	d015      	beq.n	12b9a <_svfiprintf_r+0xea>
   12b6e:	462f      	mov	r7, r5
   12b70:	2000      	movs	r0, #0
   12b72:	250a      	movs	r5, #10
   12b74:	9a07      	ldr	r2, [sp, #28]
   12b76:	4639      	mov	r1, r7
   12b78:	f811 3b01 	ldrb.w	r3, [r1], #1
   12b7c:	3b30      	subs	r3, #48	; 0x30
   12b7e:	2b09      	cmp	r3, #9
   12b80:	d94d      	bls.n	12c1e <_svfiprintf_r+0x16e>
   12b82:	b1b8      	cbz	r0, 12bb4 <_svfiprintf_r+0x104>
   12b84:	e00f      	b.n	12ba6 <_svfiprintf_r+0xf6>
   12b86:	462f      	mov	r7, r5
   12b88:	e7b8      	b.n	12afc <_svfiprintf_r+0x4c>
   12b8a:	4a40      	ldr	r2, [pc, #256]	; (12c8c <_svfiprintf_r+0x1dc>)
   12b8c:	463d      	mov	r5, r7
   12b8e:	1a80      	subs	r0, r0, r2
   12b90:	fa0b f000 	lsl.w	r0, fp, r0
   12b94:	4318      	orrs	r0, r3
   12b96:	9004      	str	r0, [sp, #16]
   12b98:	e7d3      	b.n	12b42 <_svfiprintf_r+0x92>
   12b9a:	9a03      	ldr	r2, [sp, #12]
   12b9c:	1d11      	adds	r1, r2, #4
   12b9e:	6812      	ldr	r2, [r2, #0]
   12ba0:	9103      	str	r1, [sp, #12]
   12ba2:	2a00      	cmp	r2, #0
   12ba4:	db01      	blt.n	12baa <_svfiprintf_r+0xfa>
   12ba6:	9207      	str	r2, [sp, #28]
   12ba8:	e004      	b.n	12bb4 <_svfiprintf_r+0x104>
   12baa:	4252      	negs	r2, r2
   12bac:	f043 0302 	orr.w	r3, r3, #2
   12bb0:	9207      	str	r2, [sp, #28]
   12bb2:	9304      	str	r3, [sp, #16]
   12bb4:	783b      	ldrb	r3, [r7, #0]
   12bb6:	2b2e      	cmp	r3, #46	; 0x2e
   12bb8:	d10c      	bne.n	12bd4 <_svfiprintf_r+0x124>
   12bba:	787b      	ldrb	r3, [r7, #1]
   12bbc:	2b2a      	cmp	r3, #42	; 0x2a
   12bbe:	d133      	bne.n	12c28 <_svfiprintf_r+0x178>
   12bc0:	9b03      	ldr	r3, [sp, #12]
   12bc2:	3702      	adds	r7, #2
   12bc4:	1d1a      	adds	r2, r3, #4
   12bc6:	681b      	ldr	r3, [r3, #0]
   12bc8:	9203      	str	r2, [sp, #12]
   12bca:	2b00      	cmp	r3, #0
   12bcc:	bfb8      	it	lt
   12bce:	f04f 33ff 	movlt.w	r3, #4294967295
   12bd2:	9305      	str	r3, [sp, #20]
   12bd4:	4d2e      	ldr	r5, [pc, #184]	; (12c90 <_svfiprintf_r+0x1e0>)
   12bd6:	2203      	movs	r2, #3
   12bd8:	7839      	ldrb	r1, [r7, #0]
   12bda:	4628      	mov	r0, r5
   12bdc:	f7ff fa48 	bl	12070 <memchr>
   12be0:	b138      	cbz	r0, 12bf2 <_svfiprintf_r+0x142>
   12be2:	2340      	movs	r3, #64	; 0x40
   12be4:	1b40      	subs	r0, r0, r5
   12be6:	fa03 f000 	lsl.w	r0, r3, r0
   12bea:	9b04      	ldr	r3, [sp, #16]
   12bec:	3701      	adds	r7, #1
   12bee:	4303      	orrs	r3, r0
   12bf0:	9304      	str	r3, [sp, #16]
   12bf2:	7839      	ldrb	r1, [r7, #0]
   12bf4:	2206      	movs	r2, #6
   12bf6:	4827      	ldr	r0, [pc, #156]	; (12c94 <_svfiprintf_r+0x1e4>)
   12bf8:	1c7e      	adds	r6, r7, #1
   12bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   12bfe:	f7ff fa37 	bl	12070 <memchr>
   12c02:	2800      	cmp	r0, #0
   12c04:	d038      	beq.n	12c78 <_svfiprintf_r+0x1c8>
   12c06:	4b24      	ldr	r3, [pc, #144]	; (12c98 <_svfiprintf_r+0x1e8>)
   12c08:	bb13      	cbnz	r3, 12c50 <_svfiprintf_r+0x1a0>
   12c0a:	9b03      	ldr	r3, [sp, #12]
   12c0c:	3307      	adds	r3, #7
   12c0e:	f023 0307 	bic.w	r3, r3, #7
   12c12:	3308      	adds	r3, #8
   12c14:	9303      	str	r3, [sp, #12]
   12c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12c18:	444b      	add	r3, r9
   12c1a:	9309      	str	r3, [sp, #36]	; 0x24
   12c1c:	e76d      	b.n	12afa <_svfiprintf_r+0x4a>
   12c1e:	fb05 3202 	mla	r2, r5, r2, r3
   12c22:	2001      	movs	r0, #1
   12c24:	460f      	mov	r7, r1
   12c26:	e7a6      	b.n	12b76 <_svfiprintf_r+0xc6>
   12c28:	2300      	movs	r3, #0
   12c2a:	250a      	movs	r5, #10
   12c2c:	4619      	mov	r1, r3
   12c2e:	3701      	adds	r7, #1
   12c30:	9305      	str	r3, [sp, #20]
   12c32:	4638      	mov	r0, r7
   12c34:	f810 2b01 	ldrb.w	r2, [r0], #1
   12c38:	3a30      	subs	r2, #48	; 0x30
   12c3a:	2a09      	cmp	r2, #9
   12c3c:	d903      	bls.n	12c46 <_svfiprintf_r+0x196>
   12c3e:	2b00      	cmp	r3, #0
   12c40:	d0c8      	beq.n	12bd4 <_svfiprintf_r+0x124>
   12c42:	9105      	str	r1, [sp, #20]
   12c44:	e7c6      	b.n	12bd4 <_svfiprintf_r+0x124>
   12c46:	fb05 2101 	mla	r1, r5, r1, r2
   12c4a:	2301      	movs	r3, #1
   12c4c:	4607      	mov	r7, r0
   12c4e:	e7f0      	b.n	12c32 <_svfiprintf_r+0x182>
   12c50:	ab03      	add	r3, sp, #12
   12c52:	9300      	str	r3, [sp, #0]
   12c54:	4622      	mov	r2, r4
   12c56:	4b11      	ldr	r3, [pc, #68]	; (12c9c <_svfiprintf_r+0x1ec>)
   12c58:	a904      	add	r1, sp, #16
   12c5a:	4640      	mov	r0, r8
   12c5c:	f7fc fb12 	bl	f284 <_printf_float>
   12c60:	f1b0 3fff 	cmp.w	r0, #4294967295
   12c64:	4681      	mov	r9, r0
   12c66:	d1d6      	bne.n	12c16 <_svfiprintf_r+0x166>
   12c68:	89a3      	ldrh	r3, [r4, #12]
   12c6a:	065b      	lsls	r3, r3, #25
   12c6c:	f53f af35 	bmi.w	12ada <_svfiprintf_r+0x2a>
   12c70:	9809      	ldr	r0, [sp, #36]	; 0x24
   12c72:	b01d      	add	sp, #116	; 0x74
   12c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c78:	ab03      	add	r3, sp, #12
   12c7a:	9300      	str	r3, [sp, #0]
   12c7c:	4622      	mov	r2, r4
   12c7e:	4b07      	ldr	r3, [pc, #28]	; (12c9c <_svfiprintf_r+0x1ec>)
   12c80:	a904      	add	r1, sp, #16
   12c82:	4640      	mov	r0, r8
   12c84:	f7fc fdaa 	bl	f7dc <_printf_i>
   12c88:	e7ea      	b.n	12c60 <_svfiprintf_r+0x1b0>
   12c8a:	bf00      	nop
   12c8c:	0001508c 	.word	0x0001508c
   12c90:	00015092 	.word	0x00015092
   12c94:	00015096 	.word	0x00015096
   12c98:	0000f285 	.word	0x0000f285
   12c9c:	000129fd 	.word	0x000129fd

00012ca0 <__sfputc_r>:
   12ca0:	6893      	ldr	r3, [r2, #8]
   12ca2:	b410      	push	{r4}
   12ca4:	3b01      	subs	r3, #1
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	6093      	str	r3, [r2, #8]
   12caa:	da07      	bge.n	12cbc <__sfputc_r+0x1c>
   12cac:	6994      	ldr	r4, [r2, #24]
   12cae:	42a3      	cmp	r3, r4
   12cb0:	db01      	blt.n	12cb6 <__sfputc_r+0x16>
   12cb2:	290a      	cmp	r1, #10
   12cb4:	d102      	bne.n	12cbc <__sfputc_r+0x1c>
   12cb6:	bc10      	pop	{r4}
   12cb8:	f000 b9cc 	b.w	13054 <__swbuf_r>
   12cbc:	6813      	ldr	r3, [r2, #0]
   12cbe:	1c58      	adds	r0, r3, #1
   12cc0:	6010      	str	r0, [r2, #0]
   12cc2:	7019      	strb	r1, [r3, #0]
   12cc4:	4608      	mov	r0, r1
   12cc6:	bc10      	pop	{r4}
   12cc8:	4770      	bx	lr

00012cca <__sfputs_r>:
   12cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ccc:	4606      	mov	r6, r0
   12cce:	460f      	mov	r7, r1
   12cd0:	4614      	mov	r4, r2
   12cd2:	18d5      	adds	r5, r2, r3
   12cd4:	42ac      	cmp	r4, r5
   12cd6:	d101      	bne.n	12cdc <__sfputs_r+0x12>
   12cd8:	2000      	movs	r0, #0
   12cda:	e007      	b.n	12cec <__sfputs_r+0x22>
   12cdc:	463a      	mov	r2, r7
   12cde:	f814 1b01 	ldrb.w	r1, [r4], #1
   12ce2:	4630      	mov	r0, r6
   12ce4:	f7ff ffdc 	bl	12ca0 <__sfputc_r>
   12ce8:	1c43      	adds	r3, r0, #1
   12cea:	d1f3      	bne.n	12cd4 <__sfputs_r+0xa>
   12cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00012cf0 <_vfiprintf_r>:
   12cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cf4:	460c      	mov	r4, r1
   12cf6:	b09d      	sub	sp, #116	; 0x74
   12cf8:	4617      	mov	r7, r2
   12cfa:	461d      	mov	r5, r3
   12cfc:	4606      	mov	r6, r0
   12cfe:	b118      	cbz	r0, 12d08 <_vfiprintf_r+0x18>
   12d00:	6983      	ldr	r3, [r0, #24]
   12d02:	b90b      	cbnz	r3, 12d08 <_vfiprintf_r+0x18>
   12d04:	f7fe fdd4 	bl	118b0 <__sinit>
   12d08:	4b7c      	ldr	r3, [pc, #496]	; (12efc <_vfiprintf_r+0x20c>)
   12d0a:	429c      	cmp	r4, r3
   12d0c:	d158      	bne.n	12dc0 <_vfiprintf_r+0xd0>
   12d0e:	6874      	ldr	r4, [r6, #4]
   12d10:	89a3      	ldrh	r3, [r4, #12]
   12d12:	0718      	lsls	r0, r3, #28
   12d14:	d55e      	bpl.n	12dd4 <_vfiprintf_r+0xe4>
   12d16:	6923      	ldr	r3, [r4, #16]
   12d18:	2b00      	cmp	r3, #0
   12d1a:	d05b      	beq.n	12dd4 <_vfiprintf_r+0xe4>
   12d1c:	2300      	movs	r3, #0
   12d1e:	9309      	str	r3, [sp, #36]	; 0x24
   12d20:	2320      	movs	r3, #32
   12d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   12d26:	2330      	movs	r3, #48	; 0x30
   12d28:	f04f 0b01 	mov.w	fp, #1
   12d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   12d30:	9503      	str	r5, [sp, #12]
   12d32:	46b8      	mov	r8, r7
   12d34:	4645      	mov	r5, r8
   12d36:	f815 3b01 	ldrb.w	r3, [r5], #1
   12d3a:	b10b      	cbz	r3, 12d40 <_vfiprintf_r+0x50>
   12d3c:	2b25      	cmp	r3, #37	; 0x25
   12d3e:	d154      	bne.n	12dea <_vfiprintf_r+0xfa>
   12d40:	ebb8 0a07 	subs.w	sl, r8, r7
   12d44:	d00b      	beq.n	12d5e <_vfiprintf_r+0x6e>
   12d46:	4653      	mov	r3, sl
   12d48:	463a      	mov	r2, r7
   12d4a:	4621      	mov	r1, r4
   12d4c:	4630      	mov	r0, r6
   12d4e:	f7ff ffbc 	bl	12cca <__sfputs_r>
   12d52:	3001      	adds	r0, #1
   12d54:	f000 80c2 	beq.w	12edc <_vfiprintf_r+0x1ec>
   12d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d5a:	4453      	add	r3, sl
   12d5c:	9309      	str	r3, [sp, #36]	; 0x24
   12d5e:	f898 3000 	ldrb.w	r3, [r8]
   12d62:	2b00      	cmp	r3, #0
   12d64:	f000 80ba 	beq.w	12edc <_vfiprintf_r+0x1ec>
   12d68:	2300      	movs	r3, #0
   12d6a:	f04f 32ff 	mov.w	r2, #4294967295
   12d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   12d72:	9304      	str	r3, [sp, #16]
   12d74:	9307      	str	r3, [sp, #28]
   12d76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   12d7a:	931a      	str	r3, [sp, #104]	; 0x68
   12d7c:	46a8      	mov	r8, r5
   12d7e:	2205      	movs	r2, #5
   12d80:	f818 1b01 	ldrb.w	r1, [r8], #1
   12d84:	485e      	ldr	r0, [pc, #376]	; (12f00 <_vfiprintf_r+0x210>)
   12d86:	f7ff f973 	bl	12070 <memchr>
   12d8a:	9b04      	ldr	r3, [sp, #16]
   12d8c:	bb78      	cbnz	r0, 12dee <_vfiprintf_r+0xfe>
   12d8e:	06d9      	lsls	r1, r3, #27
   12d90:	bf44      	itt	mi
   12d92:	2220      	movmi	r2, #32
   12d94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   12d98:	071a      	lsls	r2, r3, #28
   12d9a:	bf44      	itt	mi
   12d9c:	222b      	movmi	r2, #43	; 0x2b
   12d9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   12da2:	782a      	ldrb	r2, [r5, #0]
   12da4:	2a2a      	cmp	r2, #42	; 0x2a
   12da6:	d02a      	beq.n	12dfe <_vfiprintf_r+0x10e>
   12da8:	46a8      	mov	r8, r5
   12daa:	2000      	movs	r0, #0
   12dac:	250a      	movs	r5, #10
   12dae:	9a07      	ldr	r2, [sp, #28]
   12db0:	4641      	mov	r1, r8
   12db2:	f811 3b01 	ldrb.w	r3, [r1], #1
   12db6:	3b30      	subs	r3, #48	; 0x30
   12db8:	2b09      	cmp	r3, #9
   12dba:	d969      	bls.n	12e90 <_vfiprintf_r+0x1a0>
   12dbc:	b360      	cbz	r0, 12e18 <_vfiprintf_r+0x128>
   12dbe:	e024      	b.n	12e0a <_vfiprintf_r+0x11a>
   12dc0:	4b50      	ldr	r3, [pc, #320]	; (12f04 <_vfiprintf_r+0x214>)
   12dc2:	429c      	cmp	r4, r3
   12dc4:	d101      	bne.n	12dca <_vfiprintf_r+0xda>
   12dc6:	68b4      	ldr	r4, [r6, #8]
   12dc8:	e7a2      	b.n	12d10 <_vfiprintf_r+0x20>
   12dca:	4b4f      	ldr	r3, [pc, #316]	; (12f08 <_vfiprintf_r+0x218>)
   12dcc:	429c      	cmp	r4, r3
   12dce:	bf08      	it	eq
   12dd0:	68f4      	ldreq	r4, [r6, #12]
   12dd2:	e79d      	b.n	12d10 <_vfiprintf_r+0x20>
   12dd4:	4621      	mov	r1, r4
   12dd6:	4630      	mov	r0, r6
   12dd8:	f000 f9ae 	bl	13138 <__swsetup_r>
   12ddc:	2800      	cmp	r0, #0
   12dde:	d09d      	beq.n	12d1c <_vfiprintf_r+0x2c>
   12de0:	f04f 30ff 	mov.w	r0, #4294967295
   12de4:	b01d      	add	sp, #116	; 0x74
   12de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dea:	46a8      	mov	r8, r5
   12dec:	e7a2      	b.n	12d34 <_vfiprintf_r+0x44>
   12dee:	4a44      	ldr	r2, [pc, #272]	; (12f00 <_vfiprintf_r+0x210>)
   12df0:	4645      	mov	r5, r8
   12df2:	1a80      	subs	r0, r0, r2
   12df4:	fa0b f000 	lsl.w	r0, fp, r0
   12df8:	4318      	orrs	r0, r3
   12dfa:	9004      	str	r0, [sp, #16]
   12dfc:	e7be      	b.n	12d7c <_vfiprintf_r+0x8c>
   12dfe:	9a03      	ldr	r2, [sp, #12]
   12e00:	1d11      	adds	r1, r2, #4
   12e02:	6812      	ldr	r2, [r2, #0]
   12e04:	9103      	str	r1, [sp, #12]
   12e06:	2a00      	cmp	r2, #0
   12e08:	db01      	blt.n	12e0e <_vfiprintf_r+0x11e>
   12e0a:	9207      	str	r2, [sp, #28]
   12e0c:	e004      	b.n	12e18 <_vfiprintf_r+0x128>
   12e0e:	4252      	negs	r2, r2
   12e10:	f043 0302 	orr.w	r3, r3, #2
   12e14:	9207      	str	r2, [sp, #28]
   12e16:	9304      	str	r3, [sp, #16]
   12e18:	f898 3000 	ldrb.w	r3, [r8]
   12e1c:	2b2e      	cmp	r3, #46	; 0x2e
   12e1e:	d10e      	bne.n	12e3e <_vfiprintf_r+0x14e>
   12e20:	f898 3001 	ldrb.w	r3, [r8, #1]
   12e24:	2b2a      	cmp	r3, #42	; 0x2a
   12e26:	d138      	bne.n	12e9a <_vfiprintf_r+0x1aa>
   12e28:	9b03      	ldr	r3, [sp, #12]
   12e2a:	f108 0802 	add.w	r8, r8, #2
   12e2e:	1d1a      	adds	r2, r3, #4
   12e30:	681b      	ldr	r3, [r3, #0]
   12e32:	9203      	str	r2, [sp, #12]
   12e34:	2b00      	cmp	r3, #0
   12e36:	bfb8      	it	lt
   12e38:	f04f 33ff 	movlt.w	r3, #4294967295
   12e3c:	9305      	str	r3, [sp, #20]
   12e3e:	4d33      	ldr	r5, [pc, #204]	; (12f0c <_vfiprintf_r+0x21c>)
   12e40:	2203      	movs	r2, #3
   12e42:	f898 1000 	ldrb.w	r1, [r8]
   12e46:	4628      	mov	r0, r5
   12e48:	f7ff f912 	bl	12070 <memchr>
   12e4c:	b140      	cbz	r0, 12e60 <_vfiprintf_r+0x170>
   12e4e:	2340      	movs	r3, #64	; 0x40
   12e50:	1b40      	subs	r0, r0, r5
   12e52:	fa03 f000 	lsl.w	r0, r3, r0
   12e56:	9b04      	ldr	r3, [sp, #16]
   12e58:	f108 0801 	add.w	r8, r8, #1
   12e5c:	4303      	orrs	r3, r0
   12e5e:	9304      	str	r3, [sp, #16]
   12e60:	f898 1000 	ldrb.w	r1, [r8]
   12e64:	2206      	movs	r2, #6
   12e66:	482a      	ldr	r0, [pc, #168]	; (12f10 <_vfiprintf_r+0x220>)
   12e68:	f108 0701 	add.w	r7, r8, #1
   12e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   12e70:	f7ff f8fe 	bl	12070 <memchr>
   12e74:	2800      	cmp	r0, #0
   12e76:	d037      	beq.n	12ee8 <_vfiprintf_r+0x1f8>
   12e78:	4b26      	ldr	r3, [pc, #152]	; (12f14 <_vfiprintf_r+0x224>)
   12e7a:	bb1b      	cbnz	r3, 12ec4 <_vfiprintf_r+0x1d4>
   12e7c:	9b03      	ldr	r3, [sp, #12]
   12e7e:	3307      	adds	r3, #7
   12e80:	f023 0307 	bic.w	r3, r3, #7
   12e84:	3308      	adds	r3, #8
   12e86:	9303      	str	r3, [sp, #12]
   12e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e8a:	444b      	add	r3, r9
   12e8c:	9309      	str	r3, [sp, #36]	; 0x24
   12e8e:	e750      	b.n	12d32 <_vfiprintf_r+0x42>
   12e90:	fb05 3202 	mla	r2, r5, r2, r3
   12e94:	2001      	movs	r0, #1
   12e96:	4688      	mov	r8, r1
   12e98:	e78a      	b.n	12db0 <_vfiprintf_r+0xc0>
   12e9a:	2300      	movs	r3, #0
   12e9c:	250a      	movs	r5, #10
   12e9e:	4619      	mov	r1, r3
   12ea0:	f108 0801 	add.w	r8, r8, #1
   12ea4:	9305      	str	r3, [sp, #20]
   12ea6:	4640      	mov	r0, r8
   12ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
   12eac:	3a30      	subs	r2, #48	; 0x30
   12eae:	2a09      	cmp	r2, #9
   12eb0:	d903      	bls.n	12eba <_vfiprintf_r+0x1ca>
   12eb2:	2b00      	cmp	r3, #0
   12eb4:	d0c3      	beq.n	12e3e <_vfiprintf_r+0x14e>
   12eb6:	9105      	str	r1, [sp, #20]
   12eb8:	e7c1      	b.n	12e3e <_vfiprintf_r+0x14e>
   12eba:	fb05 2101 	mla	r1, r5, r1, r2
   12ebe:	2301      	movs	r3, #1
   12ec0:	4680      	mov	r8, r0
   12ec2:	e7f0      	b.n	12ea6 <_vfiprintf_r+0x1b6>
   12ec4:	ab03      	add	r3, sp, #12
   12ec6:	9300      	str	r3, [sp, #0]
   12ec8:	4622      	mov	r2, r4
   12eca:	4b13      	ldr	r3, [pc, #76]	; (12f18 <_vfiprintf_r+0x228>)
   12ecc:	a904      	add	r1, sp, #16
   12ece:	4630      	mov	r0, r6
   12ed0:	f7fc f9d8 	bl	f284 <_printf_float>
   12ed4:	f1b0 3fff 	cmp.w	r0, #4294967295
   12ed8:	4681      	mov	r9, r0
   12eda:	d1d5      	bne.n	12e88 <_vfiprintf_r+0x198>
   12edc:	89a3      	ldrh	r3, [r4, #12]
   12ede:	065b      	lsls	r3, r3, #25
   12ee0:	f53f af7e 	bmi.w	12de0 <_vfiprintf_r+0xf0>
   12ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ee6:	e77d      	b.n	12de4 <_vfiprintf_r+0xf4>
   12ee8:	ab03      	add	r3, sp, #12
   12eea:	9300      	str	r3, [sp, #0]
   12eec:	4622      	mov	r2, r4
   12eee:	4b0a      	ldr	r3, [pc, #40]	; (12f18 <_vfiprintf_r+0x228>)
   12ef0:	a904      	add	r1, sp, #16
   12ef2:	4630      	mov	r0, r6
   12ef4:	f7fc fc72 	bl	f7dc <_printf_i>
   12ef8:	e7ec      	b.n	12ed4 <_vfiprintf_r+0x1e4>
   12efa:	bf00      	nop
   12efc:	00014f40 	.word	0x00014f40
   12f00:	0001508c 	.word	0x0001508c
   12f04:	00014f60 	.word	0x00014f60
   12f08:	00014f20 	.word	0x00014f20
   12f0c:	00015092 	.word	0x00015092
   12f10:	00015096 	.word	0x00015096
   12f14:	0000f285 	.word	0x0000f285
   12f18:	00012ccb 	.word	0x00012ccb

00012f1c <_putc_r>:
   12f1c:	b570      	push	{r4, r5, r6, lr}
   12f1e:	460d      	mov	r5, r1
   12f20:	4614      	mov	r4, r2
   12f22:	4606      	mov	r6, r0
   12f24:	b118      	cbz	r0, 12f2e <_putc_r+0x12>
   12f26:	6983      	ldr	r3, [r0, #24]
   12f28:	b90b      	cbnz	r3, 12f2e <_putc_r+0x12>
   12f2a:	f7fe fcc1 	bl	118b0 <__sinit>
   12f2e:	4b13      	ldr	r3, [pc, #76]	; (12f7c <_putc_r+0x60>)
   12f30:	429c      	cmp	r4, r3
   12f32:	d112      	bne.n	12f5a <_putc_r+0x3e>
   12f34:	6874      	ldr	r4, [r6, #4]
   12f36:	68a3      	ldr	r3, [r4, #8]
   12f38:	3b01      	subs	r3, #1
   12f3a:	2b00      	cmp	r3, #0
   12f3c:	60a3      	str	r3, [r4, #8]
   12f3e:	da16      	bge.n	12f6e <_putc_r+0x52>
   12f40:	69a2      	ldr	r2, [r4, #24]
   12f42:	4293      	cmp	r3, r2
   12f44:	db02      	blt.n	12f4c <_putc_r+0x30>
   12f46:	b2eb      	uxtb	r3, r5
   12f48:	2b0a      	cmp	r3, #10
   12f4a:	d110      	bne.n	12f6e <_putc_r+0x52>
   12f4c:	4622      	mov	r2, r4
   12f4e:	4629      	mov	r1, r5
   12f50:	4630      	mov	r0, r6
   12f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12f56:	f000 b87d 	b.w	13054 <__swbuf_r>
   12f5a:	4b09      	ldr	r3, [pc, #36]	; (12f80 <_putc_r+0x64>)
   12f5c:	429c      	cmp	r4, r3
   12f5e:	d101      	bne.n	12f64 <_putc_r+0x48>
   12f60:	68b4      	ldr	r4, [r6, #8]
   12f62:	e7e8      	b.n	12f36 <_putc_r+0x1a>
   12f64:	4b07      	ldr	r3, [pc, #28]	; (12f84 <_putc_r+0x68>)
   12f66:	429c      	cmp	r4, r3
   12f68:	bf08      	it	eq
   12f6a:	68f4      	ldreq	r4, [r6, #12]
   12f6c:	e7e3      	b.n	12f36 <_putc_r+0x1a>
   12f6e:	6823      	ldr	r3, [r4, #0]
   12f70:	b2e8      	uxtb	r0, r5
   12f72:	1c5a      	adds	r2, r3, #1
   12f74:	6022      	str	r2, [r4, #0]
   12f76:	701d      	strb	r5, [r3, #0]
   12f78:	bd70      	pop	{r4, r5, r6, pc}
   12f7a:	bf00      	nop
   12f7c:	00014f40 	.word	0x00014f40
   12f80:	00014f60 	.word	0x00014f60
   12f84:	00014f20 	.word	0x00014f20

00012f88 <_sbrk_r>:
   12f88:	b538      	push	{r3, r4, r5, lr}
   12f8a:	2300      	movs	r3, #0
   12f8c:	4c05      	ldr	r4, [pc, #20]	; (12fa4 <_sbrk_r+0x1c>)
   12f8e:	4605      	mov	r5, r0
   12f90:	4608      	mov	r0, r1
   12f92:	6023      	str	r3, [r4, #0]
   12f94:	f7fb fcf0 	bl	e978 <_sbrk>
   12f98:	1c43      	adds	r3, r0, #1
   12f9a:	d102      	bne.n	12fa2 <_sbrk_r+0x1a>
   12f9c:	6823      	ldr	r3, [r4, #0]
   12f9e:	b103      	cbz	r3, 12fa2 <_sbrk_r+0x1a>
   12fa0:	602b      	str	r3, [r5, #0]
   12fa2:	bd38      	pop	{r3, r4, r5, pc}
   12fa4:	000263d4 	.word	0x000263d4

00012fa8 <__sread>:
   12fa8:	b510      	push	{r4, lr}
   12faa:	460c      	mov	r4, r1
   12fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12fb0:	f000 faa8 	bl	13504 <_read_r>
   12fb4:	2800      	cmp	r0, #0
   12fb6:	bfab      	itete	ge
   12fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   12fba:	89a3      	ldrhlt	r3, [r4, #12]
   12fbc:	181b      	addge	r3, r3, r0
   12fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   12fc2:	bfac      	ite	ge
   12fc4:	6563      	strge	r3, [r4, #84]	; 0x54
   12fc6:	81a3      	strhlt	r3, [r4, #12]
   12fc8:	bd10      	pop	{r4, pc}

00012fca <__swrite>:
   12fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12fce:	461f      	mov	r7, r3
   12fd0:	898b      	ldrh	r3, [r1, #12]
   12fd2:	4605      	mov	r5, r0
   12fd4:	05db      	lsls	r3, r3, #23
   12fd6:	460c      	mov	r4, r1
   12fd8:	4616      	mov	r6, r2
   12fda:	d505      	bpl.n	12fe8 <__swrite+0x1e>
   12fdc:	2302      	movs	r3, #2
   12fde:	2200      	movs	r2, #0
   12fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12fe4:	f000 f9d6 	bl	13394 <_lseek_r>
   12fe8:	89a3      	ldrh	r3, [r4, #12]
   12fea:	4632      	mov	r2, r6
   12fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   12ff0:	81a3      	strh	r3, [r4, #12]
   12ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12ff6:	463b      	mov	r3, r7
   12ff8:	4628      	mov	r0, r5
   12ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12ffe:	f000 b889 	b.w	13114 <_write_r>

00013002 <__sseek>:
   13002:	b510      	push	{r4, lr}
   13004:	460c      	mov	r4, r1
   13006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1300a:	f000 f9c3 	bl	13394 <_lseek_r>
   1300e:	1c43      	adds	r3, r0, #1
   13010:	89a3      	ldrh	r3, [r4, #12]
   13012:	bf15      	itete	ne
   13014:	6560      	strne	r0, [r4, #84]	; 0x54
   13016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1301a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1301e:	81a3      	strheq	r3, [r4, #12]
   13020:	bf18      	it	ne
   13022:	81a3      	strhne	r3, [r4, #12]
   13024:	bd10      	pop	{r4, pc}

00013026 <__sclose>:
   13026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1302a:	f000 b8f3 	b.w	13214 <_close_r>

0001302e <strncmp>:
   1302e:	b510      	push	{r4, lr}
   13030:	b16a      	cbz	r2, 1304e <strncmp+0x20>
   13032:	3901      	subs	r1, #1
   13034:	1884      	adds	r4, r0, r2
   13036:	f810 3b01 	ldrb.w	r3, [r0], #1
   1303a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1303e:	4293      	cmp	r3, r2
   13040:	d103      	bne.n	1304a <strncmp+0x1c>
   13042:	42a0      	cmp	r0, r4
   13044:	d001      	beq.n	1304a <strncmp+0x1c>
   13046:	2b00      	cmp	r3, #0
   13048:	d1f5      	bne.n	13036 <strncmp+0x8>
   1304a:	1a98      	subs	r0, r3, r2
   1304c:	bd10      	pop	{r4, pc}
   1304e:	4610      	mov	r0, r2
   13050:	e7fc      	b.n	1304c <strncmp+0x1e>
	...

00013054 <__swbuf_r>:
   13054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13056:	460e      	mov	r6, r1
   13058:	4614      	mov	r4, r2
   1305a:	4605      	mov	r5, r0
   1305c:	b118      	cbz	r0, 13066 <__swbuf_r+0x12>
   1305e:	6983      	ldr	r3, [r0, #24]
   13060:	b90b      	cbnz	r3, 13066 <__swbuf_r+0x12>
   13062:	f7fe fc25 	bl	118b0 <__sinit>
   13066:	4b21      	ldr	r3, [pc, #132]	; (130ec <__swbuf_r+0x98>)
   13068:	429c      	cmp	r4, r3
   1306a:	d12a      	bne.n	130c2 <__swbuf_r+0x6e>
   1306c:	686c      	ldr	r4, [r5, #4]
   1306e:	69a3      	ldr	r3, [r4, #24]
   13070:	60a3      	str	r3, [r4, #8]
   13072:	89a3      	ldrh	r3, [r4, #12]
   13074:	071a      	lsls	r2, r3, #28
   13076:	d52e      	bpl.n	130d6 <__swbuf_r+0x82>
   13078:	6923      	ldr	r3, [r4, #16]
   1307a:	b363      	cbz	r3, 130d6 <__swbuf_r+0x82>
   1307c:	6923      	ldr	r3, [r4, #16]
   1307e:	6820      	ldr	r0, [r4, #0]
   13080:	b2f6      	uxtb	r6, r6
   13082:	1ac0      	subs	r0, r0, r3
   13084:	6963      	ldr	r3, [r4, #20]
   13086:	4637      	mov	r7, r6
   13088:	4283      	cmp	r3, r0
   1308a:	dc04      	bgt.n	13096 <__swbuf_r+0x42>
   1308c:	4621      	mov	r1, r4
   1308e:	4628      	mov	r0, r5
   13090:	f000 f956 	bl	13340 <_fflush_r>
   13094:	bb28      	cbnz	r0, 130e2 <__swbuf_r+0x8e>
   13096:	68a3      	ldr	r3, [r4, #8]
   13098:	3001      	adds	r0, #1
   1309a:	3b01      	subs	r3, #1
   1309c:	60a3      	str	r3, [r4, #8]
   1309e:	6823      	ldr	r3, [r4, #0]
   130a0:	1c5a      	adds	r2, r3, #1
   130a2:	6022      	str	r2, [r4, #0]
   130a4:	701e      	strb	r6, [r3, #0]
   130a6:	6963      	ldr	r3, [r4, #20]
   130a8:	4283      	cmp	r3, r0
   130aa:	d004      	beq.n	130b6 <__swbuf_r+0x62>
   130ac:	89a3      	ldrh	r3, [r4, #12]
   130ae:	07db      	lsls	r3, r3, #31
   130b0:	d519      	bpl.n	130e6 <__swbuf_r+0x92>
   130b2:	2e0a      	cmp	r6, #10
   130b4:	d117      	bne.n	130e6 <__swbuf_r+0x92>
   130b6:	4621      	mov	r1, r4
   130b8:	4628      	mov	r0, r5
   130ba:	f000 f941 	bl	13340 <_fflush_r>
   130be:	b190      	cbz	r0, 130e6 <__swbuf_r+0x92>
   130c0:	e00f      	b.n	130e2 <__swbuf_r+0x8e>
   130c2:	4b0b      	ldr	r3, [pc, #44]	; (130f0 <__swbuf_r+0x9c>)
   130c4:	429c      	cmp	r4, r3
   130c6:	d101      	bne.n	130cc <__swbuf_r+0x78>
   130c8:	68ac      	ldr	r4, [r5, #8]
   130ca:	e7d0      	b.n	1306e <__swbuf_r+0x1a>
   130cc:	4b09      	ldr	r3, [pc, #36]	; (130f4 <__swbuf_r+0xa0>)
   130ce:	429c      	cmp	r4, r3
   130d0:	bf08      	it	eq
   130d2:	68ec      	ldreq	r4, [r5, #12]
   130d4:	e7cb      	b.n	1306e <__swbuf_r+0x1a>
   130d6:	4621      	mov	r1, r4
   130d8:	4628      	mov	r0, r5
   130da:	f000 f82d 	bl	13138 <__swsetup_r>
   130de:	2800      	cmp	r0, #0
   130e0:	d0cc      	beq.n	1307c <__swbuf_r+0x28>
   130e2:	f04f 37ff 	mov.w	r7, #4294967295
   130e6:	4638      	mov	r0, r7
   130e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   130ea:	bf00      	nop
   130ec:	00014f40 	.word	0x00014f40
   130f0:	00014f60 	.word	0x00014f60
   130f4:	00014f20 	.word	0x00014f20

000130f8 <__ascii_wctomb>:
   130f8:	b149      	cbz	r1, 1310e <__ascii_wctomb+0x16>
   130fa:	2aff      	cmp	r2, #255	; 0xff
   130fc:	bf8b      	itete	hi
   130fe:	238a      	movhi	r3, #138	; 0x8a
   13100:	700a      	strbls	r2, [r1, #0]
   13102:	6003      	strhi	r3, [r0, #0]
   13104:	2001      	movls	r0, #1
   13106:	bf88      	it	hi
   13108:	f04f 30ff 	movhi.w	r0, #4294967295
   1310c:	4770      	bx	lr
   1310e:	4608      	mov	r0, r1
   13110:	4770      	bx	lr
	...

00013114 <_write_r>:
   13114:	b538      	push	{r3, r4, r5, lr}
   13116:	4605      	mov	r5, r0
   13118:	4608      	mov	r0, r1
   1311a:	4611      	mov	r1, r2
   1311c:	2200      	movs	r2, #0
   1311e:	4c05      	ldr	r4, [pc, #20]	; (13134 <_write_r+0x20>)
   13120:	6022      	str	r2, [r4, #0]
   13122:	461a      	mov	r2, r3
   13124:	f7fb fbdb 	bl	e8de <_write>
   13128:	1c43      	adds	r3, r0, #1
   1312a:	d102      	bne.n	13132 <_write_r+0x1e>
   1312c:	6823      	ldr	r3, [r4, #0]
   1312e:	b103      	cbz	r3, 13132 <_write_r+0x1e>
   13130:	602b      	str	r3, [r5, #0]
   13132:	bd38      	pop	{r3, r4, r5, pc}
   13134:	000263d4 	.word	0x000263d4

00013138 <__swsetup_r>:
   13138:	4b32      	ldr	r3, [pc, #200]	; (13204 <__swsetup_r+0xcc>)
   1313a:	b570      	push	{r4, r5, r6, lr}
   1313c:	681d      	ldr	r5, [r3, #0]
   1313e:	4606      	mov	r6, r0
   13140:	460c      	mov	r4, r1
   13142:	b125      	cbz	r5, 1314e <__swsetup_r+0x16>
   13144:	69ab      	ldr	r3, [r5, #24]
   13146:	b913      	cbnz	r3, 1314e <__swsetup_r+0x16>
   13148:	4628      	mov	r0, r5
   1314a:	f7fe fbb1 	bl	118b0 <__sinit>
   1314e:	4b2e      	ldr	r3, [pc, #184]	; (13208 <__swsetup_r+0xd0>)
   13150:	429c      	cmp	r4, r3
   13152:	d10f      	bne.n	13174 <__swsetup_r+0x3c>
   13154:	686c      	ldr	r4, [r5, #4]
   13156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1315a:	b29a      	uxth	r2, r3
   1315c:	0715      	lsls	r5, r2, #28
   1315e:	d42c      	bmi.n	131ba <__swsetup_r+0x82>
   13160:	06d0      	lsls	r0, r2, #27
   13162:	d411      	bmi.n	13188 <__swsetup_r+0x50>
   13164:	2209      	movs	r2, #9
   13166:	6032      	str	r2, [r6, #0]
   13168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1316c:	81a3      	strh	r3, [r4, #12]
   1316e:	f04f 30ff 	mov.w	r0, #4294967295
   13172:	e03e      	b.n	131f2 <__swsetup_r+0xba>
   13174:	4b25      	ldr	r3, [pc, #148]	; (1320c <__swsetup_r+0xd4>)
   13176:	429c      	cmp	r4, r3
   13178:	d101      	bne.n	1317e <__swsetup_r+0x46>
   1317a:	68ac      	ldr	r4, [r5, #8]
   1317c:	e7eb      	b.n	13156 <__swsetup_r+0x1e>
   1317e:	4b24      	ldr	r3, [pc, #144]	; (13210 <__swsetup_r+0xd8>)
   13180:	429c      	cmp	r4, r3
   13182:	bf08      	it	eq
   13184:	68ec      	ldreq	r4, [r5, #12]
   13186:	e7e6      	b.n	13156 <__swsetup_r+0x1e>
   13188:	0751      	lsls	r1, r2, #29
   1318a:	d512      	bpl.n	131b2 <__swsetup_r+0x7a>
   1318c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1318e:	b141      	cbz	r1, 131a2 <__swsetup_r+0x6a>
   13190:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13194:	4299      	cmp	r1, r3
   13196:	d002      	beq.n	1319e <__swsetup_r+0x66>
   13198:	4630      	mov	r0, r6
   1319a:	f7ff fb89 	bl	128b0 <_free_r>
   1319e:	2300      	movs	r3, #0
   131a0:	6363      	str	r3, [r4, #52]	; 0x34
   131a2:	89a3      	ldrh	r3, [r4, #12]
   131a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   131a8:	81a3      	strh	r3, [r4, #12]
   131aa:	2300      	movs	r3, #0
   131ac:	6063      	str	r3, [r4, #4]
   131ae:	6923      	ldr	r3, [r4, #16]
   131b0:	6023      	str	r3, [r4, #0]
   131b2:	89a3      	ldrh	r3, [r4, #12]
   131b4:	f043 0308 	orr.w	r3, r3, #8
   131b8:	81a3      	strh	r3, [r4, #12]
   131ba:	6923      	ldr	r3, [r4, #16]
   131bc:	b94b      	cbnz	r3, 131d2 <__swsetup_r+0x9a>
   131be:	89a3      	ldrh	r3, [r4, #12]
   131c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
   131c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   131c8:	d003      	beq.n	131d2 <__swsetup_r+0x9a>
   131ca:	4621      	mov	r1, r4
   131cc:	4630      	mov	r0, r6
   131ce:	f000 f917 	bl	13400 <__smakebuf_r>
   131d2:	89a2      	ldrh	r2, [r4, #12]
   131d4:	f012 0301 	ands.w	r3, r2, #1
   131d8:	d00c      	beq.n	131f4 <__swsetup_r+0xbc>
   131da:	2300      	movs	r3, #0
   131dc:	60a3      	str	r3, [r4, #8]
   131de:	6963      	ldr	r3, [r4, #20]
   131e0:	425b      	negs	r3, r3
   131e2:	61a3      	str	r3, [r4, #24]
   131e4:	6923      	ldr	r3, [r4, #16]
   131e6:	b953      	cbnz	r3, 131fe <__swsetup_r+0xc6>
   131e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   131ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   131f0:	d1ba      	bne.n	13168 <__swsetup_r+0x30>
   131f2:	bd70      	pop	{r4, r5, r6, pc}
   131f4:	0792      	lsls	r2, r2, #30
   131f6:	bf58      	it	pl
   131f8:	6963      	ldrpl	r3, [r4, #20]
   131fa:	60a3      	str	r3, [r4, #8]
   131fc:	e7f2      	b.n	131e4 <__swsetup_r+0xac>
   131fe:	2000      	movs	r0, #0
   13200:	e7f7      	b.n	131f2 <__swsetup_r+0xba>
   13202:	bf00      	nop
   13204:	00025754 	.word	0x00025754
   13208:	00014f40 	.word	0x00014f40
   1320c:	00014f60 	.word	0x00014f60
   13210:	00014f20 	.word	0x00014f20

00013214 <_close_r>:
   13214:	b538      	push	{r3, r4, r5, lr}
   13216:	2300      	movs	r3, #0
   13218:	4c05      	ldr	r4, [pc, #20]	; (13230 <_close_r+0x1c>)
   1321a:	4605      	mov	r5, r0
   1321c:	4608      	mov	r0, r1
   1321e:	6023      	str	r3, [r4, #0]
   13220:	f7fb fb79 	bl	e916 <_close>
   13224:	1c43      	adds	r3, r0, #1
   13226:	d102      	bne.n	1322e <_close_r+0x1a>
   13228:	6823      	ldr	r3, [r4, #0]
   1322a:	b103      	cbz	r3, 1322e <_close_r+0x1a>
   1322c:	602b      	str	r3, [r5, #0]
   1322e:	bd38      	pop	{r3, r4, r5, pc}
   13230:	000263d4 	.word	0x000263d4

00013234 <__sflush_r>:
   13234:	898a      	ldrh	r2, [r1, #12]
   13236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1323a:	4605      	mov	r5, r0
   1323c:	0710      	lsls	r0, r2, #28
   1323e:	460c      	mov	r4, r1
   13240:	d458      	bmi.n	132f4 <__sflush_r+0xc0>
   13242:	684b      	ldr	r3, [r1, #4]
   13244:	2b00      	cmp	r3, #0
   13246:	dc05      	bgt.n	13254 <__sflush_r+0x20>
   13248:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1324a:	2b00      	cmp	r3, #0
   1324c:	dc02      	bgt.n	13254 <__sflush_r+0x20>
   1324e:	2000      	movs	r0, #0
   13250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13256:	2e00      	cmp	r6, #0
   13258:	d0f9      	beq.n	1324e <__sflush_r+0x1a>
   1325a:	2300      	movs	r3, #0
   1325c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   13260:	682f      	ldr	r7, [r5, #0]
   13262:	6a21      	ldr	r1, [r4, #32]
   13264:	602b      	str	r3, [r5, #0]
   13266:	d032      	beq.n	132ce <__sflush_r+0x9a>
   13268:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1326a:	89a3      	ldrh	r3, [r4, #12]
   1326c:	075a      	lsls	r2, r3, #29
   1326e:	d505      	bpl.n	1327c <__sflush_r+0x48>
   13270:	6863      	ldr	r3, [r4, #4]
   13272:	1ac0      	subs	r0, r0, r3
   13274:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13276:	b10b      	cbz	r3, 1327c <__sflush_r+0x48>
   13278:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1327a:	1ac0      	subs	r0, r0, r3
   1327c:	2300      	movs	r3, #0
   1327e:	4602      	mov	r2, r0
   13280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13282:	6a21      	ldr	r1, [r4, #32]
   13284:	4628      	mov	r0, r5
   13286:	47b0      	blx	r6
   13288:	1c43      	adds	r3, r0, #1
   1328a:	89a3      	ldrh	r3, [r4, #12]
   1328c:	d106      	bne.n	1329c <__sflush_r+0x68>
   1328e:	6829      	ldr	r1, [r5, #0]
   13290:	291d      	cmp	r1, #29
   13292:	d848      	bhi.n	13326 <__sflush_r+0xf2>
   13294:	4a29      	ldr	r2, [pc, #164]	; (1333c <__sflush_r+0x108>)
   13296:	40ca      	lsrs	r2, r1
   13298:	07d6      	lsls	r6, r2, #31
   1329a:	d544      	bpl.n	13326 <__sflush_r+0xf2>
   1329c:	2200      	movs	r2, #0
   1329e:	6062      	str	r2, [r4, #4]
   132a0:	6922      	ldr	r2, [r4, #16]
   132a2:	04d9      	lsls	r1, r3, #19
   132a4:	6022      	str	r2, [r4, #0]
   132a6:	d504      	bpl.n	132b2 <__sflush_r+0x7e>
   132a8:	1c42      	adds	r2, r0, #1
   132aa:	d101      	bne.n	132b0 <__sflush_r+0x7c>
   132ac:	682b      	ldr	r3, [r5, #0]
   132ae:	b903      	cbnz	r3, 132b2 <__sflush_r+0x7e>
   132b0:	6560      	str	r0, [r4, #84]	; 0x54
   132b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   132b4:	602f      	str	r7, [r5, #0]
   132b6:	2900      	cmp	r1, #0
   132b8:	d0c9      	beq.n	1324e <__sflush_r+0x1a>
   132ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
   132be:	4299      	cmp	r1, r3
   132c0:	d002      	beq.n	132c8 <__sflush_r+0x94>
   132c2:	4628      	mov	r0, r5
   132c4:	f7ff faf4 	bl	128b0 <_free_r>
   132c8:	2000      	movs	r0, #0
   132ca:	6360      	str	r0, [r4, #52]	; 0x34
   132cc:	e7c0      	b.n	13250 <__sflush_r+0x1c>
   132ce:	2301      	movs	r3, #1
   132d0:	4628      	mov	r0, r5
   132d2:	47b0      	blx	r6
   132d4:	1c41      	adds	r1, r0, #1
   132d6:	d1c8      	bne.n	1326a <__sflush_r+0x36>
   132d8:	682b      	ldr	r3, [r5, #0]
   132da:	2b00      	cmp	r3, #0
   132dc:	d0c5      	beq.n	1326a <__sflush_r+0x36>
   132de:	2b1d      	cmp	r3, #29
   132e0:	d001      	beq.n	132e6 <__sflush_r+0xb2>
   132e2:	2b16      	cmp	r3, #22
   132e4:	d101      	bne.n	132ea <__sflush_r+0xb6>
   132e6:	602f      	str	r7, [r5, #0]
   132e8:	e7b1      	b.n	1324e <__sflush_r+0x1a>
   132ea:	89a3      	ldrh	r3, [r4, #12]
   132ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   132f0:	81a3      	strh	r3, [r4, #12]
   132f2:	e7ad      	b.n	13250 <__sflush_r+0x1c>
   132f4:	690f      	ldr	r7, [r1, #16]
   132f6:	2f00      	cmp	r7, #0
   132f8:	d0a9      	beq.n	1324e <__sflush_r+0x1a>
   132fa:	0793      	lsls	r3, r2, #30
   132fc:	bf18      	it	ne
   132fe:	2300      	movne	r3, #0
   13300:	680e      	ldr	r6, [r1, #0]
   13302:	bf08      	it	eq
   13304:	694b      	ldreq	r3, [r1, #20]
   13306:	eba6 0807 	sub.w	r8, r6, r7
   1330a:	600f      	str	r7, [r1, #0]
   1330c:	608b      	str	r3, [r1, #8]
   1330e:	f1b8 0f00 	cmp.w	r8, #0
   13312:	dd9c      	ble.n	1324e <__sflush_r+0x1a>
   13314:	4643      	mov	r3, r8
   13316:	463a      	mov	r2, r7
   13318:	6a21      	ldr	r1, [r4, #32]
   1331a:	4628      	mov	r0, r5
   1331c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1331e:	47b0      	blx	r6
   13320:	2800      	cmp	r0, #0
   13322:	dc06      	bgt.n	13332 <__sflush_r+0xfe>
   13324:	89a3      	ldrh	r3, [r4, #12]
   13326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1332a:	81a3      	strh	r3, [r4, #12]
   1332c:	f04f 30ff 	mov.w	r0, #4294967295
   13330:	e78e      	b.n	13250 <__sflush_r+0x1c>
   13332:	4407      	add	r7, r0
   13334:	eba8 0800 	sub.w	r8, r8, r0
   13338:	e7e9      	b.n	1330e <__sflush_r+0xda>
   1333a:	bf00      	nop
   1333c:	20400001 	.word	0x20400001

00013340 <_fflush_r>:
   13340:	b538      	push	{r3, r4, r5, lr}
   13342:	690b      	ldr	r3, [r1, #16]
   13344:	4605      	mov	r5, r0
   13346:	460c      	mov	r4, r1
   13348:	b1db      	cbz	r3, 13382 <_fflush_r+0x42>
   1334a:	b118      	cbz	r0, 13354 <_fflush_r+0x14>
   1334c:	6983      	ldr	r3, [r0, #24]
   1334e:	b90b      	cbnz	r3, 13354 <_fflush_r+0x14>
   13350:	f7fe faae 	bl	118b0 <__sinit>
   13354:	4b0c      	ldr	r3, [pc, #48]	; (13388 <_fflush_r+0x48>)
   13356:	429c      	cmp	r4, r3
   13358:	d109      	bne.n	1336e <_fflush_r+0x2e>
   1335a:	686c      	ldr	r4, [r5, #4]
   1335c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13360:	b17b      	cbz	r3, 13382 <_fflush_r+0x42>
   13362:	4621      	mov	r1, r4
   13364:	4628      	mov	r0, r5
   13366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1336a:	f7ff bf63 	b.w	13234 <__sflush_r>
   1336e:	4b07      	ldr	r3, [pc, #28]	; (1338c <_fflush_r+0x4c>)
   13370:	429c      	cmp	r4, r3
   13372:	d101      	bne.n	13378 <_fflush_r+0x38>
   13374:	68ac      	ldr	r4, [r5, #8]
   13376:	e7f1      	b.n	1335c <_fflush_r+0x1c>
   13378:	4b05      	ldr	r3, [pc, #20]	; (13390 <_fflush_r+0x50>)
   1337a:	429c      	cmp	r4, r3
   1337c:	bf08      	it	eq
   1337e:	68ec      	ldreq	r4, [r5, #12]
   13380:	e7ec      	b.n	1335c <_fflush_r+0x1c>
   13382:	2000      	movs	r0, #0
   13384:	bd38      	pop	{r3, r4, r5, pc}
   13386:	bf00      	nop
   13388:	00014f40 	.word	0x00014f40
   1338c:	00014f60 	.word	0x00014f60
   13390:	00014f20 	.word	0x00014f20

00013394 <_lseek_r>:
   13394:	b538      	push	{r3, r4, r5, lr}
   13396:	4605      	mov	r5, r0
   13398:	4608      	mov	r0, r1
   1339a:	4611      	mov	r1, r2
   1339c:	2200      	movs	r2, #0
   1339e:	4c05      	ldr	r4, [pc, #20]	; (133b4 <_lseek_r+0x20>)
   133a0:	6022      	str	r2, [r4, #0]
   133a2:	461a      	mov	r2, r3
   133a4:	f7fb fadb 	bl	e95e <_lseek>
   133a8:	1c43      	adds	r3, r0, #1
   133aa:	d102      	bne.n	133b2 <_lseek_r+0x1e>
   133ac:	6823      	ldr	r3, [r4, #0]
   133ae:	b103      	cbz	r3, 133b2 <_lseek_r+0x1e>
   133b0:	602b      	str	r3, [r5, #0]
   133b2:	bd38      	pop	{r3, r4, r5, pc}
   133b4:	000263d4 	.word	0x000263d4

000133b8 <__swhatbuf_r>:
   133b8:	b570      	push	{r4, r5, r6, lr}
   133ba:	460e      	mov	r6, r1
   133bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   133c0:	b096      	sub	sp, #88	; 0x58
   133c2:	2900      	cmp	r1, #0
   133c4:	4614      	mov	r4, r2
   133c6:	461d      	mov	r5, r3
   133c8:	da07      	bge.n	133da <__swhatbuf_r+0x22>
   133ca:	2300      	movs	r3, #0
   133cc:	602b      	str	r3, [r5, #0]
   133ce:	89b3      	ldrh	r3, [r6, #12]
   133d0:	061a      	lsls	r2, r3, #24
   133d2:	d410      	bmi.n	133f6 <__swhatbuf_r+0x3e>
   133d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   133d8:	e00e      	b.n	133f8 <__swhatbuf_r+0x40>
   133da:	466a      	mov	r2, sp
   133dc:	f000 f8a4 	bl	13528 <_fstat_r>
   133e0:	2800      	cmp	r0, #0
   133e2:	dbf2      	blt.n	133ca <__swhatbuf_r+0x12>
   133e4:	9a01      	ldr	r2, [sp, #4]
   133e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   133ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   133ee:	425a      	negs	r2, r3
   133f0:	415a      	adcs	r2, r3
   133f2:	602a      	str	r2, [r5, #0]
   133f4:	e7ee      	b.n	133d4 <__swhatbuf_r+0x1c>
   133f6:	2340      	movs	r3, #64	; 0x40
   133f8:	2000      	movs	r0, #0
   133fa:	6023      	str	r3, [r4, #0]
   133fc:	b016      	add	sp, #88	; 0x58
   133fe:	bd70      	pop	{r4, r5, r6, pc}

00013400 <__smakebuf_r>:
   13400:	898b      	ldrh	r3, [r1, #12]
   13402:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13404:	079d      	lsls	r5, r3, #30
   13406:	4606      	mov	r6, r0
   13408:	460c      	mov	r4, r1
   1340a:	d507      	bpl.n	1341c <__smakebuf_r+0x1c>
   1340c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   13410:	6023      	str	r3, [r4, #0]
   13412:	6123      	str	r3, [r4, #16]
   13414:	2301      	movs	r3, #1
   13416:	6163      	str	r3, [r4, #20]
   13418:	b002      	add	sp, #8
   1341a:	bd70      	pop	{r4, r5, r6, pc}
   1341c:	ab01      	add	r3, sp, #4
   1341e:	466a      	mov	r2, sp
   13420:	f7ff ffca 	bl	133b8 <__swhatbuf_r>
   13424:	9900      	ldr	r1, [sp, #0]
   13426:	4605      	mov	r5, r0
   13428:	4630      	mov	r0, r6
   1342a:	f7ff fa8d 	bl	12948 <_malloc_r>
   1342e:	b948      	cbnz	r0, 13444 <__smakebuf_r+0x44>
   13430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13434:	059a      	lsls	r2, r3, #22
   13436:	d4ef      	bmi.n	13418 <__smakebuf_r+0x18>
   13438:	f023 0303 	bic.w	r3, r3, #3
   1343c:	f043 0302 	orr.w	r3, r3, #2
   13440:	81a3      	strh	r3, [r4, #12]
   13442:	e7e3      	b.n	1340c <__smakebuf_r+0xc>
   13444:	4b0d      	ldr	r3, [pc, #52]	; (1347c <__smakebuf_r+0x7c>)
   13446:	62b3      	str	r3, [r6, #40]	; 0x28
   13448:	89a3      	ldrh	r3, [r4, #12]
   1344a:	6020      	str	r0, [r4, #0]
   1344c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13450:	81a3      	strh	r3, [r4, #12]
   13452:	9b00      	ldr	r3, [sp, #0]
   13454:	6120      	str	r0, [r4, #16]
   13456:	6163      	str	r3, [r4, #20]
   13458:	9b01      	ldr	r3, [sp, #4]
   1345a:	b15b      	cbz	r3, 13474 <__smakebuf_r+0x74>
   1345c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13460:	4630      	mov	r0, r6
   13462:	f000 f873 	bl	1354c <_isatty_r>
   13466:	b128      	cbz	r0, 13474 <__smakebuf_r+0x74>
   13468:	89a3      	ldrh	r3, [r4, #12]
   1346a:	f023 0303 	bic.w	r3, r3, #3
   1346e:	f043 0301 	orr.w	r3, r3, #1
   13472:	81a3      	strh	r3, [r4, #12]
   13474:	89a3      	ldrh	r3, [r4, #12]
   13476:	431d      	orrs	r5, r3
   13478:	81a5      	strh	r5, [r4, #12]
   1347a:	e7cd      	b.n	13418 <__smakebuf_r+0x18>
   1347c:	00011879 	.word	0x00011879

00013480 <memmove>:
   13480:	4288      	cmp	r0, r1
   13482:	b510      	push	{r4, lr}
   13484:	eb01 0302 	add.w	r3, r1, r2
   13488:	d807      	bhi.n	1349a <memmove+0x1a>
   1348a:	1e42      	subs	r2, r0, #1
   1348c:	4299      	cmp	r1, r3
   1348e:	d00a      	beq.n	134a6 <memmove+0x26>
   13490:	f811 4b01 	ldrb.w	r4, [r1], #1
   13494:	f802 4f01 	strb.w	r4, [r2, #1]!
   13498:	e7f8      	b.n	1348c <memmove+0xc>
   1349a:	4283      	cmp	r3, r0
   1349c:	d9f5      	bls.n	1348a <memmove+0xa>
   1349e:	1881      	adds	r1, r0, r2
   134a0:	1ad2      	subs	r2, r2, r3
   134a2:	42d3      	cmn	r3, r2
   134a4:	d100      	bne.n	134a8 <memmove+0x28>
   134a6:	bd10      	pop	{r4, pc}
   134a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   134ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
   134b0:	e7f7      	b.n	134a2 <memmove+0x22>

000134b2 <__malloc_lock>:
   134b2:	4770      	bx	lr

000134b4 <__malloc_unlock>:
   134b4:	4770      	bx	lr

000134b6 <_realloc_r>:
   134b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   134b8:	4607      	mov	r7, r0
   134ba:	4614      	mov	r4, r2
   134bc:	460e      	mov	r6, r1
   134be:	b921      	cbnz	r1, 134ca <_realloc_r+0x14>
   134c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   134c4:	4611      	mov	r1, r2
   134c6:	f7ff ba3f 	b.w	12948 <_malloc_r>
   134ca:	b922      	cbnz	r2, 134d6 <_realloc_r+0x20>
   134cc:	f7ff f9f0 	bl	128b0 <_free_r>
   134d0:	4625      	mov	r5, r4
   134d2:	4628      	mov	r0, r5
   134d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   134d6:	f000 f849 	bl	1356c <_malloc_usable_size_r>
   134da:	42a0      	cmp	r0, r4
   134dc:	d20f      	bcs.n	134fe <_realloc_r+0x48>
   134de:	4621      	mov	r1, r4
   134e0:	4638      	mov	r0, r7
   134e2:	f7ff fa31 	bl	12948 <_malloc_r>
   134e6:	4605      	mov	r5, r0
   134e8:	2800      	cmp	r0, #0
   134ea:	d0f2      	beq.n	134d2 <_realloc_r+0x1c>
   134ec:	4631      	mov	r1, r6
   134ee:	4622      	mov	r2, r4
   134f0:	f7fe fdcc 	bl	1208c <memcpy>
   134f4:	4631      	mov	r1, r6
   134f6:	4638      	mov	r0, r7
   134f8:	f7ff f9da 	bl	128b0 <_free_r>
   134fc:	e7e9      	b.n	134d2 <_realloc_r+0x1c>
   134fe:	4635      	mov	r5, r6
   13500:	e7e7      	b.n	134d2 <_realloc_r+0x1c>
	...

00013504 <_read_r>:
   13504:	b538      	push	{r3, r4, r5, lr}
   13506:	4605      	mov	r5, r0
   13508:	4608      	mov	r0, r1
   1350a:	4611      	mov	r1, r2
   1350c:	2200      	movs	r2, #0
   1350e:	4c05      	ldr	r4, [pc, #20]	; (13524 <_read_r+0x20>)
   13510:	6022      	str	r2, [r4, #0]
   13512:	461a      	mov	r2, r3
   13514:	f7fb f9c6 	bl	e8a4 <_read>
   13518:	1c43      	adds	r3, r0, #1
   1351a:	d102      	bne.n	13522 <_read_r+0x1e>
   1351c:	6823      	ldr	r3, [r4, #0]
   1351e:	b103      	cbz	r3, 13522 <_read_r+0x1e>
   13520:	602b      	str	r3, [r5, #0]
   13522:	bd38      	pop	{r3, r4, r5, pc}
   13524:	000263d4 	.word	0x000263d4

00013528 <_fstat_r>:
   13528:	b538      	push	{r3, r4, r5, lr}
   1352a:	2300      	movs	r3, #0
   1352c:	4c06      	ldr	r4, [pc, #24]	; (13548 <_fstat_r+0x20>)
   1352e:	4605      	mov	r5, r0
   13530:	4608      	mov	r0, r1
   13532:	4611      	mov	r1, r2
   13534:	6023      	str	r3, [r4, #0]
   13536:	f7fb f9f9 	bl	e92c <_fstat>
   1353a:	1c43      	adds	r3, r0, #1
   1353c:	d102      	bne.n	13544 <_fstat_r+0x1c>
   1353e:	6823      	ldr	r3, [r4, #0]
   13540:	b103      	cbz	r3, 13544 <_fstat_r+0x1c>
   13542:	602b      	str	r3, [r5, #0]
   13544:	bd38      	pop	{r3, r4, r5, pc}
   13546:	bf00      	nop
   13548:	000263d4 	.word	0x000263d4

0001354c <_isatty_r>:
   1354c:	b538      	push	{r3, r4, r5, lr}
   1354e:	2300      	movs	r3, #0
   13550:	4c05      	ldr	r4, [pc, #20]	; (13568 <_isatty_r+0x1c>)
   13552:	4605      	mov	r5, r0
   13554:	4608      	mov	r0, r1
   13556:	6023      	str	r3, [r4, #0]
   13558:	f7fb f9f7 	bl	e94a <_isatty>
   1355c:	1c43      	adds	r3, r0, #1
   1355e:	d102      	bne.n	13566 <_isatty_r+0x1a>
   13560:	6823      	ldr	r3, [r4, #0]
   13562:	b103      	cbz	r3, 13566 <_isatty_r+0x1a>
   13564:	602b      	str	r3, [r5, #0]
   13566:	bd38      	pop	{r3, r4, r5, pc}
   13568:	000263d4 	.word	0x000263d4

0001356c <_malloc_usable_size_r>:
   1356c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13570:	1f18      	subs	r0, r3, #4
   13572:	2b00      	cmp	r3, #0
   13574:	bfbc      	itt	lt
   13576:	580b      	ldrlt	r3, [r1, r0]
   13578:	18c0      	addlt	r0, r0, r3
   1357a:	4770      	bx	lr

0001357c <__aeabi_drsub>:
   1357c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   13580:	e002      	b.n	13588 <__adddf3>
   13582:	bf00      	nop

00013584 <__aeabi_dsub>:
   13584:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00013588 <__adddf3>:
   13588:	b530      	push	{r4, r5, lr}
   1358a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1358e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   13592:	ea94 0f05 	teq	r4, r5
   13596:	bf08      	it	eq
   13598:	ea90 0f02 	teqeq	r0, r2
   1359c:	bf1f      	itttt	ne
   1359e:	ea54 0c00 	orrsne.w	ip, r4, r0
   135a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   135a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   135aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   135ae:	f000 80e2 	beq.w	13776 <__adddf3+0x1ee>
   135b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   135b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   135ba:	bfb8      	it	lt
   135bc:	426d      	neglt	r5, r5
   135be:	dd0c      	ble.n	135da <__adddf3+0x52>
   135c0:	442c      	add	r4, r5
   135c2:	ea80 0202 	eor.w	r2, r0, r2
   135c6:	ea81 0303 	eor.w	r3, r1, r3
   135ca:	ea82 0000 	eor.w	r0, r2, r0
   135ce:	ea83 0101 	eor.w	r1, r3, r1
   135d2:	ea80 0202 	eor.w	r2, r0, r2
   135d6:	ea81 0303 	eor.w	r3, r1, r3
   135da:	2d36      	cmp	r5, #54	; 0x36
   135dc:	bf88      	it	hi
   135de:	bd30      	pophi	{r4, r5, pc}
   135e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   135e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   135e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   135ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   135f0:	d002      	beq.n	135f8 <__adddf3+0x70>
   135f2:	4240      	negs	r0, r0
   135f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   135f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   135fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   13600:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   13604:	d002      	beq.n	1360c <__adddf3+0x84>
   13606:	4252      	negs	r2, r2
   13608:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1360c:	ea94 0f05 	teq	r4, r5
   13610:	f000 80a7 	beq.w	13762 <__adddf3+0x1da>
   13614:	f1a4 0401 	sub.w	r4, r4, #1
   13618:	f1d5 0e20 	rsbs	lr, r5, #32
   1361c:	db0d      	blt.n	1363a <__adddf3+0xb2>
   1361e:	fa02 fc0e 	lsl.w	ip, r2, lr
   13622:	fa22 f205 	lsr.w	r2, r2, r5
   13626:	1880      	adds	r0, r0, r2
   13628:	f141 0100 	adc.w	r1, r1, #0
   1362c:	fa03 f20e 	lsl.w	r2, r3, lr
   13630:	1880      	adds	r0, r0, r2
   13632:	fa43 f305 	asr.w	r3, r3, r5
   13636:	4159      	adcs	r1, r3
   13638:	e00e      	b.n	13658 <__adddf3+0xd0>
   1363a:	f1a5 0520 	sub.w	r5, r5, #32
   1363e:	f10e 0e20 	add.w	lr, lr, #32
   13642:	2a01      	cmp	r2, #1
   13644:	fa03 fc0e 	lsl.w	ip, r3, lr
   13648:	bf28      	it	cs
   1364a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1364e:	fa43 f305 	asr.w	r3, r3, r5
   13652:	18c0      	adds	r0, r0, r3
   13654:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   13658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1365c:	d507      	bpl.n	1366e <__adddf3+0xe6>
   1365e:	f04f 0e00 	mov.w	lr, #0
   13662:	f1dc 0c00 	rsbs	ip, ip, #0
   13666:	eb7e 0000 	sbcs.w	r0, lr, r0
   1366a:	eb6e 0101 	sbc.w	r1, lr, r1
   1366e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   13672:	d31b      	bcc.n	136ac <__adddf3+0x124>
   13674:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   13678:	d30c      	bcc.n	13694 <__adddf3+0x10c>
   1367a:	0849      	lsrs	r1, r1, #1
   1367c:	ea5f 0030 	movs.w	r0, r0, rrx
   13680:	ea4f 0c3c 	mov.w	ip, ip, rrx
   13684:	f104 0401 	add.w	r4, r4, #1
   13688:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1368c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   13690:	f080 809a 	bcs.w	137c8 <__adddf3+0x240>
   13694:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   13698:	bf08      	it	eq
   1369a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1369e:	f150 0000 	adcs.w	r0, r0, #0
   136a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   136a6:	ea41 0105 	orr.w	r1, r1, r5
   136aa:	bd30      	pop	{r4, r5, pc}
   136ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   136b0:	4140      	adcs	r0, r0
   136b2:	eb41 0101 	adc.w	r1, r1, r1
   136b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   136ba:	f1a4 0401 	sub.w	r4, r4, #1
   136be:	d1e9      	bne.n	13694 <__adddf3+0x10c>
   136c0:	f091 0f00 	teq	r1, #0
   136c4:	bf04      	itt	eq
   136c6:	4601      	moveq	r1, r0
   136c8:	2000      	moveq	r0, #0
   136ca:	fab1 f381 	clz	r3, r1
   136ce:	bf08      	it	eq
   136d0:	3320      	addeq	r3, #32
   136d2:	f1a3 030b 	sub.w	r3, r3, #11
   136d6:	f1b3 0220 	subs.w	r2, r3, #32
   136da:	da0c      	bge.n	136f6 <__adddf3+0x16e>
   136dc:	320c      	adds	r2, #12
   136de:	dd08      	ble.n	136f2 <__adddf3+0x16a>
   136e0:	f102 0c14 	add.w	ip, r2, #20
   136e4:	f1c2 020c 	rsb	r2, r2, #12
   136e8:	fa01 f00c 	lsl.w	r0, r1, ip
   136ec:	fa21 f102 	lsr.w	r1, r1, r2
   136f0:	e00c      	b.n	1370c <__adddf3+0x184>
   136f2:	f102 0214 	add.w	r2, r2, #20
   136f6:	bfd8      	it	le
   136f8:	f1c2 0c20 	rsble	ip, r2, #32
   136fc:	fa01 f102 	lsl.w	r1, r1, r2
   13700:	fa20 fc0c 	lsr.w	ip, r0, ip
   13704:	bfdc      	itt	le
   13706:	ea41 010c 	orrle.w	r1, r1, ip
   1370a:	4090      	lslle	r0, r2
   1370c:	1ae4      	subs	r4, r4, r3
   1370e:	bfa2      	ittt	ge
   13710:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   13714:	4329      	orrge	r1, r5
   13716:	bd30      	popge	{r4, r5, pc}
   13718:	ea6f 0404 	mvn.w	r4, r4
   1371c:	3c1f      	subs	r4, #31
   1371e:	da1c      	bge.n	1375a <__adddf3+0x1d2>
   13720:	340c      	adds	r4, #12
   13722:	dc0e      	bgt.n	13742 <__adddf3+0x1ba>
   13724:	f104 0414 	add.w	r4, r4, #20
   13728:	f1c4 0220 	rsb	r2, r4, #32
   1372c:	fa20 f004 	lsr.w	r0, r0, r4
   13730:	fa01 f302 	lsl.w	r3, r1, r2
   13734:	ea40 0003 	orr.w	r0, r0, r3
   13738:	fa21 f304 	lsr.w	r3, r1, r4
   1373c:	ea45 0103 	orr.w	r1, r5, r3
   13740:	bd30      	pop	{r4, r5, pc}
   13742:	f1c4 040c 	rsb	r4, r4, #12
   13746:	f1c4 0220 	rsb	r2, r4, #32
   1374a:	fa20 f002 	lsr.w	r0, r0, r2
   1374e:	fa01 f304 	lsl.w	r3, r1, r4
   13752:	ea40 0003 	orr.w	r0, r0, r3
   13756:	4629      	mov	r1, r5
   13758:	bd30      	pop	{r4, r5, pc}
   1375a:	fa21 f004 	lsr.w	r0, r1, r4
   1375e:	4629      	mov	r1, r5
   13760:	bd30      	pop	{r4, r5, pc}
   13762:	f094 0f00 	teq	r4, #0
   13766:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1376a:	bf06      	itte	eq
   1376c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   13770:	3401      	addeq	r4, #1
   13772:	3d01      	subne	r5, #1
   13774:	e74e      	b.n	13614 <__adddf3+0x8c>
   13776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1377a:	bf18      	it	ne
   1377c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   13780:	d029      	beq.n	137d6 <__adddf3+0x24e>
   13782:	ea94 0f05 	teq	r4, r5
   13786:	bf08      	it	eq
   13788:	ea90 0f02 	teqeq	r0, r2
   1378c:	d005      	beq.n	1379a <__adddf3+0x212>
   1378e:	ea54 0c00 	orrs.w	ip, r4, r0
   13792:	bf04      	itt	eq
   13794:	4619      	moveq	r1, r3
   13796:	4610      	moveq	r0, r2
   13798:	bd30      	pop	{r4, r5, pc}
   1379a:	ea91 0f03 	teq	r1, r3
   1379e:	bf1e      	ittt	ne
   137a0:	2100      	movne	r1, #0
   137a2:	2000      	movne	r0, #0
   137a4:	bd30      	popne	{r4, r5, pc}
   137a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   137aa:	d105      	bne.n	137b8 <__adddf3+0x230>
   137ac:	0040      	lsls	r0, r0, #1
   137ae:	4149      	adcs	r1, r1
   137b0:	bf28      	it	cs
   137b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   137b6:	bd30      	pop	{r4, r5, pc}
   137b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   137bc:	bf3c      	itt	cc
   137be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   137c2:	bd30      	popcc	{r4, r5, pc}
   137c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   137c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   137cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   137d0:	f04f 0000 	mov.w	r0, #0
   137d4:	bd30      	pop	{r4, r5, pc}
   137d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   137da:	bf1a      	itte	ne
   137dc:	4619      	movne	r1, r3
   137de:	4610      	movne	r0, r2
   137e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   137e4:	bf1c      	itt	ne
   137e6:	460b      	movne	r3, r1
   137e8:	4602      	movne	r2, r0
   137ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   137ee:	bf06      	itte	eq
   137f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   137f4:	ea91 0f03 	teqeq	r1, r3
   137f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   137fc:	bd30      	pop	{r4, r5, pc}
   137fe:	bf00      	nop

00013800 <__aeabi_ui2d>:
   13800:	f090 0f00 	teq	r0, #0
   13804:	bf04      	itt	eq
   13806:	2100      	moveq	r1, #0
   13808:	4770      	bxeq	lr
   1380a:	b530      	push	{r4, r5, lr}
   1380c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   13810:	f104 0432 	add.w	r4, r4, #50	; 0x32
   13814:	f04f 0500 	mov.w	r5, #0
   13818:	f04f 0100 	mov.w	r1, #0
   1381c:	e750      	b.n	136c0 <__adddf3+0x138>
   1381e:	bf00      	nop

00013820 <__aeabi_i2d>:
   13820:	f090 0f00 	teq	r0, #0
   13824:	bf04      	itt	eq
   13826:	2100      	moveq	r1, #0
   13828:	4770      	bxeq	lr
   1382a:	b530      	push	{r4, r5, lr}
   1382c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   13830:	f104 0432 	add.w	r4, r4, #50	; 0x32
   13834:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   13838:	bf48      	it	mi
   1383a:	4240      	negmi	r0, r0
   1383c:	f04f 0100 	mov.w	r1, #0
   13840:	e73e      	b.n	136c0 <__adddf3+0x138>
   13842:	bf00      	nop

00013844 <__aeabi_f2d>:
   13844:	0042      	lsls	r2, r0, #1
   13846:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1384a:	ea4f 0131 	mov.w	r1, r1, rrx
   1384e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   13852:	bf1f      	itttt	ne
   13854:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   13858:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1385c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   13860:	4770      	bxne	lr
   13862:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   13866:	bf08      	it	eq
   13868:	4770      	bxeq	lr
   1386a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1386e:	bf04      	itt	eq
   13870:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   13874:	4770      	bxeq	lr
   13876:	b530      	push	{r4, r5, lr}
   13878:	f44f 7460 	mov.w	r4, #896	; 0x380
   1387c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   13880:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   13884:	e71c      	b.n	136c0 <__adddf3+0x138>
   13886:	bf00      	nop

00013888 <__aeabi_ul2d>:
   13888:	ea50 0201 	orrs.w	r2, r0, r1
   1388c:	bf08      	it	eq
   1388e:	4770      	bxeq	lr
   13890:	b530      	push	{r4, r5, lr}
   13892:	f04f 0500 	mov.w	r5, #0
   13896:	e00a      	b.n	138ae <__aeabi_l2d+0x16>

00013898 <__aeabi_l2d>:
   13898:	ea50 0201 	orrs.w	r2, r0, r1
   1389c:	bf08      	it	eq
   1389e:	4770      	bxeq	lr
   138a0:	b530      	push	{r4, r5, lr}
   138a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   138a6:	d502      	bpl.n	138ae <__aeabi_l2d+0x16>
   138a8:	4240      	negs	r0, r0
   138aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   138ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   138b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   138b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   138ba:	f43f aed8 	beq.w	1366e <__adddf3+0xe6>
   138be:	f04f 0203 	mov.w	r2, #3
   138c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   138c6:	bf18      	it	ne
   138c8:	3203      	addne	r2, #3
   138ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   138ce:	bf18      	it	ne
   138d0:	3203      	addne	r2, #3
   138d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   138d6:	f1c2 0320 	rsb	r3, r2, #32
   138da:	fa00 fc03 	lsl.w	ip, r0, r3
   138de:	fa20 f002 	lsr.w	r0, r0, r2
   138e2:	fa01 fe03 	lsl.w	lr, r1, r3
   138e6:	ea40 000e 	orr.w	r0, r0, lr
   138ea:	fa21 f102 	lsr.w	r1, r1, r2
   138ee:	4414      	add	r4, r2
   138f0:	e6bd      	b.n	1366e <__adddf3+0xe6>
   138f2:	bf00      	nop

000138f4 <__aeabi_dmul>:
   138f4:	b570      	push	{r4, r5, r6, lr}
   138f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   138fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   138fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   13902:	bf1d      	ittte	ne
   13904:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   13908:	ea94 0f0c 	teqne	r4, ip
   1390c:	ea95 0f0c 	teqne	r5, ip
   13910:	f000 f8de 	bleq	13ad0 <__aeabi_dmul+0x1dc>
   13914:	442c      	add	r4, r5
   13916:	ea81 0603 	eor.w	r6, r1, r3
   1391a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1391e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   13922:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   13926:	bf18      	it	ne
   13928:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1392c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13934:	d038      	beq.n	139a8 <__aeabi_dmul+0xb4>
   13936:	fba0 ce02 	umull	ip, lr, r0, r2
   1393a:	f04f 0500 	mov.w	r5, #0
   1393e:	fbe1 e502 	umlal	lr, r5, r1, r2
   13942:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   13946:	fbe0 e503 	umlal	lr, r5, r0, r3
   1394a:	f04f 0600 	mov.w	r6, #0
   1394e:	fbe1 5603 	umlal	r5, r6, r1, r3
   13952:	f09c 0f00 	teq	ip, #0
   13956:	bf18      	it	ne
   13958:	f04e 0e01 	orrne.w	lr, lr, #1
   1395c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   13960:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   13964:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   13968:	d204      	bcs.n	13974 <__aeabi_dmul+0x80>
   1396a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1396e:	416d      	adcs	r5, r5
   13970:	eb46 0606 	adc.w	r6, r6, r6
   13974:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   13978:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1397c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   13980:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   13984:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   13988:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1398c:	bf88      	it	hi
   1398e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13992:	d81e      	bhi.n	139d2 <__aeabi_dmul+0xde>
   13994:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   13998:	bf08      	it	eq
   1399a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1399e:	f150 0000 	adcs.w	r0, r0, #0
   139a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   139a6:	bd70      	pop	{r4, r5, r6, pc}
   139a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   139ac:	ea46 0101 	orr.w	r1, r6, r1
   139b0:	ea40 0002 	orr.w	r0, r0, r2
   139b4:	ea81 0103 	eor.w	r1, r1, r3
   139b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   139bc:	bfc2      	ittt	gt
   139be:	ebd4 050c 	rsbsgt	r5, r4, ip
   139c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   139c6:	bd70      	popgt	{r4, r5, r6, pc}
   139c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   139cc:	f04f 0e00 	mov.w	lr, #0
   139d0:	3c01      	subs	r4, #1
   139d2:	f300 80ab 	bgt.w	13b2c <__aeabi_dmul+0x238>
   139d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   139da:	bfde      	ittt	le
   139dc:	2000      	movle	r0, #0
   139de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   139e2:	bd70      	pople	{r4, r5, r6, pc}
   139e4:	f1c4 0400 	rsb	r4, r4, #0
   139e8:	3c20      	subs	r4, #32
   139ea:	da35      	bge.n	13a58 <__aeabi_dmul+0x164>
   139ec:	340c      	adds	r4, #12
   139ee:	dc1b      	bgt.n	13a28 <__aeabi_dmul+0x134>
   139f0:	f104 0414 	add.w	r4, r4, #20
   139f4:	f1c4 0520 	rsb	r5, r4, #32
   139f8:	fa00 f305 	lsl.w	r3, r0, r5
   139fc:	fa20 f004 	lsr.w	r0, r0, r4
   13a00:	fa01 f205 	lsl.w	r2, r1, r5
   13a04:	ea40 0002 	orr.w	r0, r0, r2
   13a08:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   13a0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   13a10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   13a14:	fa21 f604 	lsr.w	r6, r1, r4
   13a18:	eb42 0106 	adc.w	r1, r2, r6
   13a1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13a20:	bf08      	it	eq
   13a22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   13a26:	bd70      	pop	{r4, r5, r6, pc}
   13a28:	f1c4 040c 	rsb	r4, r4, #12
   13a2c:	f1c4 0520 	rsb	r5, r4, #32
   13a30:	fa00 f304 	lsl.w	r3, r0, r4
   13a34:	fa20 f005 	lsr.w	r0, r0, r5
   13a38:	fa01 f204 	lsl.w	r2, r1, r4
   13a3c:	ea40 0002 	orr.w	r0, r0, r2
   13a40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13a44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   13a48:	f141 0100 	adc.w	r1, r1, #0
   13a4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13a50:	bf08      	it	eq
   13a52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   13a56:	bd70      	pop	{r4, r5, r6, pc}
   13a58:	f1c4 0520 	rsb	r5, r4, #32
   13a5c:	fa00 f205 	lsl.w	r2, r0, r5
   13a60:	ea4e 0e02 	orr.w	lr, lr, r2
   13a64:	fa20 f304 	lsr.w	r3, r0, r4
   13a68:	fa01 f205 	lsl.w	r2, r1, r5
   13a6c:	ea43 0302 	orr.w	r3, r3, r2
   13a70:	fa21 f004 	lsr.w	r0, r1, r4
   13a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13a78:	fa21 f204 	lsr.w	r2, r1, r4
   13a7c:	ea20 0002 	bic.w	r0, r0, r2
   13a80:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   13a84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13a88:	bf08      	it	eq
   13a8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   13a8e:	bd70      	pop	{r4, r5, r6, pc}
   13a90:	f094 0f00 	teq	r4, #0
   13a94:	d10f      	bne.n	13ab6 <__aeabi_dmul+0x1c2>
   13a96:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   13a9a:	0040      	lsls	r0, r0, #1
   13a9c:	eb41 0101 	adc.w	r1, r1, r1
   13aa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13aa4:	bf08      	it	eq
   13aa6:	3c01      	subeq	r4, #1
   13aa8:	d0f7      	beq.n	13a9a <__aeabi_dmul+0x1a6>
   13aaa:	ea41 0106 	orr.w	r1, r1, r6
   13aae:	f095 0f00 	teq	r5, #0
   13ab2:	bf18      	it	ne
   13ab4:	4770      	bxne	lr
   13ab6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   13aba:	0052      	lsls	r2, r2, #1
   13abc:	eb43 0303 	adc.w	r3, r3, r3
   13ac0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   13ac4:	bf08      	it	eq
   13ac6:	3d01      	subeq	r5, #1
   13ac8:	d0f7      	beq.n	13aba <__aeabi_dmul+0x1c6>
   13aca:	ea43 0306 	orr.w	r3, r3, r6
   13ace:	4770      	bx	lr
   13ad0:	ea94 0f0c 	teq	r4, ip
   13ad4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   13ad8:	bf18      	it	ne
   13ada:	ea95 0f0c 	teqne	r5, ip
   13ade:	d00c      	beq.n	13afa <__aeabi_dmul+0x206>
   13ae0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13ae4:	bf18      	it	ne
   13ae6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13aea:	d1d1      	bne.n	13a90 <__aeabi_dmul+0x19c>
   13aec:	ea81 0103 	eor.w	r1, r1, r3
   13af0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13af4:	f04f 0000 	mov.w	r0, #0
   13af8:	bd70      	pop	{r4, r5, r6, pc}
   13afa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13afe:	bf06      	itte	eq
   13b00:	4610      	moveq	r0, r2
   13b02:	4619      	moveq	r1, r3
   13b04:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13b08:	d019      	beq.n	13b3e <__aeabi_dmul+0x24a>
   13b0a:	ea94 0f0c 	teq	r4, ip
   13b0e:	d102      	bne.n	13b16 <__aeabi_dmul+0x222>
   13b10:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   13b14:	d113      	bne.n	13b3e <__aeabi_dmul+0x24a>
   13b16:	ea95 0f0c 	teq	r5, ip
   13b1a:	d105      	bne.n	13b28 <__aeabi_dmul+0x234>
   13b1c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   13b20:	bf1c      	itt	ne
   13b22:	4610      	movne	r0, r2
   13b24:	4619      	movne	r1, r3
   13b26:	d10a      	bne.n	13b3e <__aeabi_dmul+0x24a>
   13b28:	ea81 0103 	eor.w	r1, r1, r3
   13b2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13b30:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13b34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   13b38:	f04f 0000 	mov.w	r0, #0
   13b3c:	bd70      	pop	{r4, r5, r6, pc}
   13b3e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13b42:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   13b46:	bd70      	pop	{r4, r5, r6, pc}

00013b48 <__aeabi_ddiv>:
   13b48:	b570      	push	{r4, r5, r6, lr}
   13b4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13b4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13b52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   13b56:	bf1d      	ittte	ne
   13b58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   13b5c:	ea94 0f0c 	teqne	r4, ip
   13b60:	ea95 0f0c 	teqne	r5, ip
   13b64:	f000 f8a7 	bleq	13cb6 <__aeabi_ddiv+0x16e>
   13b68:	eba4 0405 	sub.w	r4, r4, r5
   13b6c:	ea81 0e03 	eor.w	lr, r1, r3
   13b70:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13b74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   13b78:	f000 8088 	beq.w	13c8c <__aeabi_ddiv+0x144>
   13b7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   13b80:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   13b84:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   13b88:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   13b8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   13b90:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   13b94:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   13b98:	ea4f 2600 	mov.w	r6, r0, lsl #8
   13b9c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   13ba0:	429d      	cmp	r5, r3
   13ba2:	bf08      	it	eq
   13ba4:	4296      	cmpeq	r6, r2
   13ba6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   13baa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   13bae:	d202      	bcs.n	13bb6 <__aeabi_ddiv+0x6e>
   13bb0:	085b      	lsrs	r3, r3, #1
   13bb2:	ea4f 0232 	mov.w	r2, r2, rrx
   13bb6:	1ab6      	subs	r6, r6, r2
   13bb8:	eb65 0503 	sbc.w	r5, r5, r3
   13bbc:	085b      	lsrs	r3, r3, #1
   13bbe:	ea4f 0232 	mov.w	r2, r2, rrx
   13bc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   13bc6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   13bca:	ebb6 0e02 	subs.w	lr, r6, r2
   13bce:	eb75 0e03 	sbcs.w	lr, r5, r3
   13bd2:	bf22      	ittt	cs
   13bd4:	1ab6      	subcs	r6, r6, r2
   13bd6:	4675      	movcs	r5, lr
   13bd8:	ea40 000c 	orrcs.w	r0, r0, ip
   13bdc:	085b      	lsrs	r3, r3, #1
   13bde:	ea4f 0232 	mov.w	r2, r2, rrx
   13be2:	ebb6 0e02 	subs.w	lr, r6, r2
   13be6:	eb75 0e03 	sbcs.w	lr, r5, r3
   13bea:	bf22      	ittt	cs
   13bec:	1ab6      	subcs	r6, r6, r2
   13bee:	4675      	movcs	r5, lr
   13bf0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   13bf4:	085b      	lsrs	r3, r3, #1
   13bf6:	ea4f 0232 	mov.w	r2, r2, rrx
   13bfa:	ebb6 0e02 	subs.w	lr, r6, r2
   13bfe:	eb75 0e03 	sbcs.w	lr, r5, r3
   13c02:	bf22      	ittt	cs
   13c04:	1ab6      	subcs	r6, r6, r2
   13c06:	4675      	movcs	r5, lr
   13c08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   13c0c:	085b      	lsrs	r3, r3, #1
   13c0e:	ea4f 0232 	mov.w	r2, r2, rrx
   13c12:	ebb6 0e02 	subs.w	lr, r6, r2
   13c16:	eb75 0e03 	sbcs.w	lr, r5, r3
   13c1a:	bf22      	ittt	cs
   13c1c:	1ab6      	subcs	r6, r6, r2
   13c1e:	4675      	movcs	r5, lr
   13c20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   13c24:	ea55 0e06 	orrs.w	lr, r5, r6
   13c28:	d018      	beq.n	13c5c <__aeabi_ddiv+0x114>
   13c2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   13c2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   13c32:	ea4f 1606 	mov.w	r6, r6, lsl #4
   13c36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   13c3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   13c3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   13c42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   13c46:	d1c0      	bne.n	13bca <__aeabi_ddiv+0x82>
   13c48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13c4c:	d10b      	bne.n	13c66 <__aeabi_ddiv+0x11e>
   13c4e:	ea41 0100 	orr.w	r1, r1, r0
   13c52:	f04f 0000 	mov.w	r0, #0
   13c56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   13c5a:	e7b6      	b.n	13bca <__aeabi_ddiv+0x82>
   13c5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13c60:	bf04      	itt	eq
   13c62:	4301      	orreq	r1, r0
   13c64:	2000      	moveq	r0, #0
   13c66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   13c6a:	bf88      	it	hi
   13c6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13c70:	f63f aeaf 	bhi.w	139d2 <__aeabi_dmul+0xde>
   13c74:	ebb5 0c03 	subs.w	ip, r5, r3
   13c78:	bf04      	itt	eq
   13c7a:	ebb6 0c02 	subseq.w	ip, r6, r2
   13c7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   13c82:	f150 0000 	adcs.w	r0, r0, #0
   13c86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   13c8a:	bd70      	pop	{r4, r5, r6, pc}
   13c8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   13c90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   13c94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   13c98:	bfc2      	ittt	gt
   13c9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   13c9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   13ca2:	bd70      	popgt	{r4, r5, r6, pc}
   13ca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13ca8:	f04f 0e00 	mov.w	lr, #0
   13cac:	3c01      	subs	r4, #1
   13cae:	e690      	b.n	139d2 <__aeabi_dmul+0xde>
   13cb0:	ea45 0e06 	orr.w	lr, r5, r6
   13cb4:	e68d      	b.n	139d2 <__aeabi_dmul+0xde>
   13cb6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   13cba:	ea94 0f0c 	teq	r4, ip
   13cbe:	bf08      	it	eq
   13cc0:	ea95 0f0c 	teqeq	r5, ip
   13cc4:	f43f af3b 	beq.w	13b3e <__aeabi_dmul+0x24a>
   13cc8:	ea94 0f0c 	teq	r4, ip
   13ccc:	d10a      	bne.n	13ce4 <__aeabi_ddiv+0x19c>
   13cce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   13cd2:	f47f af34 	bne.w	13b3e <__aeabi_dmul+0x24a>
   13cd6:	ea95 0f0c 	teq	r5, ip
   13cda:	f47f af25 	bne.w	13b28 <__aeabi_dmul+0x234>
   13cde:	4610      	mov	r0, r2
   13ce0:	4619      	mov	r1, r3
   13ce2:	e72c      	b.n	13b3e <__aeabi_dmul+0x24a>
   13ce4:	ea95 0f0c 	teq	r5, ip
   13ce8:	d106      	bne.n	13cf8 <__aeabi_ddiv+0x1b0>
   13cea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13cee:	f43f aefd 	beq.w	13aec <__aeabi_dmul+0x1f8>
   13cf2:	4610      	mov	r0, r2
   13cf4:	4619      	mov	r1, r3
   13cf6:	e722      	b.n	13b3e <__aeabi_dmul+0x24a>
   13cf8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13cfc:	bf18      	it	ne
   13cfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13d02:	f47f aec5 	bne.w	13a90 <__aeabi_dmul+0x19c>
   13d06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   13d0a:	f47f af0d 	bne.w	13b28 <__aeabi_dmul+0x234>
   13d0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   13d12:	f47f aeeb 	bne.w	13aec <__aeabi_dmul+0x1f8>
   13d16:	e712      	b.n	13b3e <__aeabi_dmul+0x24a>

00013d18 <__gedf2>:
   13d18:	f04f 3cff 	mov.w	ip, #4294967295
   13d1c:	e006      	b.n	13d2c <__cmpdf2+0x4>
   13d1e:	bf00      	nop

00013d20 <__ledf2>:
   13d20:	f04f 0c01 	mov.w	ip, #1
   13d24:	e002      	b.n	13d2c <__cmpdf2+0x4>
   13d26:	bf00      	nop

00013d28 <__cmpdf2>:
   13d28:	f04f 0c01 	mov.w	ip, #1
   13d2c:	f84d cd04 	str.w	ip, [sp, #-4]!
   13d30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   13d34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13d38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   13d3c:	bf18      	it	ne
   13d3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   13d42:	d01b      	beq.n	13d7c <__cmpdf2+0x54>
   13d44:	b001      	add	sp, #4
   13d46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   13d4a:	bf0c      	ite	eq
   13d4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   13d50:	ea91 0f03 	teqne	r1, r3
   13d54:	bf02      	ittt	eq
   13d56:	ea90 0f02 	teqeq	r0, r2
   13d5a:	2000      	moveq	r0, #0
   13d5c:	4770      	bxeq	lr
   13d5e:	f110 0f00 	cmn.w	r0, #0
   13d62:	ea91 0f03 	teq	r1, r3
   13d66:	bf58      	it	pl
   13d68:	4299      	cmppl	r1, r3
   13d6a:	bf08      	it	eq
   13d6c:	4290      	cmpeq	r0, r2
   13d6e:	bf2c      	ite	cs
   13d70:	17d8      	asrcs	r0, r3, #31
   13d72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   13d76:	f040 0001 	orr.w	r0, r0, #1
   13d7a:	4770      	bx	lr
   13d7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   13d80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13d84:	d102      	bne.n	13d8c <__cmpdf2+0x64>
   13d86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   13d8a:	d107      	bne.n	13d9c <__cmpdf2+0x74>
   13d8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   13d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13d94:	d1d6      	bne.n	13d44 <__cmpdf2+0x1c>
   13d96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   13d9a:	d0d3      	beq.n	13d44 <__cmpdf2+0x1c>
   13d9c:	f85d 0b04 	ldr.w	r0, [sp], #4
   13da0:	4770      	bx	lr
   13da2:	bf00      	nop

00013da4 <__aeabi_cdrcmple>:
   13da4:	4684      	mov	ip, r0
   13da6:	4610      	mov	r0, r2
   13da8:	4662      	mov	r2, ip
   13daa:	468c      	mov	ip, r1
   13dac:	4619      	mov	r1, r3
   13dae:	4663      	mov	r3, ip
   13db0:	e000      	b.n	13db4 <__aeabi_cdcmpeq>
   13db2:	bf00      	nop

00013db4 <__aeabi_cdcmpeq>:
   13db4:	b501      	push	{r0, lr}
   13db6:	f7ff ffb7 	bl	13d28 <__cmpdf2>
   13dba:	2800      	cmp	r0, #0
   13dbc:	bf48      	it	mi
   13dbe:	f110 0f00 	cmnmi.w	r0, #0
   13dc2:	bd01      	pop	{r0, pc}

00013dc4 <__aeabi_dcmpeq>:
   13dc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   13dc8:	f7ff fff4 	bl	13db4 <__aeabi_cdcmpeq>
   13dcc:	bf0c      	ite	eq
   13dce:	2001      	moveq	r0, #1
   13dd0:	2000      	movne	r0, #0
   13dd2:	f85d fb08 	ldr.w	pc, [sp], #8
   13dd6:	bf00      	nop

00013dd8 <__aeabi_dcmplt>:
   13dd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   13ddc:	f7ff ffea 	bl	13db4 <__aeabi_cdcmpeq>
   13de0:	bf34      	ite	cc
   13de2:	2001      	movcc	r0, #1
   13de4:	2000      	movcs	r0, #0
   13de6:	f85d fb08 	ldr.w	pc, [sp], #8
   13dea:	bf00      	nop

00013dec <__aeabi_dcmple>:
   13dec:	f84d ed08 	str.w	lr, [sp, #-8]!
   13df0:	f7ff ffe0 	bl	13db4 <__aeabi_cdcmpeq>
   13df4:	bf94      	ite	ls
   13df6:	2001      	movls	r0, #1
   13df8:	2000      	movhi	r0, #0
   13dfa:	f85d fb08 	ldr.w	pc, [sp], #8
   13dfe:	bf00      	nop

00013e00 <__aeabi_dcmpge>:
   13e00:	f84d ed08 	str.w	lr, [sp, #-8]!
   13e04:	f7ff ffce 	bl	13da4 <__aeabi_cdrcmple>
   13e08:	bf94      	ite	ls
   13e0a:	2001      	movls	r0, #1
   13e0c:	2000      	movhi	r0, #0
   13e0e:	f85d fb08 	ldr.w	pc, [sp], #8
   13e12:	bf00      	nop

00013e14 <__aeabi_dcmpgt>:
   13e14:	f84d ed08 	str.w	lr, [sp, #-8]!
   13e18:	f7ff ffc4 	bl	13da4 <__aeabi_cdrcmple>
   13e1c:	bf34      	ite	cc
   13e1e:	2001      	movcc	r0, #1
   13e20:	2000      	movcs	r0, #0
   13e22:	f85d fb08 	ldr.w	pc, [sp], #8
   13e26:	bf00      	nop

00013e28 <__aeabi_dcmpun>:
   13e28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   13e2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13e30:	d102      	bne.n	13e38 <__aeabi_dcmpun+0x10>
   13e32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   13e36:	d10a      	bne.n	13e4e <__aeabi_dcmpun+0x26>
   13e38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   13e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13e40:	d102      	bne.n	13e48 <__aeabi_dcmpun+0x20>
   13e42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   13e46:	d102      	bne.n	13e4e <__aeabi_dcmpun+0x26>
   13e48:	f04f 0000 	mov.w	r0, #0
   13e4c:	4770      	bx	lr
   13e4e:	f04f 0001 	mov.w	r0, #1
   13e52:	4770      	bx	lr

00013e54 <__aeabi_d2iz>:
   13e54:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13e58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13e5c:	d215      	bcs.n	13e8a <__aeabi_d2iz+0x36>
   13e5e:	d511      	bpl.n	13e84 <__aeabi_d2iz+0x30>
   13e60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   13e64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   13e68:	d912      	bls.n	13e90 <__aeabi_d2iz+0x3c>
   13e6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13e6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13e72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   13e76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13e7a:	fa23 f002 	lsr.w	r0, r3, r2
   13e7e:	bf18      	it	ne
   13e80:	4240      	negne	r0, r0
   13e82:	4770      	bx	lr
   13e84:	f04f 0000 	mov.w	r0, #0
   13e88:	4770      	bx	lr
   13e8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13e8e:	d105      	bne.n	13e9c <__aeabi_d2iz+0x48>
   13e90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   13e94:	bf08      	it	eq
   13e96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13e9a:	4770      	bx	lr
   13e9c:	f04f 0000 	mov.w	r0, #0
   13ea0:	4770      	bx	lr
   13ea2:	bf00      	nop

00013ea4 <__aeabi_d2uiz>:
   13ea4:	004a      	lsls	r2, r1, #1
   13ea6:	d211      	bcs.n	13ecc <__aeabi_d2uiz+0x28>
   13ea8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13eac:	d211      	bcs.n	13ed2 <__aeabi_d2uiz+0x2e>
   13eae:	d50d      	bpl.n	13ecc <__aeabi_d2uiz+0x28>
   13eb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   13eb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   13eb8:	d40e      	bmi.n	13ed8 <__aeabi_d2uiz+0x34>
   13eba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13ec2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   13ec6:	fa23 f002 	lsr.w	r0, r3, r2
   13eca:	4770      	bx	lr
   13ecc:	f04f 0000 	mov.w	r0, #0
   13ed0:	4770      	bx	lr
   13ed2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13ed6:	d102      	bne.n	13ede <__aeabi_d2uiz+0x3a>
   13ed8:	f04f 30ff 	mov.w	r0, #4294967295
   13edc:	4770      	bx	lr
   13ede:	f04f 0000 	mov.w	r0, #0
   13ee2:	4770      	bx	lr

00013ee4 <__aeabi_d2f>:
   13ee4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13ee8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   13eec:	bf24      	itt	cs
   13eee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   13ef2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   13ef6:	d90d      	bls.n	13f14 <__aeabi_d2f+0x30>
   13ef8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13efc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   13f00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   13f04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   13f08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   13f0c:	bf08      	it	eq
   13f0e:	f020 0001 	biceq.w	r0, r0, #1
   13f12:	4770      	bx	lr
   13f14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   13f18:	d121      	bne.n	13f5e <__aeabi_d2f+0x7a>
   13f1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   13f1e:	bfbc      	itt	lt
   13f20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   13f24:	4770      	bxlt	lr
   13f26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13f2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   13f2e:	f1c2 0218 	rsb	r2, r2, #24
   13f32:	f1c2 0c20 	rsb	ip, r2, #32
   13f36:	fa10 f30c 	lsls.w	r3, r0, ip
   13f3a:	fa20 f002 	lsr.w	r0, r0, r2
   13f3e:	bf18      	it	ne
   13f40:	f040 0001 	orrne.w	r0, r0, #1
   13f44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13f48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   13f4c:	fa03 fc0c 	lsl.w	ip, r3, ip
   13f50:	ea40 000c 	orr.w	r0, r0, ip
   13f54:	fa23 f302 	lsr.w	r3, r3, r2
   13f58:	ea4f 0343 	mov.w	r3, r3, lsl #1
   13f5c:	e7cc      	b.n	13ef8 <__aeabi_d2f+0x14>
   13f5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   13f62:	d107      	bne.n	13f74 <__aeabi_d2f+0x90>
   13f64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   13f68:	bf1e      	ittt	ne
   13f6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   13f6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   13f72:	4770      	bxne	lr
   13f74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   13f78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13f7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13f80:	4770      	bx	lr
   13f82:	bf00      	nop

00013f84 <__aeabi_frsub>:
   13f84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   13f88:	e002      	b.n	13f90 <__addsf3>
   13f8a:	bf00      	nop

00013f8c <__aeabi_fsub>:
   13f8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00013f90 <__addsf3>:
   13f90:	0042      	lsls	r2, r0, #1
   13f92:	bf1f      	itttt	ne
   13f94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   13f98:	ea92 0f03 	teqne	r2, r3
   13f9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   13fa0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13fa4:	d06a      	beq.n	1407c <__addsf3+0xec>
   13fa6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   13faa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   13fae:	bfc1      	itttt	gt
   13fb0:	18d2      	addgt	r2, r2, r3
   13fb2:	4041      	eorgt	r1, r0
   13fb4:	4048      	eorgt	r0, r1
   13fb6:	4041      	eorgt	r1, r0
   13fb8:	bfb8      	it	lt
   13fba:	425b      	neglt	r3, r3
   13fbc:	2b19      	cmp	r3, #25
   13fbe:	bf88      	it	hi
   13fc0:	4770      	bxhi	lr
   13fc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   13fc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13fca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13fce:	bf18      	it	ne
   13fd0:	4240      	negne	r0, r0
   13fd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13fd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   13fda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   13fde:	bf18      	it	ne
   13fe0:	4249      	negne	r1, r1
   13fe2:	ea92 0f03 	teq	r2, r3
   13fe6:	d03f      	beq.n	14068 <__addsf3+0xd8>
   13fe8:	f1a2 0201 	sub.w	r2, r2, #1
   13fec:	fa41 fc03 	asr.w	ip, r1, r3
   13ff0:	eb10 000c 	adds.w	r0, r0, ip
   13ff4:	f1c3 0320 	rsb	r3, r3, #32
   13ff8:	fa01 f103 	lsl.w	r1, r1, r3
   13ffc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   14000:	d502      	bpl.n	14008 <__addsf3+0x78>
   14002:	4249      	negs	r1, r1
   14004:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   14008:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1400c:	d313      	bcc.n	14036 <__addsf3+0xa6>
   1400e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   14012:	d306      	bcc.n	14022 <__addsf3+0x92>
   14014:	0840      	lsrs	r0, r0, #1
   14016:	ea4f 0131 	mov.w	r1, r1, rrx
   1401a:	f102 0201 	add.w	r2, r2, #1
   1401e:	2afe      	cmp	r2, #254	; 0xfe
   14020:	d251      	bcs.n	140c6 <__addsf3+0x136>
   14022:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   14026:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1402a:	bf08      	it	eq
   1402c:	f020 0001 	biceq.w	r0, r0, #1
   14030:	ea40 0003 	orr.w	r0, r0, r3
   14034:	4770      	bx	lr
   14036:	0049      	lsls	r1, r1, #1
   14038:	eb40 0000 	adc.w	r0, r0, r0
   1403c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   14040:	f1a2 0201 	sub.w	r2, r2, #1
   14044:	d1ed      	bne.n	14022 <__addsf3+0x92>
   14046:	fab0 fc80 	clz	ip, r0
   1404a:	f1ac 0c08 	sub.w	ip, ip, #8
   1404e:	ebb2 020c 	subs.w	r2, r2, ip
   14052:	fa00 f00c 	lsl.w	r0, r0, ip
   14056:	bfaa      	itet	ge
   14058:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1405c:	4252      	neglt	r2, r2
   1405e:	4318      	orrge	r0, r3
   14060:	bfbc      	itt	lt
   14062:	40d0      	lsrlt	r0, r2
   14064:	4318      	orrlt	r0, r3
   14066:	4770      	bx	lr
   14068:	f092 0f00 	teq	r2, #0
   1406c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   14070:	bf06      	itte	eq
   14072:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   14076:	3201      	addeq	r2, #1
   14078:	3b01      	subne	r3, #1
   1407a:	e7b5      	b.n	13fe8 <__addsf3+0x58>
   1407c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   14080:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   14084:	bf18      	it	ne
   14086:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1408a:	d021      	beq.n	140d0 <__addsf3+0x140>
   1408c:	ea92 0f03 	teq	r2, r3
   14090:	d004      	beq.n	1409c <__addsf3+0x10c>
   14092:	f092 0f00 	teq	r2, #0
   14096:	bf08      	it	eq
   14098:	4608      	moveq	r0, r1
   1409a:	4770      	bx	lr
   1409c:	ea90 0f01 	teq	r0, r1
   140a0:	bf1c      	itt	ne
   140a2:	2000      	movne	r0, #0
   140a4:	4770      	bxne	lr
   140a6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   140aa:	d104      	bne.n	140b6 <__addsf3+0x126>
   140ac:	0040      	lsls	r0, r0, #1
   140ae:	bf28      	it	cs
   140b0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   140b4:	4770      	bx	lr
   140b6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   140ba:	bf3c      	itt	cc
   140bc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   140c0:	4770      	bxcc	lr
   140c2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   140c6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   140ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   140ce:	4770      	bx	lr
   140d0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   140d4:	bf16      	itet	ne
   140d6:	4608      	movne	r0, r1
   140d8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   140dc:	4601      	movne	r1, r0
   140de:	0242      	lsls	r2, r0, #9
   140e0:	bf06      	itte	eq
   140e2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   140e6:	ea90 0f01 	teqeq	r0, r1
   140ea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   140ee:	4770      	bx	lr

000140f0 <__aeabi_ui2f>:
   140f0:	f04f 0300 	mov.w	r3, #0
   140f4:	e004      	b.n	14100 <__aeabi_i2f+0x8>
   140f6:	bf00      	nop

000140f8 <__aeabi_i2f>:
   140f8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   140fc:	bf48      	it	mi
   140fe:	4240      	negmi	r0, r0
   14100:	ea5f 0c00 	movs.w	ip, r0
   14104:	bf08      	it	eq
   14106:	4770      	bxeq	lr
   14108:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1410c:	4601      	mov	r1, r0
   1410e:	f04f 0000 	mov.w	r0, #0
   14112:	e01c      	b.n	1414e <__aeabi_l2f+0x2a>

00014114 <__aeabi_ul2f>:
   14114:	ea50 0201 	orrs.w	r2, r0, r1
   14118:	bf08      	it	eq
   1411a:	4770      	bxeq	lr
   1411c:	f04f 0300 	mov.w	r3, #0
   14120:	e00a      	b.n	14138 <__aeabi_l2f+0x14>
   14122:	bf00      	nop

00014124 <__aeabi_l2f>:
   14124:	ea50 0201 	orrs.w	r2, r0, r1
   14128:	bf08      	it	eq
   1412a:	4770      	bxeq	lr
   1412c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   14130:	d502      	bpl.n	14138 <__aeabi_l2f+0x14>
   14132:	4240      	negs	r0, r0
   14134:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14138:	ea5f 0c01 	movs.w	ip, r1
   1413c:	bf02      	ittt	eq
   1413e:	4684      	moveq	ip, r0
   14140:	4601      	moveq	r1, r0
   14142:	2000      	moveq	r0, #0
   14144:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   14148:	bf08      	it	eq
   1414a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1414e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   14152:	fabc f28c 	clz	r2, ip
   14156:	3a08      	subs	r2, #8
   14158:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1415c:	db10      	blt.n	14180 <__aeabi_l2f+0x5c>
   1415e:	fa01 fc02 	lsl.w	ip, r1, r2
   14162:	4463      	add	r3, ip
   14164:	fa00 fc02 	lsl.w	ip, r0, r2
   14168:	f1c2 0220 	rsb	r2, r2, #32
   1416c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   14170:	fa20 f202 	lsr.w	r2, r0, r2
   14174:	eb43 0002 	adc.w	r0, r3, r2
   14178:	bf08      	it	eq
   1417a:	f020 0001 	biceq.w	r0, r0, #1
   1417e:	4770      	bx	lr
   14180:	f102 0220 	add.w	r2, r2, #32
   14184:	fa01 fc02 	lsl.w	ip, r1, r2
   14188:	f1c2 0220 	rsb	r2, r2, #32
   1418c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   14190:	fa21 f202 	lsr.w	r2, r1, r2
   14194:	eb43 0002 	adc.w	r0, r3, r2
   14198:	bf08      	it	eq
   1419a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1419e:	4770      	bx	lr

000141a0 <__aeabi_fmul>:
   141a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   141a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   141a8:	bf1e      	ittt	ne
   141aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   141ae:	ea92 0f0c 	teqne	r2, ip
   141b2:	ea93 0f0c 	teqne	r3, ip
   141b6:	d06f      	beq.n	14298 <__aeabi_fmul+0xf8>
   141b8:	441a      	add	r2, r3
   141ba:	ea80 0c01 	eor.w	ip, r0, r1
   141be:	0240      	lsls	r0, r0, #9
   141c0:	bf18      	it	ne
   141c2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   141c6:	d01e      	beq.n	14206 <__aeabi_fmul+0x66>
   141c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   141cc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   141d0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   141d4:	fba0 3101 	umull	r3, r1, r0, r1
   141d8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   141dc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   141e0:	bf3e      	ittt	cc
   141e2:	0049      	lslcc	r1, r1, #1
   141e4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   141e8:	005b      	lslcc	r3, r3, #1
   141ea:	ea40 0001 	orr.w	r0, r0, r1
   141ee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   141f2:	2afd      	cmp	r2, #253	; 0xfd
   141f4:	d81d      	bhi.n	14232 <__aeabi_fmul+0x92>
   141f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   141fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   141fe:	bf08      	it	eq
   14200:	f020 0001 	biceq.w	r0, r0, #1
   14204:	4770      	bx	lr
   14206:	f090 0f00 	teq	r0, #0
   1420a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1420e:	bf08      	it	eq
   14210:	0249      	lsleq	r1, r1, #9
   14212:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   14216:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1421a:	3a7f      	subs	r2, #127	; 0x7f
   1421c:	bfc2      	ittt	gt
   1421e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   14222:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   14226:	4770      	bxgt	lr
   14228:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1422c:	f04f 0300 	mov.w	r3, #0
   14230:	3a01      	subs	r2, #1
   14232:	dc5d      	bgt.n	142f0 <__aeabi_fmul+0x150>
   14234:	f112 0f19 	cmn.w	r2, #25
   14238:	bfdc      	itt	le
   1423a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1423e:	4770      	bxle	lr
   14240:	f1c2 0200 	rsb	r2, r2, #0
   14244:	0041      	lsls	r1, r0, #1
   14246:	fa21 f102 	lsr.w	r1, r1, r2
   1424a:	f1c2 0220 	rsb	r2, r2, #32
   1424e:	fa00 fc02 	lsl.w	ip, r0, r2
   14252:	ea5f 0031 	movs.w	r0, r1, rrx
   14256:	f140 0000 	adc.w	r0, r0, #0
   1425a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1425e:	bf08      	it	eq
   14260:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   14264:	4770      	bx	lr
   14266:	f092 0f00 	teq	r2, #0
   1426a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1426e:	bf02      	ittt	eq
   14270:	0040      	lsleq	r0, r0, #1
   14272:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   14276:	3a01      	subeq	r2, #1
   14278:	d0f9      	beq.n	1426e <__aeabi_fmul+0xce>
   1427a:	ea40 000c 	orr.w	r0, r0, ip
   1427e:	f093 0f00 	teq	r3, #0
   14282:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   14286:	bf02      	ittt	eq
   14288:	0049      	lsleq	r1, r1, #1
   1428a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1428e:	3b01      	subeq	r3, #1
   14290:	d0f9      	beq.n	14286 <__aeabi_fmul+0xe6>
   14292:	ea41 010c 	orr.w	r1, r1, ip
   14296:	e78f      	b.n	141b8 <__aeabi_fmul+0x18>
   14298:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1429c:	ea92 0f0c 	teq	r2, ip
   142a0:	bf18      	it	ne
   142a2:	ea93 0f0c 	teqne	r3, ip
   142a6:	d00a      	beq.n	142be <__aeabi_fmul+0x11e>
   142a8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   142ac:	bf18      	it	ne
   142ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   142b2:	d1d8      	bne.n	14266 <__aeabi_fmul+0xc6>
   142b4:	ea80 0001 	eor.w	r0, r0, r1
   142b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   142bc:	4770      	bx	lr
   142be:	f090 0f00 	teq	r0, #0
   142c2:	bf17      	itett	ne
   142c4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   142c8:	4608      	moveq	r0, r1
   142ca:	f091 0f00 	teqne	r1, #0
   142ce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   142d2:	d014      	beq.n	142fe <__aeabi_fmul+0x15e>
   142d4:	ea92 0f0c 	teq	r2, ip
   142d8:	d101      	bne.n	142de <__aeabi_fmul+0x13e>
   142da:	0242      	lsls	r2, r0, #9
   142dc:	d10f      	bne.n	142fe <__aeabi_fmul+0x15e>
   142de:	ea93 0f0c 	teq	r3, ip
   142e2:	d103      	bne.n	142ec <__aeabi_fmul+0x14c>
   142e4:	024b      	lsls	r3, r1, #9
   142e6:	bf18      	it	ne
   142e8:	4608      	movne	r0, r1
   142ea:	d108      	bne.n	142fe <__aeabi_fmul+0x15e>
   142ec:	ea80 0001 	eor.w	r0, r0, r1
   142f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   142f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   142f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   142fc:	4770      	bx	lr
   142fe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   14302:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   14306:	4770      	bx	lr

00014308 <__aeabi_fdiv>:
   14308:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1430c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   14310:	bf1e      	ittt	ne
   14312:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   14316:	ea92 0f0c 	teqne	r2, ip
   1431a:	ea93 0f0c 	teqne	r3, ip
   1431e:	d069      	beq.n	143f4 <__aeabi_fdiv+0xec>
   14320:	eba2 0203 	sub.w	r2, r2, r3
   14324:	ea80 0c01 	eor.w	ip, r0, r1
   14328:	0249      	lsls	r1, r1, #9
   1432a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1432e:	d037      	beq.n	143a0 <__aeabi_fdiv+0x98>
   14330:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14334:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   14338:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1433c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   14340:	428b      	cmp	r3, r1
   14342:	bf38      	it	cc
   14344:	005b      	lslcc	r3, r3, #1
   14346:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1434a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1434e:	428b      	cmp	r3, r1
   14350:	bf24      	itt	cs
   14352:	1a5b      	subcs	r3, r3, r1
   14354:	ea40 000c 	orrcs.w	r0, r0, ip
   14358:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1435c:	bf24      	itt	cs
   1435e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   14362:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   14366:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1436a:	bf24      	itt	cs
   1436c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   14370:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   14374:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   14378:	bf24      	itt	cs
   1437a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1437e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   14382:	011b      	lsls	r3, r3, #4
   14384:	bf18      	it	ne
   14386:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1438a:	d1e0      	bne.n	1434e <__aeabi_fdiv+0x46>
   1438c:	2afd      	cmp	r2, #253	; 0xfd
   1438e:	f63f af50 	bhi.w	14232 <__aeabi_fmul+0x92>
   14392:	428b      	cmp	r3, r1
   14394:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   14398:	bf08      	it	eq
   1439a:	f020 0001 	biceq.w	r0, r0, #1
   1439e:	4770      	bx	lr
   143a0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   143a4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   143a8:	327f      	adds	r2, #127	; 0x7f
   143aa:	bfc2      	ittt	gt
   143ac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   143b0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   143b4:	4770      	bxgt	lr
   143b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   143ba:	f04f 0300 	mov.w	r3, #0
   143be:	3a01      	subs	r2, #1
   143c0:	e737      	b.n	14232 <__aeabi_fmul+0x92>
   143c2:	f092 0f00 	teq	r2, #0
   143c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   143ca:	bf02      	ittt	eq
   143cc:	0040      	lsleq	r0, r0, #1
   143ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   143d2:	3a01      	subeq	r2, #1
   143d4:	d0f9      	beq.n	143ca <__aeabi_fdiv+0xc2>
   143d6:	ea40 000c 	orr.w	r0, r0, ip
   143da:	f093 0f00 	teq	r3, #0
   143de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   143e2:	bf02      	ittt	eq
   143e4:	0049      	lsleq	r1, r1, #1
   143e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   143ea:	3b01      	subeq	r3, #1
   143ec:	d0f9      	beq.n	143e2 <__aeabi_fdiv+0xda>
   143ee:	ea41 010c 	orr.w	r1, r1, ip
   143f2:	e795      	b.n	14320 <__aeabi_fdiv+0x18>
   143f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   143f8:	ea92 0f0c 	teq	r2, ip
   143fc:	d108      	bne.n	14410 <__aeabi_fdiv+0x108>
   143fe:	0242      	lsls	r2, r0, #9
   14400:	f47f af7d 	bne.w	142fe <__aeabi_fmul+0x15e>
   14404:	ea93 0f0c 	teq	r3, ip
   14408:	f47f af70 	bne.w	142ec <__aeabi_fmul+0x14c>
   1440c:	4608      	mov	r0, r1
   1440e:	e776      	b.n	142fe <__aeabi_fmul+0x15e>
   14410:	ea93 0f0c 	teq	r3, ip
   14414:	d104      	bne.n	14420 <__aeabi_fdiv+0x118>
   14416:	024b      	lsls	r3, r1, #9
   14418:	f43f af4c 	beq.w	142b4 <__aeabi_fmul+0x114>
   1441c:	4608      	mov	r0, r1
   1441e:	e76e      	b.n	142fe <__aeabi_fmul+0x15e>
   14420:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   14424:	bf18      	it	ne
   14426:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1442a:	d1ca      	bne.n	143c2 <__aeabi_fdiv+0xba>
   1442c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   14430:	f47f af5c 	bne.w	142ec <__aeabi_fmul+0x14c>
   14434:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   14438:	f47f af3c 	bne.w	142b4 <__aeabi_fmul+0x114>
   1443c:	e75f      	b.n	142fe <__aeabi_fmul+0x15e>
   1443e:	bf00      	nop

Disassembly of section .fini:

00014440 <_fini>:
   14440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14442:	bf00      	nop
   14444:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14446:	bc08      	pop	{r3}
   14448:	469e      	mov	lr, r3
   1444a:	4770      	bx	lr
